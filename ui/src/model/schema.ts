/* eslint-disable */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/authentication/token": {
    /**
     * Renew token
     * @description Renew token with existing token
     */
    put: operations["authenticationRenewToken"];
    /**
     * Authentication with username/password
     * @description Authentication with username/password and create new token
     */
    post: operations["authenticationAuthenticate"];
  };
  "/city": {
    /**
     * city
     * @description Api for city - get list
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["list-city"];
          };
        };
      };
    };
    /**
     * city
     * @description Api for city - create item
     */
    post: {
      requestBody: {
        content: {
          "application/json": external["resources/default/city.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/city.json"];
          };
        };
      };
    };
  };
  "/city/{id}": {
    /**
     * city
     * @description Api for city - get item
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-city"];
          };
        };
      };
    };
    /**
     * city
     * @description Api for city - update item
     */
    put: {
      requestBody: {
        content: {
          "application/json": external["resources/default/city.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/city.json"];
          };
        };
      };
    };
    /**
     * city
     * @description Api for city - delete item
     */
    delete: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-city"];
          };
        };
      };
    };
  };
  "/country": {
    /**
     * country
     * @description Api for country - get list
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["list-country"];
          };
        };
      };
    };
    /**
     * country
     * @description Api for country - create item
     */
    post: {
      requestBody: {
        content: {
          "application/json": external["resources/default/country.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/country.json"];
          };
        };
      };
    };
  };
  "/country/{id}": {
    /**
     * country
     * @description Api for country - get item
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-country"];
          };
        };
      };
    };
    /**
     * country
     * @description Api for country - update item
     */
    put: {
      requestBody: {
        content: {
          "application/json": external["resources/default/country.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/country.json"];
          };
        };
      };
    };
    /**
     * country
     * @description Api for country - delete item
     */
    delete: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-country"];
          };
        };
      };
    };
  };
  "/country2": {
    /**
     * country2
     * @description Api for country2 - get list
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["list-country2"];
          };
        };
      };
    };
    /**
     * country2
     * @description Api for country2 - create item
     */
    post: {
      requestBody: {
        content: {
          "application/json": external["resources/default/country2.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/country2.json"];
          };
        };
      };
    };
  };
  "/country2/{id}": {
    /**
     * country2
     * @description Api for country2 - get item
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-country2"];
          };
        };
      };
    };
    /**
     * country2
     * @description Api for country2 - update item
     */
    put: {
      requestBody: {
        content: {
          "application/json": external["resources/default/country2.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/country2.json"];
          };
        };
      };
    };
    /**
     * country2
     * @description Api for country2 - delete item
     */
    delete: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-country2"];
          };
        };
      };
    };
  };
  "/income": {
    /**
     * income
     * @description Api for income - get list
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["list-income"];
          };
        };
      };
    };
    /**
     * income
     * @description Api for income - create item
     */
    post: {
      requestBody: {
        content: {
          "application/json": external["resources/default/income.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/income.json"];
          };
        };
      };
    };
  };
  "/income/{id}": {
    /**
     * income
     * @description Api for income - get item
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-income"];
          };
        };
      };
    };
    /**
     * income
     * @description Api for income - update item
     */
    put: {
      requestBody: {
        content: {
          "application/json": external["resources/default/income.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/income.json"];
          };
        };
      };
    };
    /**
     * income
     * @description Api for income - delete item
     */
    delete: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-income"];
          };
        };
      };
    };
  };
  "/rich-test-3995": {
    /**
     * rich-test-3995
     * @description Api for rich-test-3995 - get list
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["list-rich-test-3995"];
          };
        };
      };
    };
    /**
     * rich-test-3995
     * @description Api for rich-test-3995 - create item
     */
    post: {
      requestBody: {
        content: {
          "application/json": external["resources/default/rich-test-3995.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/rich-test-3995.json"];
          };
        };
      };
    };
  };
  "/rich-test-3995/{id}": {
    /**
     * rich-test-3995
     * @description Api for rich-test-3995 - get item
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-rich-test-3995"];
          };
        };
      };
    };
    /**
     * rich-test-3995
     * @description Api for rich-test-3995 - update item
     */
    put: {
      requestBody: {
        content: {
          "application/json": external["resources/default/rich-test-3995.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/rich-test-3995.json"];
          };
        };
      };
    };
    /**
     * rich-test-3995
     * @description Api for rich-test-3995 - delete item
     */
    delete: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-rich-test-3995"];
          };
        };
      };
    };
  };
  "/system/data-sources": {
    /** List */
    get: operations["DataSource_List"];
    /** Update */
    put: operations["DataSource_Update"];
    /** Create */
    post: operations["DataSource_Create"];
    /** Delete */
    delete: operations["DataSource_Delete"];
  };
  "/system/data-sources/{id}": {
    /** Get */
    get: operations["DataSource_Get"];
  };
  "/system/data-sources/{id}/_prepare_entity": {
    /** PrepareResourceFromEntity */
    post: operations["DataSource_PrepareResourceFromEntity"];
  };
  "/system/data-sources/{id}/_status": {
    /** Status */
    get: operations["DataSource_Status"];
  };
  "/system/data-sources/{id}/entities": {
    /** ListEntities */
    get: operations["DataSource_ListEntities"];
  };
  "/system/extensions": {
    /** List */
    get: operations["Extension_List"];
    /** Update */
    put: operations["Extension_Update"];
    /** Create */
    post: operations["Extension_Create"];
    /** Delete */
    delete: operations["Extension_Delete"];
  };
  "/system/extensions/{id}": {
    /** Get */
    get: operations["Extension_Get"];
  };
  "/system/namespaces": {
    /** List */
    get: operations["Namespace_List"];
    /** Update */
    put: operations["Namespace_Update"];
    /** Create */
    post: operations["Namespace_Create"];
    /** Delete */
    delete: operations["Namespace_Delete"];
  };
  "/system/namespaces/{id}": {
    /** Get */
    get: operations["Namespace_Get"];
  };
  "/system/resources": {
    /** List */
    get: operations["Resource_List"];
    /** Update */
    put: operations["Resource_Update"];
    /** Create */
    post: operations["Resource_Create"];
    /** Delete */
    delete: operations["Resource_Delete"];
  };
  "/system/resources/_migrate": {
    /** PrepareResourceMigrationPlan */
    post: operations["Resource_PrepareResourceMigrationPlan"];
  };
  "/system/resources/{id}": {
    /** Get */
    get: operations["Resource_Get"];
  };
  "/system/resources/{namespace}/{name}": {
    /** GetByName */
    get: operations["Resource_GetByName"];
  };
  "/system/users": {
    /** List */
    get: operations["User_List"];
  };
  "/system/users/_bulk": {
    /** Update */
    put: operations["User_Update"];
    /** Create */
    post: operations["User_Create"];
    /** Delete */
    delete: operations["User_Delete"];
  };
  "/system/users/{id}": {
    /** Get */
    get: operations["User_Get"];
  };
  "/system/watch": {
    /**
     * Watch
     * @description Sends a greeting
     */
    post: operations["Watch_Watch"];
  };
  "/tax_rate": {
    /**
     * tax_rate
     * @description Api for tax_rate - get list
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["list-tax_rate"];
          };
        };
      };
    };
    /**
     * tax_rate
     * @description Api for tax_rate - create item
     */
    post: {
      requestBody: {
        content: {
          "application/json": external["resources/default/tax_rate.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/tax_rate.json"];
          };
        };
      };
    };
  };
  "/tax_rate/{id}": {
    /**
     * tax_rate
     * @description Api for tax_rate - get item
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-tax_rate"];
          };
        };
      };
    };
    /**
     * tax_rate
     * @description Api for tax_rate - update item
     */
    put: {
      requestBody: {
        content: {
          "application/json": external["resources/default/tax_rate.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/tax_rate.json"];
          };
        };
      };
    };
    /**
     * tax_rate
     * @description Api for tax_rate - delete item
     */
    delete: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-tax_rate"];
          };
        };
      };
    };
  };
  "/virtual-resource": {
    /**
     * virtualResource
     * @description Api for virtualResource - get list
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["list-virtual-resource"];
          };
        };
      };
    };
    /**
     * virtualResource
     * @description Api for virtualResource - create item
     */
    post: {
      requestBody: {
        content: {
          "application/json": external["resources/default/virtualResource.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/virtualResource.json"];
          };
        };
      };
    };
  };
  "/virtual-resource/{id}": {
    /**
     * virtualResource
     * @description Api for virtualResource - get item
     */
    get: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-virtual-resource"];
          };
        };
      };
    };
    /**
     * virtualResource
     * @description Api for virtualResource - update item
     */
    put: {
      requestBody: {
        content: {
          "application/json": external["resources/default/virtualResource.json"];
        };
      };
      responses: {
        200: {
          content: {
            "application/json": external["resources/default/virtualResource.json"];
          };
        };
      };
    };
    /**
     * virtualResource
     * @description Api for virtualResource - delete item
     */
    delete: {
      responses: {
        200: {
          content: {
            "application/json": components["schemas"]["item-virtual-resource"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Any: {
      value?: components["schemas"]["GoogleProtobufAny"];
      yaml?: string;
    };
    ApplyRecordRequest_PropertiesEntry: {
      key?: string;
      value?: components["schemas"]["GoogleProtobufValue"];
    };
    ApplyRecordResponse: {
      record?: components["schemas"]["Record"];
      records?: (components["schemas"]["Record"])[];
    };
    AuditData: {
      createdBy?: string;
      /** Format: date-time */
      createdOn?: string;
      updatedBy?: string;
      /** Format: date-time */
      updatedOn?: string;
    };
    AuthenticationRequest: {
      password?: string;
      /**
       * Format: enum
       * @enum {string}
       */
      term?: "SHORT" | "MIDDLE" | "LONG" | "VERY_LONG";
      username?: string;
    };
    AuthenticationResponse: {
      token?: components["schemas"]["Token"];
    };
    BooleanExpression: {
      and?: components["schemas"]["CompoundBooleanExpression"];
      equal?: components["schemas"]["PairExpression"];
      greaterThan?: components["schemas"]["PairExpression"];
      greaterThanOrEqual?: components["schemas"]["PairExpression"];
      in?: components["schemas"]["PairExpression"];
      isNull?: components["schemas"]["Expression"];
      lessThan?: components["schemas"]["PairExpression"];
      lessThanOrEqual?: components["schemas"]["PairExpression"];
      not?: components["schemas"]["BooleanExpression"];
      or?: components["schemas"]["CompoundBooleanExpression"];
      regexMatch?: components["schemas"]["RegexMatchExpression"];
    };
    CompoundBooleanExpression: {
      expressions?: (components["schemas"]["BooleanExpression"])[];
    };
    CreateDataSourceRequest: {
      dataSources?: (components["schemas"]["DataSource"])[];
      token?: string;
    };
    CreateDataSourceResponse: {
      dataSources?: (components["schemas"]["DataSource"])[];
    };
    CreateExtensionRequest: {
      extensions?: (components["schemas"]["Extension"])[];
      token?: string;
    };
    CreateExtensionResponse: {
      extensions?: (components["schemas"]["Extension"])[];
    };
    CreateNamespaceRequest: {
      Namespaces?: (components["schemas"]["Namespace"])[];
      token?: string;
    };
    CreateNamespaceResponse: {
      Namespaces?: (components["schemas"]["Namespace"])[];
    };
    CreateRecordRequest_PropertiesEntry: {
      key?: string;
      value?: components["schemas"]["GoogleProtobufValue"];
    };
    CreateRecordResponse: {
      inserted?: (boolean)[];
      record?: components["schemas"]["Record"];
      records?: (components["schemas"]["Record"])[];
    };
    CreateResourceRequest: {
      annotations?: {
        [key: string]: string | undefined;
      };
      doMigration?: boolean;
      forceMigration?: boolean;
      resources?: (components["schemas"]["Resource"])[];
      token?: string;
    };
    CreateResourceResponse: {
      resources?: (components["schemas"]["Resource"])[];
    };
    CreateUserResponse: {
      user?: components["schemas"]["User"];
      users?: (components["schemas"]["User"])[];
    };
    DataSource: {
      auditData?: components["schemas"]["AuditData"];
      /**
       * Format: enum
       * @enum {string}
       */
      backend?: "POSTGRESQL" | "VIRTUAL" | "MYSQL" | "ORACLE" | "MONGODB" | "REDIS";
      description?: string;
      id?: string;
      mongoParams?: components["schemas"]["MongoParams"];
      mysqlParams?: components["schemas"]["MysqlParams"];
      name?: string;
      postgresqlParams?: components["schemas"]["PostgresqlParams"];
      redisParams?: components["schemas"]["RedisParams"];
      /** Format: uint32 */
      version?: number;
      virtualParams?: components["schemas"]["VirtualParams"];
    };
    DataSourceCatalog: {
      entities?: (components["schemas"]["DataSourceEntity"])[];
      name?: string;
    };
    DataSourceEntity: {
      name?: string;
      readOnly?: boolean;
    };
    DeleteDataSourceRequest: {
      ids?: (string)[];
      token?: string;
    };
    DeleteDataSourceResponse: Record<string, never>;
    DeleteExtensionRequest: {
      ids?: (string)[];
      token?: string;
    };
    DeleteExtensionResponse: Record<string, never>;
    DeleteNamespaceRequest: {
      ids?: (string)[];
      token?: string;
    };
    DeleteNamespaceResponse: {
      Namespaces?: (components["schemas"]["Namespace"])[];
    };
    DeleteRecordResponse: Record<string, never>;
    DeleteResourceRequest: {
      annotations?: {
        [key: string]: string | undefined;
      };
      doMigration?: boolean;
      forceMigration?: boolean;
      ids?: (string)[];
      token?: string;
    };
    DeleteResourceResponse: Record<string, never>;
    DeleteUserResponse: Record<string, never>;
    Expression: {
      additionalProperties?: (components["schemas"]["NamedAny"])[];
    };
    Extension: {
      after?: components["schemas"]["Extension_After"];
      auditData?: components["schemas"]["AuditData"];
      before?: components["schemas"]["Extension_Before"];
      description?: string;
      id?: string;
      instead?: components["schemas"]["Extension_Instead"];
      name?: string;
      namespace?: string;
      resource?: string;
      /** Format: uint32 */
      version?: number;
    };
    Extension_After: {
      all?: components["schemas"]["ExternalCall"];
      create?: components["schemas"]["ExternalCall"];
      delete?: components["schemas"]["ExternalCall"];
      get?: components["schemas"]["ExternalCall"];
      list?: components["schemas"]["ExternalCall"];
      sync?: boolean;
      update?: components["schemas"]["ExternalCall"];
    };
    Extension_Before: {
      all?: components["schemas"]["ExternalCall"];
      create?: components["schemas"]["ExternalCall"];
      delete?: components["schemas"]["ExternalCall"];
      get?: components["schemas"]["ExternalCall"];
      list?: components["schemas"]["ExternalCall"];
      sync?: boolean;
      update?: components["schemas"]["ExternalCall"];
    };
    Extension_Instead: {
      all?: components["schemas"]["ExternalCall"];
      create?: components["schemas"]["ExternalCall"];
      delete?: components["schemas"]["ExternalCall"];
      get?: components["schemas"]["ExternalCall"];
      list?: components["schemas"]["ExternalCall"];
      update?: components["schemas"]["ExternalCall"];
    };
    ExternalCall: {
      functionCall?: components["schemas"]["FunctionCall"];
      httpCall?: components["schemas"]["HttpCall"];
    };
    FunctionCall: {
      functionName?: string;
      host?: string;
    };
    GetDataSourceResponse: {
      dataSource?: components["schemas"]["DataSource"];
    };
    GetExtensionResponse: {
      extension?: components["schemas"]["Extension"];
    };
    GetNamespaceResponse: {
      Namespace?: components["schemas"]["Namespace"];
    };
    GetRecordResponse: {
      record?: components["schemas"]["Record"];
    };
    GetResourceByNameResponse: {
      resource?: components["schemas"]["Resource"];
    };
    GetResourceResponse: {
      resource?: components["schemas"]["Resource"];
    };
    GetUserResponse: {
      user?: components["schemas"]["User"];
    };
    /** @description Contains an arbitrary serialized message along with a @type that describes the type of the serialized message. */
    GoogleProtobufAny: {
      /** @description The type of the serialized message. */
      "@type"?: string;
      [key: string]: unknown | undefined;
    };
    /** @description Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values. */
    GoogleProtobufValue: Record<string, never>;
    HttpCall: {
      method?: string;
      uri?: string;
    };
    ListDataSourceResponse: {
      content?: (components["schemas"]["DataSource"])[];
    };
    ListEntitiesResponse: {
      catalogs?: (components["schemas"]["DataSourceCatalog"])[];
    };
    ListExtensionResponse: {
      content?: (components["schemas"]["Extension"])[];
    };
    ListNamespaceResponse: {
      content?: (components["schemas"]["Namespace"])[];
    };
    ListRecordResponse: {
      content?: (components["schemas"]["Record"])[];
      /** Format: uint32 */
      total?: number;
    };
    ListResourceResponse: {
      resources?: (components["schemas"]["Resource"])[];
    };
    ListUserResponse: {
      content?: (components["schemas"]["User"])[];
    };
    MongoParams: {
      dbName?: string;
      uri?: string;
    };
    MysqlParams: {
      dbName?: string;
      defaultSchema?: string;
      host?: string;
      password?: string;
      /** Format: uint32 */
      port?: number;
      username?: string;
    };
    /** @description Automatically-generated message used to represent maps of Any as ordered (name,value) pairs. */
    NamedAny: {
      /** @description Map key */
      name?: string;
      value?: components["schemas"]["Any"];
    };
    Namespace: {
      auditData?: components["schemas"]["AuditData"];
      description?: string;
      details?: Record<string, never>;
      id?: string;
      name?: string;
      securityContext?: components["schemas"]["SecurityContext"];
      /** Format: uint32 */
      version?: number;
    };
    PairExpression: {
      left?: components["schemas"]["Expression"];
      right?: components["schemas"]["Expression"];
    };
    PostgresqlParams: {
      dbName?: string;
      defaultSchema?: string;
      host?: string;
      password?: string;
      /** Format: uint32 */
      port?: number;
      username?: string;
    };
    PrepareResourceFromEntityRequest: {
      catalog?: string;
      entity?: string;
      id?: string;
      token?: string;
    };
    PrepareResourceFromEntityResponse: {
      resource?: components["schemas"]["Resource"];
    };
    PrepareResourceMigrationPlanRequest: {
      annotations?: {
        [key: string]: string | undefined;
      };
      prepareFromDataSource?: boolean;
      resources?: (components["schemas"]["Resource"])[];
      token?: string;
    };
    PrepareResourceMigrationPlanResponse: {
      plans?: (components["schemas"]["ResourceMigrationPlan"])[];
    };
    ReadStreamRequest: {
      annotations?: {
        [key: string]: string | undefined;
      };
      /** Format: uint32 */
      limit?: number;
      namespace?: string;
      /** Format: uint64 */
      offset?: number;
      packRecords?: boolean;
      query?: components["schemas"]["BooleanExpression"];
      resolveReferences?: (string)[];
      resource?: string;
      token?: string;
      useHistory?: boolean;
      useTransaction?: boolean;
    };
    Record: {
      id?: string;
      properties?: {
        [key: string]: components["schemas"]["GoogleProtobufValue"] | undefined;
      };
      propertiesPacked?: (components["schemas"]["GoogleProtobufValue"])[];
    };
    RedisParams: {
      addr?: string;
      /** Format: int32 */
      db?: number;
      password?: string;
    };
    Reference: {
      cascade?: boolean;
      referencedResource?: string;
    };
    RegexMatchExpression: {
      expression?: components["schemas"]["Expression"];
      pattern?: string;
    };
    RenewTokenRequest: {
      /**
       * Format: enum
       * @enum {string}
       */
      term?: "SHORT" | "MIDDLE" | "LONG" | "VERY_LONG";
      token?: string;
    };
    RenewTokenResponse: {
      token?: components["schemas"]["Token"];
    };
    Resource: {
      abstract?: boolean;
      annotations?: {
        [key: string]: string | undefined;
      };
      auditData?: components["schemas"]["AuditData"];
      description?: string;
      id?: string;
      immutable?: boolean;
      indexes?: (components["schemas"]["ResourceIndex"])[];
      name: string;
      namespace?: string;
      properties: (components["schemas"]["ResourceProperty"])[];
      securityContext?: components["schemas"]["SecurityContext"];
      sourceConfig?: components["schemas"]["ResourceSourceConfig"];
      title?: string;
      /** Format: uint32 */
      version: number;
      virtual: boolean;
    };
    ResourceIndex: {
      annotations?: {
        [key: string]: string | undefined;
      };
      /**
       * Format: enum
       * @enum {string}
       */
      indexType?: "BTREE" | "HASH";
      properties?: (components["schemas"]["ResourceIndexProperty"])[];
      unique?: boolean;
    };
    ResourceIndexProperty: {
      name?: string;
      /**
       * Format: enum
       * @enum {string}
       */
      order?: "ORDER_UNKNOWN" | "ORDER_ASC" | "ORDER_DESC";
    };
    ResourceMigrationCreateIndex: {
      /** Format: uint32 */
      index?: number;
    };
    ResourceMigrationCreateProperty: {
      property?: string;
    };
    ResourceMigrationCreateResource: Record<string, never>;
    ResourceMigrationDeleteIndex: {
      /** Format: uint32 */
      existingIndex?: number;
    };
    ResourceMigrationDeleteProperty: {
      existingProperty?: string;
    };
    ResourceMigrationDeleteResource: Record<string, never>;
    ResourceMigrationPlan: {
      currentResource?: components["schemas"]["Resource"];
      existingResource?: components["schemas"]["Resource"];
      steps?: (components["schemas"]["ResourceMigrationStep"])[];
    };
    ResourceMigrationStep: {
      createIndex?: components["schemas"]["ResourceMigrationCreateIndex"];
      createProperty?: components["schemas"]["ResourceMigrationCreateProperty"];
      createResource?: components["schemas"]["ResourceMigrationCreateResource"];
      deleteIndex?: components["schemas"]["ResourceMigrationDeleteIndex"];
      deleteProperty?: components["schemas"]["ResourceMigrationDeleteProperty"];
      deleteResource?: components["schemas"]["ResourceMigrationDeleteResource"];
      updateProperty?: components["schemas"]["ResourceMigrationUpdateProperty"];
      updateResource?: components["schemas"]["ResourceMigrationUpdateResource"];
    };
    ResourceMigrationUpdateProperty: {
      changedFields?: (string)[];
      existingProperty?: string;
      property?: string;
    };
    ResourceMigrationUpdateResource: {
      changedFields?: (string)[];
    };
    /** @description Resource properties is used to describe its schema. Each resource property is corresponding to a field in a record API Brew is responsible to validate data according to property types. For example, when you call create record andif you send 123.45 for int64 */
    ResourceProperty: {
      annotations?: {
        [key: string]: string | undefined;
      };
      defaultValue?: components["schemas"]["GoogleProtobufValue"];
      description?: string;
      enumValues?: (components["schemas"]["GoogleProtobufValue"])[];
      exampleValue?: components["schemas"]["GoogleProtobufValue"];
      id?: string;
      immutable?: boolean;
      /** Format: uint32 */
      length?: number;
      mapping?: string;
      name: string;
      primary?: boolean;
      reference?: components["schemas"]["Reference"];
      required?: boolean;
      securityContext?: components["schemas"]["SecurityContext"];
      /**
       * Format: enum
       * @enum {string}
       */
      subType?: "BOOL" | "STRING" | "FLOAT32" | "FLOAT64" | "INT32" | "INT64" | "BYTES" | "UUID" | "DATE" | "TIME" | "TIMESTAMP" | "OBJECT" | "MAP" | "LIST" | "REFERENCE" | "ENUM";
      title?: string;
      /**
       * Format: enum
       * @enum {string}
       */
      type?: "BOOL" | "STRING" | "FLOAT32" | "FLOAT64" | "INT32" | "INT64" | "BYTES" | "UUID" | "DATE" | "TIME" | "TIMESTAMP" | "OBJECT" | "MAP" | "LIST" | "REFERENCE" | "ENUM";
      unique?: boolean;
    };
    /** @description source config is to configure resource and bind it to data-source and an entity inside data source. An entity is like a table on sql databases or collection on mongodb etc. */
    ResourceSourceConfig: {
      catalog?: string;
      dataSource?: string;
      entity?: string;
    };
    SearchRecordRequest: {
      annotations?: {
        [key: string]: string | undefined;
      };
      /** Format: uint32 */
      limit?: number;
      namespace?: string;
      /** Format: uint64 */
      offset?: number;
      query?: components["schemas"]["BooleanExpression"];
      resolveReferences?: (string)[];
      resource?: string;
      token?: string;
      useHistory?: boolean;
    };
    SearchRecordResponse: {
      content?: (components["schemas"]["Record"])[];
      /** Format: uint32 */
      total?: number;
    };
    /** @description SecurityConstraint is a rule */
    SecurityConstraint: {
      /** Format: date-time */
      after?: string;
      /** Format: date-time */
      before?: string;
      namespace?: string;
      /**
       * Format: enum
       * @enum {string}
       */
      operation?: "OPERATION_TYPE_READ" | "OPERATION_TYPE_CREATE" | "OPERATION_TYPE_UPDATE" | "OPERATION_TYPE_DELETE" | "FULL";
      /**
       * Format: enum
       * @enum {string}
       */
      permit?: "PERMIT_TYPE_ALLOW" | "PERMIT_TYPE_REJECT" | "PERMIT_TYPE_UNKNOWN";
      principal?: string;
      property?: string;
      recordIds?: (string)[];
      resource?: string;
    };
    SecurityContext: {
      constraints?: (components["schemas"]["SecurityConstraint"])[];
    };
    /** @description The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
    Status: {
      /**
       * Format: int32
       * @description The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
       */
      code?: number;
      /** @description A list of messages that carry the error details.  There is a common set of message types for APIs to use. */
      details?: (components["schemas"]["GoogleProtobufAny"])[];
      /** @description A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client. */
      message?: string;
    };
    StatusResponse: {
      connectionAlreadyInitiated?: boolean;
      testConnection?: boolean;
    };
    Token: {
      content?: string;
      /** Format: date-time */
      expiration?: string;
      /**
       * Format: enum
       * @enum {string}
       */
      term?: "SHORT" | "MIDDLE" | "LONG" | "VERY_LONG";
    };
    UpdateDataSourceRequest: {
      dataSources?: (components["schemas"]["DataSource"])[];
      token?: string;
    };
    UpdateDataSourceResponse: {
      dataSources?: (components["schemas"]["DataSource"])[];
    };
    UpdateExtensionRequest: {
      extensions?: (components["schemas"]["Extension"])[];
      token?: string;
    };
    UpdateExtensionResponse: {
      extensions?: (components["schemas"]["Extension"])[];
    };
    UpdateMultiRecordResponse: {
      record?: components["schemas"]["Record"];
      records?: (components["schemas"]["Record"])[];
    };
    UpdateNamespaceRequest: {
      Namespaces?: (components["schemas"]["Namespace"])[];
      token?: string;
    };
    UpdateNamespaceResponse: {
      Namespaces?: (components["schemas"]["Namespace"])[];
    };
    UpdateRecordRequest_PropertiesEntry: {
      key?: string;
      value?: components["schemas"]["GoogleProtobufValue"];
    };
    UpdateRecordResponse: {
      record?: components["schemas"]["Record"];
      records?: (components["schemas"]["Record"])[];
    };
    UpdateResourceRequest: {
      annotations?: {
        [key: string]: string | undefined;
      };
      doMigration?: boolean;
      forceMigration?: boolean;
      resources?: (components["schemas"]["Resource"])[];
      token?: string;
    };
    UpdateResourceResponse: {
      resources?: (components["schemas"]["Resource"])[];
    };
    UpdateUserResponse: {
      user?: components["schemas"]["User"];
      users?: (components["schemas"]["User"])[];
    };
    User: {
      auditData?: components["schemas"]["AuditData"];
      details?: Record<string, never>;
      id?: string;
      password?: string;
      securityContext?: components["schemas"]["SecurityContext"];
      signKey?: string;
      username?: string;
      /** Format: uint32 */
      version?: number;
    };
    VirtualParams: {
      /**
       * Format: enum
       * @enum {string}
       */
      mode?: "DISCARD" | "ERROR";
    };
    WatchMessage: {
      changes?: Record<string, never>;
      /**
       * Format: enum
       * @enum {string}
       */
      event?: "CREATE" | "UPDATE" | "DELETE" | "GET" | "LIST";
      /** Format: date-time */
      eventOn?: string;
      recordIds?: (string)[];
    };
    "item-city": {
      content?: external["resources/default/city.json"];
    };
    "item-country": {
      content?: external["resources/default/country.json"];
    };
    "item-country2": {
      content?: external["resources/default/country2.json"];
    };
    "item-income": {
      content?: external["resources/default/income.json"];
    };
    "item-rich-test-3995": {
      content?: external["resources/default/rich-test-3995.json"];
    };
    "item-tax_rate": {
      content?: external["resources/default/tax_rate.json"];
    };
    "item-virtual-resource": {
      content?: external["resources/default/virtualResource.json"];
    };
    "list-city": {
      content?: (external["resources/default/city.json"])[];
    };
    "list-country": {
      content?: (external["resources/default/country.json"])[];
    };
    "list-country2": {
      content?: (external["resources/default/country2.json"])[];
    };
    "list-income": {
      content?: (external["resources/default/income.json"])[];
    };
    "list-rich-test-3995": {
      content?: (external["resources/default/rich-test-3995.json"])[];
    };
    "list-tax_rate": {
      content?: (external["resources/default/tax_rate.json"])[];
    };
    "list-virtual-resource": {
      content?: (external["resources/default/virtualResource.json"])[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export interface external {
  "resources/default/city.json": {
    country: Record<string, never>;
    description?: string;
    /** Format: uuid */
    id: string;
    name?: string;
    /** Format: int32 */
    version: number;
  }
  "resources/default/country.json": {
    /** Format: int64 */
    area?: number;
    description?: string;
    /** Format: uuid */
    id: string;
    name?: string;
    /** Format: int64 */
    population?: number;
    /** Format: int32 */
    version: number;
  }
  "resources/default/country2.json": {
    description?: string;
    /** Format: uuid */
    id: string;
    name: string;
    /** Format: int32 */
    version: number;
  }
  "resources/default/income.json": {
    city: Record<string, never>;
    country: Record<string, never>;
    /** Format: int32 */
    gross_income: number;
    /** Format: uuid */
    id: string;
    /** Format: int32 */
    net_income?: number;
    /** Format: int32 */
    tax?: number;
    /** Format: int32 */
    version: number;
  }
  "resources/default/rich-test-3995.json": {
    bool: boolean;
    /** Format: base64 */
    bytes?: string;
    createdBy: string;
    /** Format: datetime */
    createdOn: string;
    /** Format: date */
    date: string;
    /** Format: float */
    double: number;
    /** Format: double */
    float: number;
    /** Format: uuid */
    id: string;
    /** Format: int32 */
    int32: number;
    /** Format: int32 */
    int32_o?: number;
    /** Format: int64 */
    int64: number;
    object: Record<string, never>;
    string: string;
    text: string;
    /** Format: time */
    time: string;
    /** Format: datetime */
    timestamp: string;
    updatedBy?: string;
    /** Format: datetime */
    updatedOn?: string;
    /** Format: uuid */
    uuid: string;
    /** Format: int32 */
    version: number;
  }
  "resources/default/tax_rate.json": {
    city?: Record<string, never>;
    country: Record<string, never>;
    /** Format: uuid */
    id: string;
    name: string;
    /** Format: int32 */
    order: number;
    /** Format: double */
    rate: number;
    /** Format: int32 */
    until: number;
    /** Format: int32 */
    version: number;
  }
  "resources/default/virtualResource.json": {
    description?: string;
    /** Format: uuid */
    id: string;
    name: string;
    /** Format: int32 */
    version: number;
  }
}

export interface operations {

  /**
   * Renew token
   * @description Renew token with existing token
   */
  authenticationRenewToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RenewTokenRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RenewTokenResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /**
   * Authentication with username/password
   * @description Authentication with username/password and create new token
   */
  authenticationAuthenticate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthenticationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthenticationResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** List */
  DataSource_List: {
    parameters: {
      query: {
        token?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListDataSourceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Update */
  DataSource_Update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateDataSourceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UpdateDataSourceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Create */
  DataSource_Create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateDataSourceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateDataSourceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Delete */
  DataSource_Delete: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteDataSourceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteDataSourceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Get */
  DataSource_Get: {
    parameters: {
      query: {
        token?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetDataSourceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** PrepareResourceFromEntity */
  DataSource_PrepareResourceFromEntity: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PrepareResourceFromEntityRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrepareResourceFromEntityResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Status */
  DataSource_Status: {
    parameters: {
      query: {
        token?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StatusResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** ListEntities */
  DataSource_ListEntities: {
    parameters: {
      query: {
        token?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListEntitiesResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** List */
  Extension_List: {
    parameters: {
      query: {
        token?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListExtensionResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Update */
  Extension_Update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateExtensionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UpdateExtensionResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Create */
  Extension_Create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateExtensionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateExtensionResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Delete */
  Extension_Delete: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteExtensionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteExtensionResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Get */
  Extension_Get: {
    parameters: {
      query: {
        token?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetExtensionResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** List */
  Namespace_List: {
    parameters: {
      query: {
        token?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListNamespaceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Update */
  Namespace_Update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNamespaceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UpdateNamespaceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Create */
  Namespace_Create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateNamespaceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateNamespaceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Delete */
  Namespace_Delete: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteNamespaceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteNamespaceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Get */
  Namespace_Get: {
    parameters: {
      query: {
        token?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetNamespaceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** List */
  Resource_List: {
    parameters: {
      query: {
        token?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListResourceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Update */
  Resource_Update: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateResourceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UpdateResourceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Create */
  Resource_Create: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateResourceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateResourceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Delete */
  Resource_Delete: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteResourceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteResourceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** PrepareResourceMigrationPlan */
  Resource_PrepareResourceMigrationPlan: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PrepareResourceMigrationPlanRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PrepareResourceMigrationPlanResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Get */
  Resource_Get: {
    parameters: {
      query: {
        token?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetResourceResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** GetByName */
  Resource_GetByName: {
    parameters: {
      query: {
        token?: string;
      };
      path: {
        namespace: string;
        name: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetResourceByNameResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** List */
  User_List: {
    parameters: {
      query: {
        token?: string;
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListUserResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Update */
  User_Update: {
    parameters: {
      query: {
        token?: string;
        "user.id"?: string;
        "user.username"?: string;
        "user.password"?: string;
        "user.signKey"?: string;
        "user.auditData.createdOn"?: string;
        "user.auditData.updatedOn"?: string;
        "user.auditData.createdBy"?: string;
        "user.auditData.updatedBy"?: string;
        "user.version"?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UpdateUserResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Create */
  User_Create: {
    parameters: {
      query: {
        token?: string;
        "user.id"?: string;
        "user.username"?: string;
        "user.password"?: string;
        "user.signKey"?: string;
        "user.auditData.createdOn"?: string;
        "user.auditData.updatedOn"?: string;
        "user.auditData.createdBy"?: string;
        "user.auditData.updatedBy"?: string;
        "user.version"?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateUserResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Delete */
  User_Delete: {
    parameters: {
      query: {
        token?: string;
        id?: string;
        ids?: (string)[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteUserResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** Get */
  User_Get: {
    parameters: {
      query: {
        token?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GetUserResponse"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /**
   * Watch
   * @description Sends a greeting
   */
  Watch_Watch: {
    parameters: {
      query: {
        token?: string;
        namespace?: string;
        resource?: string;
        "query.not.not.equal.left.property"?: string;
        "query.not.not.equal.left.value"?: components["schemas"]["GoogleProtobufValue"];
        "query.not.not.equal.left.refValue.namespace"?: string;
        "query.not.not.equal.left.refValue.resource"?: string;
        "query.not.not.equal.right.property"?: string;
        "query.not.not.equal.right.value"?: components["schemas"]["GoogleProtobufValue"];
        "query.not.not.equal.right.refValue.namespace"?: string;
        "query.not.not.equal.right.refValue.resource"?: string;
        "query.not.not.regexMatch.pattern"?: string;
        "query.not.regexMatch.pattern"?: string;
        events?: ("CREATE" | "UPDATE" | "DELETE" | "GET" | "LIST")[];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchMessage"];
        };
      };
      /** @description Default error response */
      default: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
}
