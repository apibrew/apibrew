/* eslint-disable */

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
    "/authentication/token": {
        /**
         * Renew token
         * @description Renew token with existing token
         */
        put: operations["authenticationRenewToken"];
        /**
         * Authentication with username/password
         * @description Authentication with username/password and create new token
         */
        post: operations["authenticationAuthenticate"];
    };
    "/records/read_stream": {
        /** ReadStream */
        post: operations["Record_ReadStream"];
    };
    "/records/{namespace}/{resource}": {
        /** List */
        get: operations["Record_List"];
        /** Create */
        post: operations["Record_Create"];
        /** Apply */
        patch: operations["Record_Apply"];
    };
    "/records/{namespace}/{resource}/_bulk": {
        /** Update */
        put: operations["Record_Update"];
        /** Create */
        post: operations["Record_Create"];
        /** Delete */
        delete: operations["Record_Delete"];
        /** Apply */
        patch: operations["Record_Apply"];
    };
    "/records/{namespace}/{resource}/_multi": {
        /**
         * UpdateMulti
         * @description Not implemented yet
         */
        post: operations["Record_UpdateMulti"];
    };
    "/records/{namespace}/{resource}/_search": {
        /** Search */
        post: operations["Record_Search"];
    };
    "/records/{namespace}/{resource}/{id}": {
        /** Get */
        get: operations["Record_Get"];
        /** Update */
        put: operations["Record_Update"];
        /** Delete */
        delete: operations["Record_Delete"];
    };
    "/system/data-sources": {
        /** List */
        get: operations["DataSource_List"];
        /** Update */
        put: operations["DataSource_Update"];
        /** Create */
        post: operations["DataSource_Create"];
        /** Delete */
        delete: operations["DataSource_Delete"];
    };
    "/system/data-sources/{id}": {
        /** Get */
        get: operations["DataSource_Get"];
    };
    "/system/data-sources/{id}/_prepare_entity": {
        /**
         * PrepareResourceFromEntity
         * @description PrepareResourceFromEntity will return resource from data source based on entity.
         *  It is for database first approach. If you already have an entity/table on data source and your want to create resource based on it, you can call this endpoint to do it.
         */
        post: operations["DataSource_PrepareResourceFromEntity"];
    };
    "/system/data-sources/{id}/_status": {
        /**
         * Status
         * @description Status will return connection status of data source
         */
        get: operations["DataSource_Status"];
    };
    "/system/data-sources/{id}/entities": {
        /**
         * ListEntities
         * @description List entities will return all entities from data source
         */
        get: operations["DataSource_ListEntities"];
    };
    "/system/extensions": {
        /** List */
        get: operations["Extension_List"];
        /** Update */
        put: operations["Extension_Update"];
        /** Create */
        post: operations["Extension_Create"];
        /** Delete */
        delete: operations["Extension_Delete"];
    };
    "/system/extensions/{id}": {
        /** Get */
        get: operations["Extension_Get"];
    };
    "/system/namespaces": {
        /** List */
        get: operations["Namespace_List"];
        /** Update */
        put: operations["Namespace_Update"];
        /** Create */
        post: operations["Namespace_Create"];
        /** Delete */
        delete: operations["Namespace_Delete"];
    };
    "/system/namespaces/{id}": {
        /** Get */
        get: operations["Namespace_Get"];
    };
    "/system/resources": {
        /** List */
        get: operations["Resource_List"];
        /** Update */
        put: operations["Resource_Update"];
        /** Create */
        post: operations["Resource_Create"];
        /** Delete */
        delete: operations["Resource_Delete"];
    };
    "/system/resources/_migrate": {
        /**
         * PrepareResourceMigrationPlan
         * @description PrepareResourceMigrationPlan will prepare the migration plan for the resources, it will not do any migration. It will just return the plan for the migration.
         */
        post: operations["Resource_PrepareResourceMigrationPlan"];
    };
    "/system/resources/{id}": {
        /** Get */
        get: operations["Resource_Get"];
    };
    "/system/resources/{namespace}/{name}": {
        /** GetByName */
        get: operations["Resource_GetByName"];
    };
    "/system/users": {
        /** List */
        get: operations["User_List"];
    };
    "/system/users/_bulk": {
        /** Update */
        put: operations["User_Update"];
        /** Create */
        post: operations["User_Create"];
        /** Delete */
        delete: operations["User_Delete"];
    };
    "/system/users/{id}": {
        /** Get */
        get: operations["User_Get"];
    };
    "/system/watch": {
        /**
         * Watch
         * @description Sends a greeting
         */
        post: operations["Watch_Watch"];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        Any: {
            value?: components["schemas"]["GoogleProtobufAny"];
            yaml?: string;
        };
        ApplyRecordRequest_PropertiesEntry: {
            key?: string;
            value?: components["schemas"]["GoogleProtobufValue"];
        };
        ApplyRecordResponse: {
            record?: components["schemas"]["Record"];
            records?: (components["schemas"]["Record"])[];
        };
        AuditData: {
            /** Format: date-time */
            createdOn?: string;
            /** Format: date-time */
            updatedOn?: string;
            createdBy?: string;
            updatedBy?: string;
        };
        /** @description AuthenticationRequest is the request for authentication */
        AuthenticationRequest: {
            username?: string;
            password?: string;
            /**
             * Format: enum
             * @description Token Lifespan
             * @enum {string}
             */
            term?: "SHORT" | "MIDDLE" | "LONG" | "VERY_LONG";
        };
        AuthenticationResponse: {
            token?: components["schemas"]["Token"];
        };
        BooleanExpression: {
            and?: components["schemas"]["CompoundBooleanExpression"];
            or?: components["schemas"]["CompoundBooleanExpression"];
            not?: components["schemas"]["BooleanExpression"];
            equal?: components["schemas"]["PairExpression"];
            lessThan?: components["schemas"]["PairExpression"];
            greaterThan?: components["schemas"]["PairExpression"];
            lessThanOrEqual?: components["schemas"]["PairExpression"];
            greaterThanOrEqual?: components["schemas"]["PairExpression"];
            in?: components["schemas"]["PairExpression"];
            isNull?: components["schemas"]["Expression"];
            regexMatch?: components["schemas"]["RegexMatchExpression"];
        };
        CompoundBooleanExpression: {
            expressions?: (components["schemas"]["BooleanExpression"])[];
        };
        CreateDataSourceRequest: {
            token?: string;
            dataSources?: (components["schemas"]["DataSource"])[];
        };
        CreateDataSourceResponse: {
            dataSources?: (components["schemas"]["DataSource"])[];
        };
        CreateExtensionRequest: {
            token?: string;
            extensions?: (components["schemas"]["Extension"])[];
        };
        CreateExtensionResponse: {
            extensions?: (components["schemas"]["Extension"])[];
        };
        CreateNamespaceRequest: {
            token?: string;
            Namespaces?: (components["schemas"]["Namespace"])[];
        };
        CreateNamespaceResponse: {
            Namespaces?: (components["schemas"]["Namespace"])[];
        };
        CreateRecordRequest_PropertiesEntry: {
            key?: string;
            value?: components["schemas"]["GoogleProtobufValue"];
        };
        CreateRecordResponse: {
            record?: components["schemas"]["Record"];
            records?: (components["schemas"]["Record"])[];
            inserted?: (boolean)[];
        };
        CreateResourceRequest: {
            token?: string;
            resources?: (components["schemas"]["Resource"])[];
            /** @description if true, it will try to migrate the resource to the data source, if it is false, resource will be only created, backend will not be affected. */
            doMigration?: boolean;
            /** @description if true, it will force the migration, if it is false, it will not migrate if there is a conflict. Force migration will also do following things: - if column/index is deleted from resource, it will delete it from backend */
            forceMigration?: boolean;
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        CreateResourceResponse: {
            resources?: (components["schemas"]["Resource"])[];
        };
        CreateUserResponse: {
            user?: components["schemas"]["User"];
            users?: (components["schemas"]["User"])[];
        };
        DataSource: {
            id?: string;
            /**
             * Format: enum
             * @enum {string}
             */
            backend?: "POSTGRESQL" | "VIRTUAL" | "MYSQL" | "ORACLE" | "MONGODB" | "REDIS";
            name?: string;
            description?: string;
            postgresqlParams?: components["schemas"]["PostgresqlParams"];
            mysqlParams?: components["schemas"]["MysqlParams"];
            virtualParams?: components["schemas"]["VirtualParams"];
            redisParams?: components["schemas"]["RedisParams"];
            mongoParams?: components["schemas"]["MongoParams"];
            auditData?: components["schemas"]["AuditData"];
            /** Format: uint32 */
            version?: number;
        };
        DataSourceCatalog: {
            name?: string;
            entities?: (components["schemas"]["DataSourceEntity"])[];
        };
        DataSourceEntity: {
            name?: string;
            readOnly?: boolean;
        };
        DeleteDataSourceRequest: {
            token?: string;
            ids?: (string)[];
        };
        DeleteDataSourceResponse: Record<string, never>;
        DeleteExtensionRequest: {
            token?: string;
            ids?: (string)[];
        };
        DeleteExtensionResponse: Record<string, never>;
        DeleteNamespaceRequest: {
            token?: string;
            ids?: (string)[];
        };
        DeleteNamespaceResponse: {
            Namespaces?: (components["schemas"]["Namespace"])[];
        };
        DeleteRecordResponse: Record<string, never>;
        DeleteResourceRequest: {
            token?: string;
            ids?: (string)[];
            /** @description See the comments on CreateResourceRequest.doMigration */
            doMigration?: boolean;
            /** @description See the comments on CreateResourceRequest.forceMigration */
            forceMigration?: boolean;
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        DeleteResourceResponse: Record<string, never>;
        DeleteUserResponse: Record<string, never>;
        Event: {
            id?: string;
            /**
             * Format: enum
             * @enum {string}
             */
            action?: "CREATE" | "UPDATE" | "DELETE" | "GET" | "LIST" | "OPERATE";
            actionSummary?: string;
            actionDescription?: string;
            resource?: components["schemas"]["Resource"];
            /** @description CREATE,UPDATE - records are for incoming and outgoing records GET - there will be only one record LIST - result of the list operation */
            records?: (components["schemas"]["Record"])[];
            /** @description GET - there will be only one id, for getting record with id DELETE - there will be multiple ids, for deleting multiple records */
            ids?: (string)[];
            recordSearchParams?: components["schemas"]["Event_RecordSearchParams"];
            /** @description If true, this will be last event on operation list */
            finalizes?: boolean;
            /** @description If true, backend will wait for processing this event before sending next one on operation list */
            sync?: boolean;
            /** Format: date-time */
            time?: string;
            /** @description Request annotations */
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        /** @description Events pass through selectors, if selector returns true, event will be processed Selector returns true if no selector fails. For example, if you passed empty selector, it will return true for all events. */
        EventSelector: {
            actions?: ("CREATE" | "UPDATE" | "DELETE" | "GET" | "LIST" | "OPERATE")[];
            recordSelector?: components["schemas"]["BooleanExpression"];
            namespaces?: (string)[];
            resources?: (string)[];
            /** @description star means all */
            ids?: (string)[];
            /** @description star means all, empty means proceed */
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        Event_RecordSearchParams: {
            query?: components["schemas"]["BooleanExpression"];
            /** Format: uint32 */
            limit?: number;
            /** Format: uint64 */
            offset?: number;
            resolveReferences?: (string)[];
        };
        Expression: {
            additionalProperties?: (components["schemas"]["NamedAny"])[];
        };
        Extension: {
            id?: string;
            name?: string;
            description?: string;
            selector?: components["schemas"]["EventSelector"];
            /** Format: int32 */
            order?: number;
            /** @description If true, this will be last event on operation list */
            finalizes?: boolean;
            /** @description If true, backend will wait for processing this event before sending next one on operation list */
            sync?: boolean;
            responds?: boolean;
            call?: components["schemas"]["ExternalCall"];
            auditData?: components["schemas"]["AuditData"];
            /** Format: uint32 */
            version?: number;
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        ExternalCall: {
            functionCall?: components["schemas"]["FunctionCall"];
            httpCall?: components["schemas"]["HttpCall"];
        };
        FunctionCall: {
            host?: string;
            functionName?: string;
        };
        GetDataSourceResponse: {
            dataSource?: components["schemas"]["DataSource"];
        };
        GetExtensionResponse: {
            extension?: components["schemas"]["Extension"];
        };
        GetNamespaceResponse: {
            Namespace?: components["schemas"]["Namespace"];
        };
        GetRecordResponse: {
            record?: components["schemas"]["Record"];
        };
        GetResourceByNameResponse: {
            resource?: components["schemas"]["Resource"];
        };
        GetResourceResponse: {
            resource?: components["schemas"]["Resource"];
        };
        GetUserResponse: {
            user?: components["schemas"]["User"];
        };
        /** @description Contains an arbitrary serialized message along with a @type that describes the type of the serialized message. */
        GoogleProtobufAny: {
            /** @description The type of the serialized message. */
            "@type"?: string;
            [key: string]: unknown | undefined;
        };
        /** @description Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values. */
        GoogleProtobufValue: Record<string, never>;
        HttpCall: {
            uri?: string;
            method?: string;
        };
        ListDataSourceResponse: {
            content?: (components["schemas"]["DataSource"])[];
        };
        ListEntitiesResponse: {
            catalogs?: (components["schemas"]["DataSourceCatalog"])[];
        };
        ListExtensionResponse: {
            content?: (components["schemas"]["Extension"])[];
        };
        ListNamespaceResponse: {
            content?: (components["schemas"]["Namespace"])[];
        };
        ListRecordResponse: {
            /** Format: uint32 */
            total?: number;
            content?: (components["schemas"]["Record"])[];
        };
        ListResourceResponse: {
            resources?: (components["schemas"]["Resource"])[];
        };
        ListUserResponse: {
            content?: (components["schemas"]["User"])[];
        };
        MongoParams: {
            uri?: string;
            dbName?: string;
        };
        MysqlParams: {
            username?: string;
            password?: string;
            host?: string;
            /** Format: uint32 */
            port?: number;
            dbName?: string;
            defaultSchema?: string;
        };
        /** @description Automatically-generated message used to represent maps of Any as ordered (name,value) pairs. */
        NamedAny: {
            /** @description Map key */
            name?: string;
            value?: components["schemas"]["Any"];
        };
        Namespace: {
            id?: string;
            name: string;
            description?: string;
            details?: Record<string, never>;
            securityContext?: components["schemas"]["SecurityContext"];
            auditData?: components["schemas"]["AuditData"];
            /** Format: uint32 */
            version?: number;
        };
        PairExpression: {
            left?: components["schemas"]["Expression"];
            right?: components["schemas"]["Expression"];
        };
        PostgresqlParams: {
            username?: string;
            password?: string;
            host?: string;
            /** Format: uint32 */
            port?: number;
            dbName?: string;
            defaultSchema?: string;
        };
        PrepareResourceFromEntityRequest: {
            token?: string;
            /** @description data source id, required, It is for specifying that which database the operation will be performed */
            id?: string;
            /** @description catalog is optional, if not provided, default catalog will be used, catalog is like schema in database */
            catalog?: string;
            /** @description entity is required, it is like table in database, collection on mongodb, etc. */
            entity?: string;
        };
        PrepareResourceFromEntityResponse: {
            resource?: components["schemas"]["Resource"];
        };
        PrepareResourceMigrationPlanRequest: {
            token?: string;
            prepareFromDataSource?: boolean;
            resources?: (components["schemas"]["Resource"])[];
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        PrepareResourceMigrationPlanResponse: {
            plans?: (components["schemas"]["ResourceMigrationPlan"])[];
        };
        ReadStreamRequest: {
            token?: string;
            namespace?: string;
            resource?: string;
            query?: components["schemas"]["BooleanExpression"];
            /** Format: uint32 */
            limit?: number;
            /** Format: uint64 */
            offset?: number;
            useHistory?: boolean;
            resolveReferences?: (string)[];
            useTransaction?: boolean;
            packRecords?: boolean;
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        Record: {
            id?: string;
            properties?: {
                [key: string]: components["schemas"]["GoogleProtobufValue"] | undefined;
            };
            propertiesPacked?: (components["schemas"]["GoogleProtobufValue"])[];
        };
        RedisParams: {
            addr?: string;
            password?: string;
            /** Format: int32 */
            db?: number;
        };
        Reference: {
            referencedResource?: string;
            cascade?: boolean;
        };
        RegexMatchExpression: {
            pattern?: string;
            expression?: components["schemas"]["Expression"];
        };
        RenewTokenRequest: {
            token?: string;
            /**
             * Format: enum
             * @enum {string}
             */
            term?: "SHORT" | "MIDDLE" | "LONG" | "VERY_LONG";
        };
        RenewTokenResponse: {
            token?: components["schemas"]["Token"];
        };
        Resource: {
            id?: string;
            name: string;
            namespace?: string;
            sourceConfig?: components["schemas"]["ResourceSourceConfig"];
            properties: (components["schemas"]["ResourceProperty"])[];
            types?: (components["schemas"]["SubType"])[];
            indexes?: (components["schemas"]["ResourceIndex"])[];
            securityContext?: components["schemas"]["SecurityContext"];
            virtual?: boolean;
            immutable?: boolean;
            abstract?: boolean;
            title?: string;
            description?: string;
            auditData?: components["schemas"]["AuditData"];
            /** Format: uint32 */
            version?: number;
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        ResourceIndex: {
            properties?: (components["schemas"]["ResourceIndexProperty"])[];
            /**
             * Format: enum
             * @enum {string}
             */
            indexType?: "BTREE" | "HASH";
            unique?: boolean;
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        ResourceIndexProperty: {
            name?: string;
            /**
             * Format: enum
             * @enum {string}
             */
            order?: "ORDER_UNKNOWN" | "ORDER_ASC" | "ORDER_DESC";
        };
        ResourceMigrationCreateIndex: {
            /** Format: uint32 */
            index?: number;
        };
        ResourceMigrationCreateProperty: {
            property?: string;
        };
        ResourceMigrationCreateResource: Record<string, never>;
        ResourceMigrationDeleteIndex: {
            /** Format: uint32 */
            existingIndex?: number;
        };
        ResourceMigrationDeleteProperty: {
            existingProperty?: string;
        };
        ResourceMigrationDeleteResource: Record<string, never>;
        ResourceMigrationPlan: {
            existingResource?: components["schemas"]["Resource"];
            currentResource?: components["schemas"]["Resource"];
            steps?: (components["schemas"]["ResourceMigrationStep"])[];
        };
        ResourceMigrationStep: {
            createResource?: components["schemas"]["ResourceMigrationCreateResource"];
            deleteResource?: components["schemas"]["ResourceMigrationDeleteResource"];
            updateResource?: components["schemas"]["ResourceMigrationUpdateResource"];
            createProperty?: components["schemas"]["ResourceMigrationCreateProperty"];
            deleteProperty?: components["schemas"]["ResourceMigrationDeleteProperty"];
            updateProperty?: components["schemas"]["ResourceMigrationUpdateProperty"];
            createIndex?: components["schemas"]["ResourceMigrationCreateIndex"];
            deleteIndex?: components["schemas"]["ResourceMigrationDeleteIndex"];
        };
        ResourceMigrationUpdateProperty: {
            existingProperty?: string;
            property?: string;
            changedFields?: (string)[];
        };
        ResourceMigrationUpdateResource: {
            changedFields?: (string)[];
        };
        /** @description Resource properties is used to describe its schema. Each resource property is corresponding to a field in a record API Brew is responsible to validate data according to property types. For example, when you call create record and if you send 123.45 for int64 */
        SubType: {
            name: string
            properties: components["schemas"]["ResourceProperty"][]
        }
        ResourceProperty: {
            id?: string;
            /** @description property name */
            name: string;
            /**
             * Format: enum
             * @description type of property
             * @enum {string}
             */
            type: "BOOL" | "STRING" | "FLOAT32" | "FLOAT64" | "INT32" | "INT64" | "BYTES" | "UUID" | "DATE" | "TIME" | "TIMESTAMP" | "OBJECT" | "MAP" | "LIST" | "REFERENCE" | "ENUM" | "STRUCT";
            /** @description mapping is like a column name, it is binding name to entity. For abstraction purposes property name is not used while communicating to resource backend. Instead mapping is used as a key of property */
            mapping?: string;
            /** @description this is to mark property as required */
            required?: boolean;
            primary?: boolean;
            /** Format: uint32 */
            length?: number;
            unique?: boolean;
            immutable?: boolean;
            securityContext?: components["schemas"]["SecurityContext"];
            defaultValue?: components["schemas"]["GoogleProtobufValue"];
            exampleValue?: components["schemas"]["GoogleProtobufValue"];
            enumValues?: (components["schemas"]["GoogleProtobufValue"])[];
            reference?: components["schemas"]["Reference"];
            properties?: (components["schemas"]["ResourceProperty"])[];
            item?: components["schemas"]["ResourceProperty"];
            title?: string;
            typeRef?: string
            description?: string;
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        /** @description source config is to configure resource and bind it to data-source and an entity inside data source. An entity is like a table on sql databases or collection on mongodb etc. */
        ResourceSourceConfig: {
            dataSource?: string;
            catalog?: string;
            entity?: string;
        };
        SearchRecordRequest: {
            token?: string;
            namespace?: string;
            resource?: string;
            query?: components["schemas"]["BooleanExpression"];
            /** Format: uint32 */
            limit?: number;
            /** Format: uint64 */
            offset?: number;
            useHistory?: boolean;
            resolveReferences?: (string)[];
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        SearchRecordResponse: {
            /** Format: uint32 */
            total?: number;
            content?: (components["schemas"]["Record"])[];
        };
        /** @description SecurityConstraint is a rule */
        SecurityConstraint: {
            namespace?: string;
            resource?: string;
            property?: string;
            /** Format: date-time */
            before?: string;
            /** Format: date-time */
            after?: string;
            principal?: string;
            recordIds?: (string)[];
            /**
             * Format: enum
             * @enum {string}
             */
            operation?: "OPERATION_TYPE_READ" | "OPERATION_TYPE_CREATE" | "OPERATION_TYPE_UPDATE" | "OPERATION_TYPE_DELETE" | "FULL";
            /**
             * Format: enum
             * @enum {string}
             */
            permit?: "PERMIT_TYPE_ALLOW" | "PERMIT_TYPE_REJECT" | "PERMIT_TYPE_UNKNOWN";
        };
        SecurityContext: {
            constraints?: (components["schemas"]["SecurityConstraint"])[];
        };
        /** @description The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors). */
        Status: {
            /**
             * Format: int32
             * @description The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
             */
            code?: number;
            /** @description A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client. */
            message?: string;
            /** @description A list of messages that carry the error details.  There is a common set of message types for APIs to use. */
            details?: (components["schemas"]["GoogleProtobufAny"])[];
        };
        StatusResponse: {
            connectionAlreadyInitiated?: boolean;
            testConnection?: boolean;
        };
        Token: {
            /**
             * Format: enum
             * @enum {string}
             */
            term?: "SHORT" | "MIDDLE" | "LONG" | "VERY_LONG";
            content?: string;
            /** Format: date-time */
            expiration?: string;
        };
        UpdateDataSourceRequest: {
            token?: string;
            dataSources?: (components["schemas"]["DataSource"])[];
        };
        UpdateDataSourceResponse: {
            dataSources?: (components["schemas"]["DataSource"])[];
        };
        UpdateExtensionRequest: {
            token?: string;
            extensions?: (components["schemas"]["Extension"])[];
        };
        UpdateExtensionResponse: {
            extensions?: (components["schemas"]["Extension"])[];
        };
        UpdateMultiRecordResponse: {
            record?: components["schemas"]["Record"];
            records?: (components["schemas"]["Record"])[];
        };
        UpdateNamespaceRequest: {
            token?: string;
            Namespaces?: (components["schemas"]["Namespace"])[];
        };
        UpdateNamespaceResponse: {
            Namespaces?: (components["schemas"]["Namespace"])[];
        };
        UpdateRecordRequest_PropertiesEntry: {
            key?: string;
            value?: components["schemas"]["GoogleProtobufValue"];
        };
        UpdateRecordResponse: {
            record?: components["schemas"]["Record"];
            records?: (components["schemas"]["Record"])[];
        };
        UpdateResourceRequest: {
            token?: string;
            resources?: (components["schemas"]["Resource"])[];
            /** @description See the comments on CreateResourceRequest.doMigration */
            doMigration?: boolean;
            /** @description See the comments on CreateResourceRequest.forceMigration */
            forceMigration?: boolean;
            annotations?: {
                [key: string]: string | undefined;
            };
        };
        UpdateResourceResponse: {
            resources?: (components["schemas"]["Resource"])[];
        };
        UpdateUserResponse: {
            user?: components["schemas"]["User"];
            users?: (components["schemas"]["User"])[];
        };
        User: {
            id?: string;
            username?: string;
            password?: string;
            securityContext?: components["schemas"]["SecurityContext"];
            details?: Record<string, never>;
            signKey?: string;
            auditData?: components["schemas"]["AuditData"];
            /** Format: uint32 */
            version?: number;
        };
        VirtualParams: {
            /**
             * Format: enum
             * @enum {string}
             */
            mode?: "DISCARD" | "ERROR";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

    /**
     * Renew token
     * @description Renew token with existing token
     */
    authenticationRenewToken: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["RenewTokenRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["RenewTokenResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /**
     * Authentication with username/password
     * @description Authentication with username/password and create new token
     */
    authenticationAuthenticate: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["AuthenticationResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** ReadStream */
    Record_ReadStream: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReadStreamRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["Record"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** List */
    Record_List: {
        parameters: {
            query: {
                token?: string;
                limit?: number;
                offset?: number;
                useHistory?: boolean;
                resolveReferences?: (string)[];
            };
            path: {
                namespace: string;
                resource: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["ListRecordResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Create */
    Record_Create: {
        parameters: {
            query: {
                token?: string;
                "record.id"?: string;
                "record.propertiesPacked"?: (components["schemas"]["GoogleProtobufValue"])[];
            };
            path: {
                namespace: string;
                resource: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["CreateRecordResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Apply */
    Record_Apply: {
        parameters: {
            query: {
                token?: string;
                "record.id"?: string;
                "record.propertiesPacked"?: (components["schemas"]["GoogleProtobufValue"])[];
            };
            path: {
                namespace: string;
                resource: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["ApplyRecordResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Update */
    Record_Update: {
        parameters: {
            query: {
                token?: string;
                checkVersion?: boolean;
            };
            path: {
                namespace: string;
                resource: string;
                id: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRecordRequest_PropertiesEntry"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["UpdateRecordResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Delete */
    Record_Delete: {
        parameters: {
            query: {
                token?: string;
            };
            path: {
                namespace: string;
                resource: string;
                id: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["DeleteRecordResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /**
     * UpdateMulti
     * @description Not implemented yet
     */
    Record_UpdateMulti: {
        parameters: {
            query: {
                token?: string;
                "query.not.not.equal.left.property"?: string;
                "query.not.not.equal.left.value"?: components["schemas"]["GoogleProtobufValue"];
                "query.not.not.equal.left.refValue.namespace"?: string;
                "query.not.not.equal.left.refValue.resource"?: string;
                "query.not.not.equal.right.property"?: string;
                "query.not.not.equal.right.value"?: components["schemas"]["GoogleProtobufValue"];
                "query.not.not.equal.right.refValue.namespace"?: string;
                "query.not.not.equal.right.refValue.resource"?: string;
                "query.not.not.regexMatch.pattern"?: string;
                "query.not.regexMatch.pattern"?: string;
            };
            path: {
                namespace: string;
                resource: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["UpdateMultiRecordResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Search */
    Record_Search: {
        parameters: {
            path: {
                namespace: string;
                resource: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchRecordRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["SearchRecordResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Get */
    Record_Get: {
        parameters: {
            query: {
                token?: string;
            };
            path: {
                namespace: string;
                resource: string;
                id: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["GetRecordResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** List */
    DataSource_List: {
        parameters: {
            query: {
                token?: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["ListDataSourceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Update */
    DataSource_Update: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDataSourceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["UpdateDataSourceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Create */
    DataSource_Create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDataSourceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["CreateDataSourceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Delete */
    DataSource_Delete: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteDataSourceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["DeleteDataSourceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Get */
    DataSource_Get: {
        parameters: {
            query: {
                token?: string;
            };
            path: {
                id: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["GetDataSourceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /**
     * PrepareResourceFromEntity
     * @description PrepareResourceFromEntity will return resource from data source based on entity.
     *  It is for database first approach. If you already have an entity/table on data source and your want to create resource based on it, you can call this endpoint to do it.
     */
    DataSource_PrepareResourceFromEntity: {
        parameters: {
            path: {
                /** @description data source id, required, It is for specifying that which database the operation will be performed */
                id: string;
            };
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PrepareResourceFromEntityRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["PrepareResourceFromEntityResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /**
     * Status
     * @description Status will return connection status of data source
     */
    DataSource_Status: {
        parameters: {
            query: {
                token?: string;
            };
            path: {
                id: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["StatusResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /**
     * ListEntities
     * @description List entities will return all entities from data source
     */
    DataSource_ListEntities: {
        parameters: {
            query: {
                token?: string;
            };
            path: {
                id: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["ListEntitiesResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** List */
    Extension_List: {
        parameters: {
            query: {
                token?: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["ListExtensionResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Update */
    Extension_Update: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateExtensionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["UpdateExtensionResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Create */
    Extension_Create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateExtensionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["CreateExtensionResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Delete */
    Extension_Delete: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteExtensionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["DeleteExtensionResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Get */
    Extension_Get: {
        parameters: {
            query: {
                token?: string;
            };
            path: {
                id: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["GetExtensionResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** List */
    Namespace_List: {
        parameters: {
            query: {
                token?: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["ListNamespaceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Update */
    Namespace_Update: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateNamespaceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["UpdateNamespaceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Create */
    Namespace_Create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateNamespaceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["CreateNamespaceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Delete */
    Namespace_Delete: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteNamespaceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["DeleteNamespaceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Get */
    Namespace_Get: {
        parameters: {
            query: {
                token?: string;
            };
            path: {
                id: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["GetNamespaceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** List */
    Resource_List: {
        parameters: {
            query: {
                token?: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["ListResourceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Update */
    Resource_Update: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateResourceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["UpdateResourceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Create */
    Resource_Create: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateResourceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["CreateResourceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Delete */
    Resource_Delete: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteResourceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["DeleteResourceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /**
     * PrepareResourceMigrationPlan
     * @description PrepareResourceMigrationPlan will prepare the migration plan for the resources, it will not do any migration. It will just return the plan for the migration.
     */
    Resource_PrepareResourceMigrationPlan: {
        requestBody: {
            content: {
                "application/json": components["schemas"]["PrepareResourceMigrationPlanRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["PrepareResourceMigrationPlanResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Get */
    Resource_Get: {
        parameters: {
            query: {
                token?: string;
            };
            path: {
                id: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["GetResourceResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** GetByName */
    Resource_GetByName: {
        parameters: {
            query: {
                token?: string;
            };
            path: {
                namespace: string;
                name: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["GetResourceByNameResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** List */
    User_List: {
        parameters: {
            query: {
                token?: string;
                limit?: number;
                offset?: number;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["ListUserResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Update */
    User_Update: {
        parameters: {
            query: {
                token?: string;
                "user.id"?: string;
                "user.username"?: string;
                "user.password"?: string;
                "user.signKey"?: string;
                "user.auditData.createdOn"?: string;
                "user.auditData.updatedOn"?: string;
                "user.auditData.createdBy"?: string;
                "user.auditData.updatedBy"?: string;
                "user.version"?: number;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["UpdateUserResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Create */
    User_Create: {
        parameters: {
            query: {
                token?: string;
                "user.id"?: string;
                "user.username"?: string;
                "user.password"?: string;
                "user.signKey"?: string;
                "user.auditData.createdOn"?: string;
                "user.auditData.updatedOn"?: string;
                "user.auditData.createdBy"?: string;
                "user.auditData.updatedBy"?: string;
                "user.version"?: number;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["CreateUserResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Delete */
    User_Delete: {
        parameters: {
            query: {
                token?: string;
                id?: string;
                ids?: (string)[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["DeleteUserResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /** Get */
    User_Get: {
        parameters: {
            query: {
                token?: string;
            };
            path: {
                id: string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["GetUserResponse"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    /**
     * Watch
     * @description Sends a greeting
     */
    Watch_Watch: {
        parameters: {
            query: {
                token?: string;
                "selector.actions"?: ("CREATE" | "UPDATE" | "DELETE" | "GET" | "LIST" | "OPERATE")[];
                "selector.recordSelector.not.not.equal.left.property"?: string;
                "selector.recordSelector.not.not.equal.left.value"?: components["schemas"]["GoogleProtobufValue"];
                "selector.recordSelector.not.not.equal.left.refValue.namespace"?: string;
                "selector.recordSelector.not.not.equal.left.refValue.resource"?: string;
                "selector.recordSelector.not.not.equal.right.property"?: string;
                "selector.recordSelector.not.not.equal.right.value"?: components["schemas"]["GoogleProtobufValue"];
                "selector.recordSelector.not.not.equal.right.refValue.namespace"?: string;
                "selector.recordSelector.not.not.equal.right.refValue.resource"?: string;
                "selector.recordSelector.not.not.regexMatch.pattern"?: string;
                "selector.recordSelector.not.regexMatch.pattern"?: string;
                "selector.namespaces"?: (string)[];
                "selector.resources"?: (string)[];
                /** @description star means all */
                "selector.ids"?: (string)[];
            };
        };
        responses: {
            /** @description OK */
            200: {
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            /** @description Default error response */
            default: {
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
}
