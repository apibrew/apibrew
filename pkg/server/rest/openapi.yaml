# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: ""
    version: 0.0.1
paths:
    /authentication/token:
        put:
            tags:
                - AuthenticationService
            operationId: AuthenticationService_RenewToken
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RenewTokenRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RenewTokenResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - AuthenticationService
            operationId: AuthenticationService_Authenticate
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AuthenticationRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AuthenticationResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /records/{namespace}/{record.resource}/_bulk:
        put:
            tags:
                - RecordService
            operationId: RecordService_Update
            parameters:
                - name: namespace
                  in: path
                  required: true
                  schema:
                    type: string
                - name: record.resource
                  in: path
                  required: true
                  schema:
                    type: string
                - name: token
                  in: query
                  schema:
                    type: string
                - name: record.id
                  in: query
                  schema:
                    type: string
                - name: record.resource
                  in: query
                  schema:
                    type: string
                - name: record.dataType
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: record.auditData.createdOn.seconds
                  in: query
                  description: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
                  schema:
                    type: integer
                    format: int64
                - name: record.auditData.createdOn.nanos
                  in: query
                  description: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
                  schema:
                    type: integer
                    format: int32
                - name: record.auditData.updatedOn.seconds
                  in: query
                  description: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
                  schema:
                    type: integer
                    format: int64
                - name: record.auditData.updatedOn.nanos
                  in: query
                  description: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
                  schema:
                    type: integer
                    format: int32
                - name: record.auditData.createdBy
                  in: query
                  schema:
                    type: string
                - name: record.auditData.updatedBy
                  in: query
                  schema:
                    type: string
                - name: record.version
                  in: query
                  schema:
                    type: integer
                    format: uint32
                - name: checkVersion
                  in: query
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateRecordResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - RecordService
            operationId: RecordService_Create
            parameters:
                - name: namespace
                  in: path
                  required: true
                  schema:
                    type: string
                - name: record.resource
                  in: path
                  required: true
                  schema:
                    type: string
                - name: token
                  in: query
                  schema:
                    type: string
                - name: record.id
                  in: query
                  schema:
                    type: string
                - name: record.resource
                  in: query
                  schema:
                    type: string
                - name: record.dataType
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: record.auditData.createdOn.seconds
                  in: query
                  description: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
                  schema:
                    type: integer
                    format: int64
                - name: record.auditData.createdOn.nanos
                  in: query
                  description: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
                  schema:
                    type: integer
                    format: int32
                - name: record.auditData.updatedOn.seconds
                  in: query
                  description: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
                  schema:
                    type: integer
                    format: int64
                - name: record.auditData.updatedOn.nanos
                  in: query
                  description: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
                  schema:
                    type: integer
                    format: int32
                - name: record.auditData.createdBy
                  in: query
                  schema:
                    type: string
                - name: record.auditData.updatedBy
                  in: query
                  schema:
                    type: string
                - name: record.version
                  in: query
                  schema:
                    type: integer
                    format: uint32
                - name: ignoreIfExists
                  in: query
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateRecordResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /records/{namespace}/{resource}:
        get:
            tags:
                - RecordService
            operationId: RecordService_List
            parameters:
                - name: namespace
                  in: path
                  required: true
                  schema:
                    type: string
                - name: resource
                  in: path
                  required: true
                  schema:
                    type: string
                - name: token
                  in: query
                  schema:
                    type: string
                - name: limit
                  in: query
                  schema:
                    type: integer
                    format: uint32
                - name: offset
                  in: query
                  schema:
                    type: integer
                    format: uint64
                - name: useHistory
                  in: query
                  schema:
                    type: boolean
                - name: resolveReferences
                  in: query
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListRecordResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /records/{namespace}/{resource}/_bulk:
        put:
            tags:
                - RecordService
            operationId: RecordService_Delete
            parameters:
                - name: namespace
                  in: path
                  required: true
                  schema:
                    type: string
                - name: resource
                  in: path
                  required: true
                  schema:
                    type: string
                - name: token
                  in: query
                  schema:
                    type: string
                - name: id
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: ids
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteRecordResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /records/{namespace}/{resource}/_search:
        post:
            tags:
                - RecordService
            operationId: RecordService_Search
            parameters:
                - name: namespace
                  in: path
                  required: true
                  schema:
                    type: string
                - name: resource
                  in: path
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchRecordRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchRecordResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /records/{namespace}/{resource}/{id}:
        get:
            tags:
                - RecordService
            operationId: RecordService_Get
            parameters:
                - name: namespace
                  in: path
                  required: true
                  schema:
                    type: string
                - name: resource
                  in: path
                  required: true
                  schema:
                    type: string
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                - name: token
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetRecordResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /users:
        get:
            tags:
                - UserService
            operationId: UserService_List
            parameters:
                - name: token
                  in: query
                  schema:
                    type: string
                - name: limit
                  in: query
                  schema:
                    type: integer
                    format: uint32
                - name: offset
                  in: query
                  schema:
                    type: integer
                    format: uint64
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListUserResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /users/{id}:
        get:
            tags:
                - UserService
            operationId: UserService_Get
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
                - name: token
                  in: query
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/GetUserResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /uses/_bulk:
        put:
            tags:
                - UserService
            operationId: UserService_Update
            parameters:
                - name: token
                  in: query
                  schema:
                    type: string
                - name: user.id
                  in: query
                  schema:
                    type: string
                - name: user.type
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: user.username
                  in: query
                  schema:
                    type: string
                - name: user.password
                  in: query
                  schema:
                    type: string
                - name: user.scopes
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: user.auditData.createdOn.seconds
                  in: query
                  description: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
                  schema:
                    type: integer
                    format: int64
                - name: user.auditData.createdOn.nanos
                  in: query
                  description: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
                  schema:
                    type: integer
                    format: int32
                - name: user.auditData.updatedOn.seconds
                  in: query
                  description: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
                  schema:
                    type: integer
                    format: int64
                - name: user.auditData.updatedOn.nanos
                  in: query
                  description: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
                  schema:
                    type: integer
                    format: int32
                - name: user.auditData.createdBy
                  in: query
                  schema:
                    type: string
                - name: user.auditData.updatedBy
                  in: query
                  schema:
                    type: string
                - name: user.version
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateUserResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - UserService
            operationId: UserService_Create
            parameters:
                - name: token
                  in: query
                  schema:
                    type: string
                - name: user.id
                  in: query
                  schema:
                    type: string
                - name: user.type
                  in: query
                  schema:
                    type: integer
                    format: enum
                - name: user.username
                  in: query
                  schema:
                    type: string
                - name: user.password
                  in: query
                  schema:
                    type: string
                - name: user.scopes
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
                - name: user.auditData.createdOn.seconds
                  in: query
                  description: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
                  schema:
                    type: integer
                    format: int64
                - name: user.auditData.createdOn.nanos
                  in: query
                  description: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
                  schema:
                    type: integer
                    format: int32
                - name: user.auditData.updatedOn.seconds
                  in: query
                  description: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
                  schema:
                    type: integer
                    format: int64
                - name: user.auditData.updatedOn.nanos
                  in: query
                  description: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.
                  schema:
                    type: integer
                    format: int32
                - name: user.auditData.createdBy
                  in: query
                  schema:
                    type: string
                - name: user.auditData.updatedBy
                  in: query
                  schema:
                    type: string
                - name: user.version
                  in: query
                  schema:
                    type: integer
                    format: uint32
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateUserResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - UserService
            operationId: UserService_Delete
            parameters:
                - name: token
                  in: query
                  schema:
                    type: string
                - name: id
                  in: query
                  schema:
                    type: string
                - name: ids
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteUserResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        AuditData:
            type: object
            properties:
                createdOn:
                    type: string
                    format: date-time
                updatedOn:
                    type: string
                    format: date-time
                createdBy:
                    type: string
                updatedBy:
                    type: string
        AuthenticationRequest:
            type: object
            properties:
                username:
                    type: string
                password:
                    type: string
                term:
                    type: integer
                    format: enum
        AuthenticationResponse:
            type: object
            properties:
                token:
                    $ref: '#/components/schemas/Token'
        BooleanExpression:
            type: object
            properties:
                and:
                    $ref: '#/components/schemas/CompoundBooleanExpression'
                or:
                    $ref: '#/components/schemas/CompoundBooleanExpression'
                not:
                    $ref: '#/components/schemas/BooleanExpression'
                equal:
                    $ref: '#/components/schemas/PairExpression'
                lessThan:
                    $ref: '#/components/schemas/PairExpression'
                greaterThan:
                    $ref: '#/components/schemas/PairExpression'
                lessThanOrEqual:
                    $ref: '#/components/schemas/PairExpression'
                greaterThanOrEqual:
                    $ref: '#/components/schemas/PairExpression'
                isNull:
                    $ref: '#/components/schemas/Expression'
                regexMatch:
                    $ref: '#/components/schemas/RegexMatchExpression'
        CompoundBooleanExpression:
            type: object
            properties:
                expressions:
                    type: array
                    items:
                        $ref: '#/components/schemas/BooleanExpression'
        CreateRecordResponse:
            type: object
            properties:
                record:
                    $ref: '#/components/schemas/Record'
                records:
                    type: array
                    items:
                        $ref: '#/components/schemas/Record'
                inserted:
                    type: array
                    items:
                        type: boolean
        CreateUserResponse:
            type: object
            properties:
                user:
                    $ref: '#/components/schemas/User'
                users:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
        DeleteRecordResponse:
            type: object
            properties: {}
        DeleteUserResponse:
            type: object
            properties: {}
        Expression:
            type: object
            properties:
                property:
                    type: string
                functionCall:
                    $ref: '#/components/schemas/FunctionCall'
                value:
                    $ref: '#/components/schemas/GoogleProtobufValue'
        FunctionCall:
            type: object
            properties:
                package:
                    type: string
                name:
                    type: string
                arguments:
                    type: array
                    items:
                        $ref: '#/components/schemas/Expression'
        GetRecordResponse:
            type: object
            properties:
                record:
                    $ref: '#/components/schemas/Record'
        GetUserResponse:
            type: object
            properties:
                user:
                    $ref: '#/components/schemas/User'
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        GoogleProtobufValue:
            description: Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
        ListRecordResponse:
            type: object
            properties:
                total:
                    type: integer
                    format: uint32
                content:
                    type: array
                    items:
                        $ref: '#/components/schemas/Record'
        ListUserResponse:
            type: object
            properties:
                content:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
        PairExpression:
            type: object
            properties:
                left:
                    $ref: '#/components/schemas/Expression'
                right:
                    $ref: '#/components/schemas/Expression'
        Record:
            type: object
            properties:
                id:
                    type: string
                resource:
                    type: string
                dataType:
                    type: integer
                    format: enum
                properties:
                    type: object
                references:
                    type: object
                auditData:
                    $ref: '#/components/schemas/AuditData'
                version:
                    type: integer
                    format: uint32
        RegexMatchExpression:
            type: object
            properties:
                pattern:
                    type: string
                expression:
                    $ref: '#/components/schemas/Expression'
        RenewTokenRequest:
            type: object
            properties:
                token:
                    type: string
                term:
                    type: integer
                    format: enum
        RenewTokenResponse:
            type: object
            properties:
                token:
                    $ref: '#/components/schemas/Token'
        SearchRecordRequest:
            type: object
            properties:
                token:
                    type: string
                namespace:
                    type: string
                resource:
                    type: string
                query:
                    $ref: '#/components/schemas/BooleanExpression'
                limit:
                    type: integer
                    format: uint32
                offset:
                    type: integer
                    format: uint64
                useHistory:
                    type: boolean
                resolveReferences:
                    type: boolean
        SearchRecordResponse:
            type: object
            properties:
                total:
                    type: integer
                    format: uint32
                content:
                    type: array
                    items:
                        $ref: '#/components/schemas/Record'
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        Token:
            type: object
            properties:
                term:
                    type: integer
                    format: enum
                content:
                    type: string
                expiration:
                    type: string
                    format: date-time
        UpdateRecordResponse:
            type: object
            properties:
                record:
                    $ref: '#/components/schemas/Record'
                records:
                    type: array
                    items:
                        $ref: '#/components/schemas/Record'
        UpdateUserResponse:
            type: object
            properties:
                user:
                    $ref: '#/components/schemas/User'
                users:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
        User:
            type: object
            properties:
                id:
                    type: string
                type:
                    type: integer
                    format: enum
                username:
                    type: string
                password:
                    type: string
                scopes:
                    type: array
                    items:
                        type: string
                details:
                    type: object
                auditData:
                    $ref: '#/components/schemas/AuditData'
                version:
                    type: integer
                    format: uint32
tags:
    - name: AuthenticationService
    - name: RecordService
    - name: UserService
