// Code generated by apbr generate. DO NOT EDIT.
// versions:
// 	apbr generate v1.2

//go:build !codeanalysis

package testing

import (
	"github.com/apibrew/apibrew/pkg/abs"
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
	"google.golang.org/protobuf/types/known/structpb"
)

import "github.com/google/uuid"
import "github.com/apibrew/apibrew/pkg/formats/unstructured"

type TestCaseMapper struct {
}

func NewTestCaseMapper() *TestCaseMapper {
	return &TestCaseMapper{}
}

var TestCaseMapperInstance = NewTestCaseMapper()

func (m *TestCaseMapper) New() *TestCase {
	return &TestCase{}
}

func (m *TestCaseMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "testing",
		Name:      "TestCase",
	}
}

func (m *TestCaseMapper) ToRecord(testCase *TestCase) *model.Record {
	var rec = &model.Record{}
	rec.Properties = m.ToProperties(testCase)
	return rec
}

func (m *TestCaseMapper) FromRecord(record *model.Record) *TestCase {
	return m.FromProperties(record.Properties)
}

func (m *TestCaseMapper) ToProperties(testCase *TestCase) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Id := testCase.Id

	if var_Id != nil {
		var var_Id_mapped *structpb.Value

		var var_Id_err error
		var_Id_mapped, var_Id_err = types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(*var_Id)
		if var_Id_err != nil {
			panic(var_Id_err)
		}
		properties["id"] = var_Id_mapped
	}

	var_Assertions := testCase.Assertions

	if var_Assertions != nil {
		var var_Assertions_mapped *structpb.Value

		var var_Assertions_l []*structpb.Value
		for _, value := range var_Assertions {

			var_5x := value
			var var_5x_mapped *structpb.Value

			var_5x_mapped = structpb.NewStructValue(&structpb.Struct{Fields: TestCaseTestCaseAssertionMapperInstance.ToProperties(&var_5x)})

			var_Assertions_l = append(var_Assertions_l, var_5x_mapped)
		}
		var_Assertions_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_Assertions_l})
		properties["assertions"] = var_Assertions_mapped
	}

	var_AutoRun := testCase.AutoRun

	var var_AutoRun_mapped *structpb.Value

	var var_AutoRun_err error
	var_AutoRun_mapped, var_AutoRun_err = types.ByResourcePropertyType(model.ResourceProperty_BOOL).Pack(var_AutoRun)
	if var_AutoRun_err != nil {
		panic(var_AutoRun_err)
	}
	properties["autoRun"] = var_AutoRun_mapped

	var_Name := testCase.Name

	var var_Name_mapped *structpb.Value

	var var_Name_err error
	var_Name_mapped, var_Name_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Name)
	if var_Name_err != nil {
		panic(var_Name_err)
	}
	properties["name"] = var_Name_mapped

	var_Description := testCase.Description

	if var_Description != nil {
		var var_Description_mapped *structpb.Value

		var var_Description_err error
		var_Description_mapped, var_Description_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_Description)
		if var_Description_err != nil {
			panic(var_Description_err)
		}
		properties["description"] = var_Description_mapped
	}

	var_Annotations := testCase.Annotations

	if var_Annotations != nil {
		var var_Annotations_mapped *structpb.Value

		var var_Annotations_st *structpb.Struct = new(structpb.Struct)
		var_Annotations_st.Fields = make(map[string]*structpb.Value)
		for key, value := range var_Annotations {

			var_1x := value
			var var_1x_mapped *structpb.Value

			var var_1x_err error
			var_1x_mapped, var_1x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_1x)
			if var_1x_err != nil {
				panic(var_1x_err)
			}

			var_Annotations_st.Fields[key] = var_1x_mapped
		}
		var_Annotations_mapped = structpb.NewStructValue(var_Annotations_st)
		properties["annotations"] = var_Annotations_mapped
	}

	var_Steps := testCase.Steps

	if var_Steps != nil {
		var var_Steps_mapped *structpb.Value

		var var_Steps_l []*structpb.Value
		for _, value := range var_Steps {

			var_5x := value
			var var_5x_mapped *structpb.Value

			var_5x_mapped = structpb.NewStructValue(&structpb.Struct{Fields: TestCaseTestCaseStepMapperInstance.ToProperties(&var_5x)})

			var_Steps_l = append(var_Steps_l, var_5x_mapped)
		}
		var_Steps_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_Steps_l})
		properties["steps"] = var_Steps_mapped
	}

	var_Version := testCase.Version

	var var_Version_mapped *structpb.Value

	var var_Version_err error
	var_Version_mapped, var_Version_err = types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(var_Version)
	if var_Version_err != nil {
		panic(var_Version_err)
	}
	properties["version"] = var_Version_mapped
	return properties
}

func (m *TestCaseMapper) FromProperties(properties map[string]*structpb.Value) *TestCase {
	var s = m.New()
	if properties["id"] != nil && properties["id"].AsInterface() != nil {

		var_Id := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_Id)

		if err != nil {
			panic(err)
		}

		var_Id_mapped := new(uuid.UUID)
		*var_Id_mapped = val.(uuid.UUID)

		s.Id = var_Id_mapped
	}
	if properties["assertions"] != nil && properties["assertions"].AsInterface() != nil {

		var_Assertions := properties["assertions"]
		var_Assertions_mapped := []TestCaseTestCaseAssertion{}
		for _, v := range var_Assertions.GetListValue().Values {

			var_4x := v
			var mappedValue = TestCaseTestCaseAssertionMapperInstance.FromProperties(var_4x.GetStructValue().Fields)

			var_4x_mapped := *mappedValue

			var_Assertions_mapped = append(var_Assertions_mapped, var_4x_mapped)
		}

		s.Assertions = var_Assertions_mapped
	}
	if properties["autoRun"] != nil && properties["autoRun"].AsInterface() != nil {

		var_AutoRun := properties["autoRun"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_BOOL).UnPack(var_AutoRun)

		if err != nil {
			panic(err)
		}

		var_AutoRun_mapped := val.(bool)

		s.AutoRun = var_AutoRun_mapped
	}
	if properties["name"] != nil && properties["name"].AsInterface() != nil {

		var_Name := properties["name"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Name)

		if err != nil {
			panic(err)
		}

		var_Name_mapped := val.(string)

		s.Name = var_Name_mapped
	}
	if properties["description"] != nil && properties["description"].AsInterface() != nil {

		var_Description := properties["description"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Description)

		if err != nil {
			panic(err)
		}

		var_Description_mapped := new(string)
		*var_Description_mapped = val.(string)

		s.Description = var_Description_mapped
	}
	if properties["annotations"] != nil && properties["annotations"].AsInterface() != nil {

		var_Annotations := properties["annotations"]
		var_Annotations_mapped := make(map[string]string)
		for k, v := range var_Annotations.GetStructValue().Fields {

			var_3x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_3x)

			if err != nil {
				panic(err)
			}

			var_3x_mapped := val.(string)

			var_Annotations_mapped[k] = var_3x_mapped
		}

		s.Annotations = var_Annotations_mapped
	}
	if properties["steps"] != nil && properties["steps"].AsInterface() != nil {

		var_Steps := properties["steps"]
		var_Steps_mapped := []TestCaseTestCaseStep{}
		for _, v := range var_Steps.GetListValue().Values {

			var_4x := v
			var mappedValue = TestCaseTestCaseStepMapperInstance.FromProperties(var_4x.GetStructValue().Fields)

			var_4x_mapped := *mappedValue

			var_Steps_mapped = append(var_Steps_mapped, var_4x_mapped)
		}

		s.Steps = var_Steps_mapped
	}
	if properties["version"] != nil && properties["version"].AsInterface() != nil {

		var_Version := properties["version"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Version)

		if err != nil {
			panic(err)
		}

		var_Version_mapped := val.(int32)

		s.Version = var_Version_mapped
	}
	return s
}

type TestCaseTestCaseStepMapper struct {
}

func NewTestCaseTestCaseStepMapper() *TestCaseTestCaseStepMapper {
	return &TestCaseTestCaseStepMapper{}
}

var TestCaseTestCaseStepMapperInstance = NewTestCaseTestCaseStepMapper()

func (m *TestCaseTestCaseStepMapper) New() *TestCaseTestCaseStep {
	return &TestCaseTestCaseStep{}
}

func (m *TestCaseTestCaseStepMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "testing",
		Name:      "TestCase",
	}
}

func (m *TestCaseTestCaseStepMapper) ToProperties(testCaseTestCaseStep *TestCaseTestCaseStep) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Name := testCaseTestCaseStep.Name

	if var_Name != nil {
		var var_Name_mapped *structpb.Value

		var var_Name_err error
		var_Name_mapped, var_Name_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_Name)
		if var_Name_err != nil {
			panic(var_Name_err)
		}
		properties["name"] = var_Name_mapped
	}

	var_Operation := testCaseTestCaseStep.Operation

	var var_Operation_mapped *structpb.Value

	var var_Operation_err error
	var_Operation_mapped, var_Operation_err = types.ByResourcePropertyType(model.ResourceProperty_ENUM).Pack(string(var_Operation))
	if var_Operation_err != nil {
		panic(var_Operation_err)
	}
	properties["operation"] = var_Operation_mapped

	var_Payload := testCaseTestCaseStep.Payload

	if var_Payload != nil {
		var var_Payload_mapped *structpb.Value

		var var_Payload_err error
		var_Payload_mapped, var_Payload_err = types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_Payload)
		if var_Payload_err != nil {
			panic(var_Payload_err)
		}
		properties["payload"] = var_Payload_mapped
	}
	return properties
}

func (m *TestCaseTestCaseStepMapper) FromProperties(properties map[string]*structpb.Value) *TestCaseTestCaseStep {
	var s = m.New()
	if properties["name"] != nil && properties["name"].AsInterface() != nil {

		var_Name := properties["name"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Name)

		if err != nil {
			panic(err)
		}

		var_Name_mapped := new(string)
		*var_Name_mapped = val.(string)

		s.Name = var_Name_mapped
	}
	if properties["operation"] != nil && properties["operation"].AsInterface() != nil {

		var_Operation := properties["operation"]
		var_Operation_mapped := (TestCaseOperation)(var_Operation.GetStringValue())

		s.Operation = var_Operation_mapped
	}
	if properties["payload"] != nil && properties["payload"].AsInterface() != nil {

		var_Payload := properties["payload"]
		var_Payload_mapped := new(interface{})
		*var_Payload_mapped = unstructured.FromValue(var_Payload)

		s.Payload = var_Payload_mapped
	}
	return s
}

type TestCaseTestCaseAssertionMapper struct {
}

func NewTestCaseTestCaseAssertionMapper() *TestCaseTestCaseAssertionMapper {
	return &TestCaseTestCaseAssertionMapper{}
}

var TestCaseTestCaseAssertionMapperInstance = NewTestCaseTestCaseAssertionMapper()

func (m *TestCaseTestCaseAssertionMapper) New() *TestCaseTestCaseAssertion {
	return &TestCaseTestCaseAssertion{}
}

func (m *TestCaseTestCaseAssertionMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "testing",
		Name:      "TestCase",
	}
}

func (m *TestCaseTestCaseAssertionMapper) ToProperties(testCaseTestCaseAssertion *TestCaseTestCaseAssertion) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_AssertionType := testCaseTestCaseAssertion.AssertionType

	var var_AssertionType_mapped *structpb.Value

	var var_AssertionType_err error
	var_AssertionType_mapped, var_AssertionType_err = types.ByResourcePropertyType(model.ResourceProperty_ENUM).Pack(string(var_AssertionType))
	if var_AssertionType_err != nil {
		panic(var_AssertionType_err)
	}
	properties["assertionType"] = var_AssertionType_mapped

	var_Left := testCaseTestCaseAssertion.Left

	if var_Left != nil {
		var var_Left_mapped *structpb.Value

		var var_Left_err error
		var_Left_mapped, var_Left_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_Left)
		if var_Left_err != nil {
			panic(var_Left_err)
		}
		properties["left"] = var_Left_mapped
	}

	var_Right := testCaseTestCaseAssertion.Right

	if var_Right != nil {
		var var_Right_mapped *structpb.Value

		var var_Right_err error
		var_Right_mapped, var_Right_err = types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_Right)
		if var_Right_err != nil {
			panic(var_Right_err)
		}
		properties["right"] = var_Right_mapped
	}

	var_Script := testCaseTestCaseAssertion.Script

	if var_Script != nil {
		var var_Script_mapped *structpb.Value

		var var_Script_err error
		var_Script_mapped, var_Script_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_Script)
		if var_Script_err != nil {
			panic(var_Script_err)
		}
		properties["script"] = var_Script_mapped
	}

	var_ErrorCode := testCaseTestCaseAssertion.ErrorCode

	if var_ErrorCode != nil {
		var var_ErrorCode_mapped *structpb.Value

		var var_ErrorCode_err error
		var_ErrorCode_mapped, var_ErrorCode_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_ErrorCode)
		if var_ErrorCode_err != nil {
			panic(var_ErrorCode_err)
		}
		properties["errorCode"] = var_ErrorCode_mapped
	}

	var_Name := testCaseTestCaseAssertion.Name

	if var_Name != nil {
		var var_Name_mapped *structpb.Value

		var var_Name_err error
		var_Name_mapped, var_Name_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_Name)
		if var_Name_err != nil {
			panic(var_Name_err)
		}
		properties["name"] = var_Name_mapped
	}
	return properties
}

func (m *TestCaseTestCaseAssertionMapper) FromProperties(properties map[string]*structpb.Value) *TestCaseTestCaseAssertion {
	var s = m.New()
	if properties["assertionType"] != nil && properties["assertionType"].AsInterface() != nil {

		var_AssertionType := properties["assertionType"]
		var_AssertionType_mapped := (TestCaseAssertionType)(var_AssertionType.GetStringValue())

		s.AssertionType = var_AssertionType_mapped
	}
	if properties["left"] != nil && properties["left"].AsInterface() != nil {

		var_Left := properties["left"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Left)

		if err != nil {
			panic(err)
		}

		var_Left_mapped := new(string)
		*var_Left_mapped = val.(string)

		s.Left = var_Left_mapped
	}
	if properties["right"] != nil && properties["right"].AsInterface() != nil {

		var_Right := properties["right"]
		var_Right_mapped := new(interface{})
		*var_Right_mapped = unstructured.FromValue(var_Right)

		s.Right = var_Right_mapped
	}
	if properties["script"] != nil && properties["script"].AsInterface() != nil {

		var_Script := properties["script"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Script)

		if err != nil {
			panic(err)
		}

		var_Script_mapped := new(string)
		*var_Script_mapped = val.(string)

		s.Script = var_Script_mapped
	}
	if properties["errorCode"] != nil && properties["errorCode"].AsInterface() != nil {

		var_ErrorCode := properties["errorCode"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_ErrorCode)

		if err != nil {
			panic(err)
		}

		var_ErrorCode_mapped := new(string)
		*var_ErrorCode_mapped = val.(string)

		s.ErrorCode = var_ErrorCode_mapped
	}
	if properties["name"] != nil && properties["name"].AsInterface() != nil {

		var_Name := properties["name"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Name)

		if err != nil {
			panic(err)
		}

		var_Name_mapped := new(string)
		*var_Name_mapped = val.(string)

		s.Name = var_Name_mapped
	}
	return s
}
