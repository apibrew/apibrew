// Code generated by apbr generate. DO NOT EDIT.
// versions:
// 	apbr generate v1.2

//go:build !codeanalysis

package testing

import "github.com/google/uuid"

type TestCase struct {
	Id          *uuid.UUID                  `json:"id,omitempty"`
	Assertions  []TestCaseTestCaseAssertion `json:"assertions,omitempty"`
	AutoRun     bool                        `json:"autoRun,omitempty"`
	Name        string                      `json:"name,omitempty"`
	Description *string                     `json:"description,omitempty"`
	Annotations map[string]string           `json:"annotations,omitempty"`
	Steps       []TestCaseTestCaseStep      `json:"steps,omitempty"`
	Version     int32                       `json:"version,omitempty"`
}

func (s *TestCase) GetId() *uuid.UUID {
	return s.Id
}
func (s *TestCase) GetAssertions() []TestCaseTestCaseAssertion {
	return s.Assertions
}
func (s *TestCase) GetAutoRun() bool {
	return s.AutoRun
}
func (s *TestCase) GetName() string {
	return s.Name
}
func (s *TestCase) GetDescription() *string {
	return s.Description
}
func (s *TestCase) GetAnnotations() map[string]string {
	return s.Annotations
}
func (s *TestCase) GetSteps() []TestCaseTestCaseStep {
	return s.Steps
}
func (s *TestCase) GetVersion() int32 {
	return s.Version
}

type TestCaseTestCaseStep struct {
	Name      *string           `json:"name,omitempty"`
	Operation TestCaseOperation `json:"operation,omitempty"`
	Payload   interface{}       `json:"payload,omitempty"`
}

func (s *TestCaseTestCaseStep) GetName() *string {
	return s.Name
}
func (s *TestCaseTestCaseStep) GetOperation() TestCaseOperation {
	return s.Operation
}
func (s *TestCaseTestCaseStep) GetPayload() interface{} {
	return s.Payload
}

type TestCaseTestCaseAssertion struct {
	AssertionType TestCaseAssertionType `json:"assertionType,omitempty"`
	Left          *string               `json:"left,omitempty"`
	Right         interface{}           `json:"right,omitempty"`
	Script        *string               `json:"script,omitempty"`
	ErrorCode     *string               `json:"errorCode,omitempty"`
	Name          *string               `json:"name,omitempty"`
}

func (s *TestCaseTestCaseAssertion) GetAssertionType() TestCaseAssertionType {
	return s.AssertionType
}
func (s *TestCaseTestCaseAssertion) GetLeft() *string {
	return s.Left
}
func (s *TestCaseTestCaseAssertion) GetRight() interface{} {
	return s.Right
}
func (s *TestCaseTestCaseAssertion) GetScript() *string {
	return s.Script
}
func (s *TestCaseTestCaseAssertion) GetErrorCode() *string {
	return s.ErrorCode
}
func (s *TestCaseTestCaseAssertion) GetName() *string {
	return s.Name
}

type TestCaseOperation string

const (
	TestCaseOperation_CREATE TestCaseOperation = "CREATE"
	TestCaseOperation_UPDATE TestCaseOperation = "UPDATE"
	TestCaseOperation_APPLY  TestCaseOperation = "APPLY"
	TestCaseOperation_DELETE TestCaseOperation = "DELETE"
	TestCaseOperation_GET    TestCaseOperation = "GET"
	TestCaseOperation_LIST   TestCaseOperation = "LIST"
	TestCaseOperation_NANO   TestCaseOperation = "NANO"
)

type TestCaseAssertionType string

const (
	TestCaseAssertionType_EQUAL       TestCaseAssertionType = "EQUAL"
	TestCaseAssertionType_NOTEQUAL    TestCaseAssertionType = "NOT_EQUAL"
	TestCaseAssertionType_EXPECTERROR TestCaseAssertionType = "EXPECT_ERROR"
	TestCaseAssertionType_NANO        TestCaseAssertionType = "NANO"
)
