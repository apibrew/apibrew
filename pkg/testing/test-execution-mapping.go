// Code generated by apbr generate. DO NOT EDIT.
// versions:
// 	apbr generate v1.2

//go:build !codeanalysis

package testing

import (
	"github.com/apibrew/apibrew/pkg/abs"
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
	"google.golang.org/protobuf/types/known/structpb"
)

import "github.com/google/uuid"

type TestExecutionMapper struct {
}

func NewTestExecutionMapper() *TestExecutionMapper {
	return &TestExecutionMapper{}
}

var TestExecutionMapperInstance = NewTestExecutionMapper()

func (m *TestExecutionMapper) New() *TestExecution {
	return &TestExecution{}
}

func (m *TestExecutionMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "testing",
		Name:      "TestExecution",
	}
}

func (m *TestExecutionMapper) ToRecord(testExecution *TestExecution) *model.Record {
	var rec = &model.Record{}
	rec.Properties = m.ToProperties(testExecution)
	return rec
}

func (m *TestExecutionMapper) FromRecord(record *model.Record) *TestExecution {
	return m.FromProperties(record.Properties)
}

func (m *TestExecutionMapper) ToProperties(testExecution *TestExecution) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Id := testExecution.Id

	if var_Id != nil {
		var var_Id_mapped *structpb.Value

		var var_Id_err error
		var_Id_mapped, var_Id_err = types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(*var_Id)
		if var_Id_err != nil {
			panic(var_Id_err)
		}
		properties["id"] = var_Id_mapped
	}

	var_Name := testExecution.Name

	var var_Name_mapped *structpb.Value

	var var_Name_err error
	var_Name_mapped, var_Name_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Name)
	if var_Name_err != nil {
		panic(var_Name_err)
	}
	properties["name"] = var_Name_mapped

	var_TestCase := testExecution.TestCase

	if var_TestCase != nil {
		var var_TestCase_mapped *structpb.Value

		var_TestCase_mapped = structpb.NewStructValue(&structpb.Struct{Fields: TestCaseMapperInstance.ToProperties(var_TestCase)})
		properties["testCase"] = var_TestCase_mapped
	}

	var_Result := testExecution.Result

	if var_Result != nil {
		var var_Result_mapped *structpb.Value

		var var_Result_err error
		var_Result_mapped, var_Result_err = types.ByResourcePropertyType(model.ResourceProperty_ENUM).Pack(string(*var_Result))
		if var_Result_err != nil {
			panic(var_Result_err)
		}
		properties["result"] = var_Result_mapped
	}

	var_Logs := testExecution.Logs

	if var_Logs != nil {
		var var_Logs_mapped *structpb.Value

		var var_Logs_err error
		var_Logs_mapped, var_Logs_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_Logs)
		if var_Logs_err != nil {
			panic(var_Logs_err)
		}
		properties["logs"] = var_Logs_mapped
	}

	var_Stored := testExecution.Stored

	var var_Stored_mapped *structpb.Value

	var var_Stored_err error
	var_Stored_mapped, var_Stored_err = types.ByResourcePropertyType(model.ResourceProperty_BOOL).Pack(var_Stored)
	if var_Stored_err != nil {
		panic(var_Stored_err)
	}
	properties["stored"] = var_Stored_mapped

	var_Version := testExecution.Version

	var var_Version_mapped *structpb.Value

	var var_Version_err error
	var_Version_mapped, var_Version_err = types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(var_Version)
	if var_Version_err != nil {
		panic(var_Version_err)
	}
	properties["version"] = var_Version_mapped
	return properties
}

func (m *TestExecutionMapper) FromProperties(properties map[string]*structpb.Value) *TestExecution {
	var s = m.New()
	if properties["id"] != nil && properties["id"].AsInterface() != nil {

		var_Id := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_Id)

		if err != nil {
			panic(err)
		}

		var_Id_mapped := new(uuid.UUID)
		*var_Id_mapped = val.(uuid.UUID)

		s.Id = var_Id_mapped
	}
	if properties["name"] != nil && properties["name"].AsInterface() != nil {

		var_Name := properties["name"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Name)

		if err != nil {
			panic(err)
		}

		var_Name_mapped := val.(string)

		s.Name = var_Name_mapped
	}
	if properties["testCase"] != nil && properties["testCase"].AsInterface() != nil {

		var_TestCase := properties["testCase"]
		var_TestCase_mapped := TestCaseMapperInstance.FromProperties(var_TestCase.GetStructValue().Fields)

		s.TestCase = var_TestCase_mapped
	}
	if properties["result"] != nil && properties["result"].AsInterface() != nil {

		var_Result := properties["result"]
		var_Result_mapped := new(TestExecutionResult)
		*var_Result_mapped = (TestExecutionResult)(var_Result.GetStringValue())

		s.Result = var_Result_mapped
	}
	if properties["logs"] != nil && properties["logs"].AsInterface() != nil {

		var_Logs := properties["logs"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Logs)

		if err != nil {
			panic(err)
		}

		var_Logs_mapped := new(string)
		*var_Logs_mapped = val.(string)

		s.Logs = var_Logs_mapped
	}
	if properties["stored"] != nil && properties["stored"].AsInterface() != nil {

		var_Stored := properties["stored"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_BOOL).UnPack(var_Stored)

		if err != nil {
			panic(err)
		}

		var_Stored_mapped := val.(bool)

		s.Stored = var_Stored_mapped
	}
	if properties["version"] != nil && properties["version"].AsInterface() != nil {

		var_Version := properties["version"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Version)

		if err != nil {
			panic(err)
		}

		var_Version_mapped := val.(int32)

		s.Version = var_Version_mapped
	}
	return s
}
