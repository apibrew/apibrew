// AUTOGENERATED FILE

//go:build !codeanalysis

package resource_model

import "github.com/google/uuid"
import "time"

type Extension struct {
	Id          *uuid.UUID        `json:"id_,omitempty"`
	Version     int32             `json:"version_,omitempty"`
	CreatedBy   *string           `json:"createdBy_,omitempty"`
	UpdatedBy   *string           `json:"updatedBy_,omitempty"`
	CreatedOn   *time.Time        `json:"createdOn_,omitempty"`
	UpdatedOn   *time.Time        `json:"updatedOn_,omitempty"`
	Name        string            `json:"name_,omitempty"`
	Description *string           `json:"description_,omitempty"`
	Selector    *EventSelector    `json:"selector_,omitempty"`
	Order       int32             `json:"order_,omitempty"`
	Finalizes   bool              `json:"finalizes_,omitempty"`
	Sync        bool              `json:"sync_,omitempty"`
	Responds    bool              `json:"responds_,omitempty"`
	Call        ExternalCall      `json:"call_,omitempty"`
	Annotations map[string]string `json:"annotations_,omitempty"`
}

func (s *Extension) GetId() *uuid.UUID {
	return s.Id
}
func (s *Extension) GetVersion() int32 {
	return s.Version
}
func (s *Extension) GetCreatedBy() *string {
	return s.CreatedBy
}
func (s *Extension) GetUpdatedBy() *string {
	return s.UpdatedBy
}
func (s *Extension) GetCreatedOn() *time.Time {
	return s.CreatedOn
}
func (s *Extension) GetUpdatedOn() *time.Time {
	return s.UpdatedOn
}
func (s *Extension) GetName() string {
	return s.Name
}
func (s *Extension) GetDescription() *string {
	return s.Description
}
func (s *Extension) GetSelector() *EventSelector {
	return s.Selector
}
func (s *Extension) GetOrder() int32 {
	return s.Order
}
func (s *Extension) GetFinalizes() bool {
	return s.Finalizes
}
func (s *Extension) GetSync() bool {
	return s.Sync
}
func (s *Extension) GetResponds() bool {
	return s.Responds
}
func (s *Extension) GetCall() ExternalCall {
	return s.Call
}
func (s *Extension) GetAnnotations() map[string]string {
	return s.Annotations
}

type ExtensionBooleanExpression struct {
	And                []ExtensionBooleanExpression   `json:"and_,omitempty"`
	Or                 []ExtensionBooleanExpression   `json:"or_,omitempty"`
	Not                *ExtensionBooleanExpression    `json:"not_,omitempty"`
	Equal              *ExtensionPairExpression       `json:"equal_,omitempty"`
	LessThan           *ExtensionPairExpression       `json:"lessThan_,omitempty"`
	GreaterThan        *ExtensionPairExpression       `json:"greaterThan_,omitempty"`
	LessThanOrEqual    *ExtensionPairExpression       `json:"lessThanOrEqual_,omitempty"`
	GreaterThanOrEqual *ExtensionPairExpression       `json:"greaterThanOrEqual_,omitempty"`
	In                 *ExtensionPairExpression       `json:"in_,omitempty"`
	IsNull             *ExtensionExpression           `json:"isNull_,omitempty"`
	RegexMatch         *ExtensionRegexMatchExpression `json:"regexMatch_,omitempty"`
}

func (s *ExtensionBooleanExpression) GetAnd() []ExtensionBooleanExpression {
	return s.And
}
func (s *ExtensionBooleanExpression) GetOr() []ExtensionBooleanExpression {
	return s.Or
}
func (s *ExtensionBooleanExpression) GetNot() *ExtensionBooleanExpression {
	return s.Not
}
func (s *ExtensionBooleanExpression) GetEqual() *ExtensionPairExpression {
	return s.Equal
}
func (s *ExtensionBooleanExpression) GetLessThan() *ExtensionPairExpression {
	return s.LessThan
}
func (s *ExtensionBooleanExpression) GetGreaterThan() *ExtensionPairExpression {
	return s.GreaterThan
}
func (s *ExtensionBooleanExpression) GetLessThanOrEqual() *ExtensionPairExpression {
	return s.LessThanOrEqual
}
func (s *ExtensionBooleanExpression) GetGreaterThanOrEqual() *ExtensionPairExpression {
	return s.GreaterThanOrEqual
}
func (s *ExtensionBooleanExpression) GetIn() *ExtensionPairExpression {
	return s.In
}
func (s *ExtensionBooleanExpression) GetIsNull() *ExtensionExpression {
	return s.IsNull
}
func (s *ExtensionBooleanExpression) GetRegexMatch() *ExtensionRegexMatchExpression {
	return s.RegexMatch
}

type ExtensionPairExpression struct {
	Left  *ExtensionExpression `json:"left_,omitempty"`
	Right *ExtensionExpression `json:"right_,omitempty"`
}

func (s *ExtensionPairExpression) GetLeft() *ExtensionExpression {
	return s.Left
}
func (s *ExtensionPairExpression) GetRight() *ExtensionExpression {
	return s.Right
}

type ExtensionRefValue struct {
	Namespace  *string                `json:"namespace_,omitempty"`
	Resource   *string                `json:"resource_,omitempty"`
	Properties map[string]interface{} `json:"properties_,omitempty"`
}

func (s *ExtensionRefValue) GetNamespace() *string {
	return s.Namespace
}
func (s *ExtensionRefValue) GetResource() *string {
	return s.Resource
}
func (s *ExtensionRefValue) GetProperties() map[string]interface{} {
	return s.Properties
}

type ExtensionRegexMatchExpression struct {
	Pattern    *string              `json:"pattern_,omitempty"`
	Expression *ExtensionExpression `json:"expression_,omitempty"`
}

func (s *ExtensionRegexMatchExpression) GetPattern() *string {
	return s.Pattern
}
func (s *ExtensionRegexMatchExpression) GetExpression() *ExtensionExpression {
	return s.Expression
}

type ExtensionExpression struct {
	Property *string            `json:"property_,omitempty"`
	Value    interface{}        `json:"value_,omitempty"`
	RefValue *ExtensionRefValue `json:"refValue_,omitempty"`
}

func (s *ExtensionExpression) GetProperty() *string {
	return s.Property
}
func (s *ExtensionExpression) GetValue() interface{} {
	return s.Value
}
func (s *ExtensionExpression) GetRefValue() *ExtensionRefValue {
	return s.RefValue
}

type FunctionCall struct {
	Host         string `json:"host_,omitempty"`
	FunctionName string `json:"functionName_,omitempty"`
}

func (s *FunctionCall) GetHost() string {
	return s.Host
}
func (s *FunctionCall) GetFunctionName() string {
	return s.FunctionName
}

type HttpCall struct {
	Uri    string `json:"uri_,omitempty"`
	Method string `json:"method_,omitempty"`
}

func (s *HttpCall) GetUri() string {
	return s.Uri
}
func (s *HttpCall) GetMethod() string {
	return s.Method
}

type ChannelCall struct {
	ChannelKey string `json:"channelKey_,omitempty"`
}

func (s *ChannelCall) GetChannelKey() string {
	return s.ChannelKey
}

type ExternalCall struct {
	FunctionCall *FunctionCall `json:"functionCall_,omitempty"`
	HttpCall     *HttpCall     `json:"httpCall_,omitempty"`
	ChannelCall  *ChannelCall  `json:"channelCall_,omitempty"`
}

func (s *ExternalCall) GetFunctionCall() *FunctionCall {
	return s.FunctionCall
}
func (s *ExternalCall) GetHttpCall() *HttpCall {
	return s.HttpCall
}
func (s *ExternalCall) GetChannelCall() *ChannelCall {
	return s.ChannelCall
}

type EventSelector struct {
	Actions        []EventAction               `json:"actions_,omitempty"`
	RecordSelector *ExtensionBooleanExpression `json:"recordSelector_,omitempty"`
	Namespaces     []string                    `json:"namespaces_,omitempty"`
	Resources      []string                    `json:"resources_,omitempty"`
	Ids            []string                    `json:"ids_,omitempty"`
	Annotations    map[string]string           `json:"annotations_,omitempty"`
}

func (s *EventSelector) GetActions() []EventAction {
	return s.Actions
}
func (s *EventSelector) GetRecordSelector() *ExtensionBooleanExpression {
	return s.RecordSelector
}
func (s *EventSelector) GetNamespaces() []string {
	return s.Namespaces
}
func (s *EventSelector) GetResources() []string {
	return s.Resources
}
func (s *EventSelector) GetIds() []string {
	return s.Ids
}
func (s *EventSelector) GetAnnotations() map[string]string {
	return s.Annotations
}

type RecordSearchParams struct {
	Query             *ExtensionBooleanExpression `json:"query_,omitempty"`
	Limit             *int32                      `json:"limit_,omitempty"`
	Offset            *int32                      `json:"offset_,omitempty"`
	ResolveReferences []string                    `json:"resolveReferences_,omitempty"`
}

func (s *RecordSearchParams) GetQuery() *ExtensionBooleanExpression {
	return s.Query
}
func (s *RecordSearchParams) GetLimit() *int32 {
	return s.Limit
}
func (s *RecordSearchParams) GetOffset() *int32 {
	return s.Offset
}
func (s *RecordSearchParams) GetResolveReferences() []string {
	return s.ResolveReferences
}

type Event struct {
	Id                 string              `json:"id_,omitempty"`
	Action             ExtensionAction     `json:"action_,omitempty"`
	RecordSearchParams *RecordSearchParams `json:"recordSearchParams_,omitempty"`
	ActionSummary      *string             `json:"actionSummary_,omitempty"`
	ActionDescription  *string             `json:"actionDescription_,omitempty"`
	Resource           *Resource           `json:"resource_,omitempty"`
	Records            []*Record           `json:"records_,omitempty"`
	Ids                []string            `json:"ids_,omitempty"`
	Finalizes          *bool               `json:"finalizes_,omitempty"`
	Sync               *bool               `json:"sync_,omitempty"`
	Time               *time.Time          `json:"time_,omitempty"`
	Total              *int64              `json:"total_,omitempty"`
	ActionName         *string             `json:"actionName_,omitempty"`
	Input              interface{}         `json:"input_,omitempty"`
	Output             interface{}         `json:"output_,omitempty"`
	Annotations        map[string]string   `json:"annotations_,omitempty"`
	Error              *Error              `json:"error_,omitempty"`
}

func (s *Event) GetId() string {
	return s.Id
}
func (s *Event) GetAction() ExtensionAction {
	return s.Action
}
func (s *Event) GetRecordSearchParams() *RecordSearchParams {
	return s.RecordSearchParams
}
func (s *Event) GetActionSummary() *string {
	return s.ActionSummary
}
func (s *Event) GetActionDescription() *string {
	return s.ActionDescription
}
func (s *Event) GetResource() *Resource {
	return s.Resource
}
func (s *Event) GetRecords() []*Record {
	return s.Records
}
func (s *Event) GetIds() []string {
	return s.Ids
}
func (s *Event) GetFinalizes() *bool {
	return s.Finalizes
}
func (s *Event) GetSync() *bool {
	return s.Sync
}
func (s *Event) GetTime() *time.Time {
	return s.Time
}
func (s *Event) GetTotal() *int64 {
	return s.Total
}
func (s *Event) GetActionName() *string {
	return s.ActionName
}
func (s *Event) GetInput() interface{} {
	return s.Input
}
func (s *Event) GetOutput() interface{} {
	return s.Output
}
func (s *Event) GetAnnotations() map[string]string {
	return s.Annotations
}
func (s *Event) GetError() *Error {
	return s.Error
}

type ErrorField struct {
	RecordId *string     `json:"recordId_,omitempty"`
	Property *string     `json:"property_,omitempty"`
	Message  *string     `json:"message_,omitempty"`
	Value    interface{} `json:"value_,omitempty"`
}

func (s *ErrorField) GetRecordId() *string {
	return s.RecordId
}
func (s *ErrorField) GetProperty() *string {
	return s.Property
}
func (s *ErrorField) GetMessage() *string {
	return s.Message
}
func (s *ErrorField) GetValue() interface{} {
	return s.Value
}

type Error struct {
	Code    *ExtensionCode `json:"code_,omitempty"`
	Message *string        `json:"message_,omitempty"`
	Fields  []ErrorField   `json:"fields_,omitempty"`
}

func (s *Error) GetCode() *ExtensionCode {
	return s.Code
}
func (s *Error) GetMessage() *string {
	return s.Message
}
func (s *Error) GetFields() []ErrorField {
	return s.Fields
}

type EventAction string

const (
	EventAction_CREATE  EventAction = "CREATE"
	EventAction_UPDATE  EventAction = "UPDATE"
	EventAction_DELETE  EventAction = "DELETE"
	EventAction_GET     EventAction = "GET"
	EventAction_LIST    EventAction = "LIST"
	EventAction_OPERATE EventAction = "OPERATE"
)

type ExtensionAction string

const (
	ExtensionAction_CREATE  ExtensionAction = "CREATE"
	ExtensionAction_UPDATE  ExtensionAction = "UPDATE"
	ExtensionAction_DELETE  ExtensionAction = "DELETE"
	ExtensionAction_GET     ExtensionAction = "GET"
	ExtensionAction_LIST    ExtensionAction = "LIST"
	ExtensionAction_OPERATE ExtensionAction = "OPERATE"
)

type ExtensionCode string

const (
	ExtensionCode_UNKNOWNERROR                      ExtensionCode = "UNKNOWN_ERROR"
	ExtensionCode_RECORDNOTFOUND                    ExtensionCode = "RECORD_NOT_FOUND"
	ExtensionCode_UNABLETOLOCATEPRIMARYKEY          ExtensionCode = "UNABLE_TO_LOCATE_PRIMARY_KEY"
	ExtensionCode_INTERNALERROR                     ExtensionCode = "INTERNAL_ERROR"
	ExtensionCode_PROPERTYNOTFOUND                  ExtensionCode = "PROPERTY_NOT_FOUND"
	ExtensionCode_RECORDVALIDATIONERROR             ExtensionCode = "RECORD_VALIDATION_ERROR"
	ExtensionCode_RESOURCEVALIDATIONERROR           ExtensionCode = "RESOURCE_VALIDATION_ERROR"
	ExtensionCode_AUTHENTICATIONFAILED              ExtensionCode = "AUTHENTICATION_FAILED"
	ExtensionCode_ALREADYEXISTS                     ExtensionCode = "ALREADY_EXISTS"
	ExtensionCode_ACCESSDENIED                      ExtensionCode = "ACCESS_DENIED"
	ExtensionCode_BACKENDERROR                      ExtensionCode = "BACKEND_ERROR"
	ExtensionCode_UNIQUEVIOLATION                   ExtensionCode = "UNIQUE_VIOLATION"
	ExtensionCode_REFERENCEVIOLATION                ExtensionCode = "REFERENCE_VIOLATION"
	ExtensionCode_RESOURCENOTFOUND                  ExtensionCode = "RESOURCE_NOT_FOUND"
	ExtensionCode_UNSUPPORTEDOPERATION              ExtensionCode = "UNSUPPORTED_OPERATION"
	ExtensionCode_EXTERNALBACKENDCOMMUNICATIONERROR ExtensionCode = "EXTERNAL_BACKEND_COMMUNICATION_ERROR"
	ExtensionCode_EXTERNALBACKENDERROR              ExtensionCode = "EXTERNAL_BACKEND_ERROR"
	ExtensionCode_RATELIMITERROR                    ExtensionCode = "RATE_LIMIT_ERROR"
)
