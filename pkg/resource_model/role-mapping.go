// Code generated by apbr generate. DO NOT EDIT.
// versions:
// 	apbr generate v1.2

//go:build !codeanalysis

package resource_model

import (
	"github.com/apibrew/apibrew/pkg/abs"
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
)

import "github.com/google/uuid"
import "time"

type RoleMapper struct {
}

func NewRoleMapper() *RoleMapper {
	return &RoleMapper{}
}

var RoleMapperInstance = NewRoleMapper()

func (m *RoleMapper) New() *Role {
	return &Role{}
}

func (m *RoleMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "system",
		Name:      "Role",
	}
}

func (m *RoleMapper) ToRecord(role *Role) abs.RecordLike {
	return abs.NewRecordLikeWithProperties(m.ToProperties(role))
}

func (m *RoleMapper) FromRecord(record abs.RecordLike) *Role {
	return m.FromProperties(record.MapCopy())
}

func (m *RoleMapper) ToProperties(role *Role) map[string]interface{} {
	var properties = make(map[string]interface{})

	var_Id := role.Id

	if var_Id != nil {
		var var_Id_mapped interface{}

		var_Id_mapped = *var_Id

		var_Id_packed, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(var_Id_mapped)

		if err != nil {
			panic(err)
		}

		properties["id"] = var_Id_packed
	}

	var_Version := role.Version

	var var_Version_mapped interface{}

	var_Version_mapped = var_Version
	var_Version_packed, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(var_Version_mapped)

	if err != nil {
		panic(err)
	}

	properties["version"] = var_Version_packed

	var_AuditData := role.AuditData

	if var_AuditData != nil {
		var var_AuditData_mapped interface{}

		var_AuditData_mapped = RoleAuditDataMapperInstance.ToProperties(var_AuditData)

		var_AuditData_packed, err := types.ByResourcePropertyType(model.ResourceProperty_STRUCT).Pack(var_AuditData_mapped)

		if err != nil {
			panic(err)
		}

		properties["auditData"] = var_AuditData_packed
	}

	var_Name := role.Name

	var var_Name_mapped interface{}

	var_Name_mapped = var_Name
	var_Name_packed, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Name_mapped)

	if err != nil {
		panic(err)
	}

	properties["name"] = var_Name_packed

	var_Permissions := role.Permissions

	if var_Permissions != nil {
		var var_Permissions_mapped interface{}

		var var_Permissions_l []interface{}
		for _, value := range var_Permissions {

			var_5x := value
			var var_5x_mapped interface{}

			var_5x_mapped = PermissionMapperInstance.ToProperties(var_5x)

			var_Permissions_l = append(var_Permissions_l, var_5x_mapped)
		}
		var_Permissions_mapped = var_Permissions_l

		var_Permissions_packed, err := types.ByResourcePropertyType(model.ResourceProperty_LIST).Pack(var_Permissions_mapped)

		if err != nil {
			panic(err)
		}

		properties["permissions"] = var_Permissions_packed
	}

	var_Details := role.Details

	if var_Details != nil {
		var var_Details_mapped interface{}

		var_Details_mapped = var_Details

		var_Details_packed, err := types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_Details_mapped)

		if err != nil {
			panic(err)
		}

		properties["details"] = var_Details_packed
	}
	return properties
}

func (m *RoleMapper) FromProperties(properties map[string]interface{}) *Role {
	var s = m.New()
	if properties["id"] != nil {

		var_Id := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_Id)

		if err != nil {
			panic(err)
		}

		var_Id_mapped := new(uuid.UUID)
		*var_Id_mapped = val.(uuid.UUID)

		s.Id = var_Id_mapped
	}
	if properties["version"] != nil {

		var_Version := properties["version"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Version)

		if err != nil {
			panic(err)
		}

		var_Version_mapped := val.(int32)

		s.Version = var_Version_mapped
	}
	if properties["auditData"] != nil {

		var_AuditData := properties["auditData"]
		var mappedValue = RoleAuditDataMapperInstance.FromProperties(var_AuditData.(map[string]interface{}))

		var_AuditData_mapped := mappedValue

		s.AuditData = var_AuditData_mapped
	}
	if properties["name"] != nil {

		var_Name := properties["name"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Name)

		if err != nil {
			panic(err)
		}

		var_Name_mapped := val.(string)

		s.Name = var_Name_mapped
	}
	if properties["permissions"] != nil {

		var_Permissions := properties["permissions"]
		var_Permissions_mapped := []*Permission{}
		for _, v := range var_Permissions.([]interface{}) {

			var_4x := v
			var_4x_mapped := PermissionMapperInstance.FromProperties(var_4x.(map[string]interface{}))

			var_Permissions_mapped = append(var_Permissions_mapped, var_4x_mapped)
		}

		s.Permissions = var_Permissions_mapped
	}
	if properties["details"] != nil {

		var_Details := properties["details"]
		var_Details_mapped := new(interface{})
		*var_Details_mapped = var_Details

		s.Details = var_Details_mapped
	}
	return s
}

type RoleAuditDataMapper struct {
}

func NewRoleAuditDataMapper() *RoleAuditDataMapper {
	return &RoleAuditDataMapper{}
}

var RoleAuditDataMapperInstance = NewRoleAuditDataMapper()

func (m *RoleAuditDataMapper) New() *RoleAuditData {
	return &RoleAuditData{}
}

func (m *RoleAuditDataMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "system",
		Name:      "Role",
	}
}

func (m *RoleAuditDataMapper) ToProperties(roleAuditData *RoleAuditData) map[string]interface{} {
	var properties = make(map[string]interface{})

	var_CreatedBy := roleAuditData.CreatedBy

	if var_CreatedBy != nil {
		var var_CreatedBy_mapped interface{}

		var_CreatedBy_mapped = *var_CreatedBy

		var_CreatedBy_packed, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_CreatedBy_mapped)

		if err != nil {
			panic(err)
		}

		properties["createdBy"] = var_CreatedBy_packed
	}

	var_UpdatedBy := roleAuditData.UpdatedBy

	if var_UpdatedBy != nil {
		var var_UpdatedBy_mapped interface{}

		var_UpdatedBy_mapped = *var_UpdatedBy

		var_UpdatedBy_packed, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_UpdatedBy_mapped)

		if err != nil {
			panic(err)
		}

		properties["updatedBy"] = var_UpdatedBy_packed
	}

	var_CreatedOn := roleAuditData.CreatedOn

	if var_CreatedOn != nil {
		var var_CreatedOn_mapped interface{}

		var_CreatedOn_mapped = *var_CreatedOn

		var_CreatedOn_packed, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(var_CreatedOn_mapped)

		if err != nil {
			panic(err)
		}

		properties["createdOn"] = var_CreatedOn_packed
	}

	var_UpdatedOn := roleAuditData.UpdatedOn

	if var_UpdatedOn != nil {
		var var_UpdatedOn_mapped interface{}

		var_UpdatedOn_mapped = *var_UpdatedOn

		var_UpdatedOn_packed, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(var_UpdatedOn_mapped)

		if err != nil {
			panic(err)
		}

		properties["updatedOn"] = var_UpdatedOn_packed
	}
	return properties
}

func (m *RoleAuditDataMapper) FromProperties(properties map[string]interface{}) *RoleAuditData {
	var s = m.New()
	if properties["createdBy"] != nil {

		var_CreatedBy := properties["createdBy"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_CreatedBy)

		if err != nil {
			panic(err)
		}

		var_CreatedBy_mapped := new(string)
		*var_CreatedBy_mapped = val.(string)

		s.CreatedBy = var_CreatedBy_mapped
	}
	if properties["updatedBy"] != nil {

		var_UpdatedBy := properties["updatedBy"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_UpdatedBy)

		if err != nil {
			panic(err)
		}

		var_UpdatedBy_mapped := new(string)
		*var_UpdatedBy_mapped = val.(string)

		s.UpdatedBy = var_UpdatedBy_mapped
	}
	if properties["createdOn"] != nil {

		var_CreatedOn := properties["createdOn"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_CreatedOn)

		if err != nil {
			panic(err)
		}

		var_CreatedOn_mapped := new(time.Time)
		*var_CreatedOn_mapped = val.(time.Time)

		s.CreatedOn = var_CreatedOn_mapped
	}
	if properties["updatedOn"] != nil {

		var_UpdatedOn := properties["updatedOn"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_UpdatedOn)

		if err != nil {
			panic(err)
		}

		var_UpdatedOn_mapped := new(time.Time)
		*var_UpdatedOn_mapped = val.(time.Time)

		s.UpdatedOn = var_UpdatedOn_mapped
	}
	return s
}
