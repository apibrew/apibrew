// Code generated by apbr generate. DO NOT EDIT.
// versions:
// 	apbr generate v1.2

//go:build !codeanalysis

package resource_model

import (
	"github.com/apibrew/apibrew/pkg/abs"
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
)

import "github.com/google/uuid"
import "time"

type AuditLogMapper struct {
}

func NewAuditLogMapper() *AuditLogMapper {
	return &AuditLogMapper{}
}

var AuditLogMapperInstance = NewAuditLogMapper()

func (m *AuditLogMapper) New() *AuditLog {
	return &AuditLog{}
}

func (m *AuditLogMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "system",
		Name:      "AuditLog",
	}
}

func (m *AuditLogMapper) ToRecord(auditLog *AuditLog) abs.RecordLike {
	return abs.NewRecordLikeWithProperties(m.ToProperties(auditLog))
}

func (m *AuditLogMapper) FromRecord(record abs.RecordLike) *AuditLog {
	return m.FromProperties(record.MapCopy())
}

func (m *AuditLogMapper) ToProperties(auditLog *AuditLog) map[string]interface{} {
	var properties = make(map[string]interface{})

	var_Id := auditLog.Id

	if var_Id != nil {
		var var_Id_mapped interface{}

		var_Id_mapped = *var_Id

		var_Id_packed, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(var_Id_mapped)

		if err != nil {
			panic(err)
		}

		properties["id"] = var_Id_packed
	}

	var_Version := auditLog.Version

	var var_Version_mapped interface{}

	var_Version_mapped = var_Version
	var_Version_packed, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(var_Version_mapped)

	if err != nil {
		panic(err)
	}

	properties["version"] = var_Version_packed

	var_Namespace := auditLog.Namespace

	var var_Namespace_mapped interface{}

	var_Namespace_mapped = var_Namespace
	var_Namespace_packed, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Namespace_mapped)

	if err != nil {
		panic(err)
	}

	properties["namespace"] = var_Namespace_packed

	var_Resource := auditLog.Resource

	var var_Resource_mapped interface{}

	var_Resource_mapped = var_Resource
	var_Resource_packed, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Resource_mapped)

	if err != nil {
		panic(err)
	}

	properties["resource"] = var_Resource_packed

	var_RecordId := auditLog.RecordId

	var var_RecordId_mapped interface{}

	var_RecordId_mapped = var_RecordId
	var_RecordId_packed, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_RecordId_mapped)

	if err != nil {
		panic(err)
	}

	properties["recordId"] = var_RecordId_packed

	var_Time := auditLog.Time

	var var_Time_mapped interface{}

	var_Time_mapped = var_Time
	var_Time_packed, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(var_Time_mapped)

	if err != nil {
		panic(err)
	}

	properties["time"] = var_Time_packed

	var_Username := auditLog.Username

	var var_Username_mapped interface{}

	var_Username_mapped = var_Username
	var_Username_packed, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Username_mapped)

	if err != nil {
		panic(err)
	}

	properties["username"] = var_Username_packed

	var_Operation := auditLog.Operation

	var var_Operation_mapped interface{}

	var_Operation_mapped = string(var_Operation)
	var_Operation_packed, err := types.ByResourcePropertyType(model.ResourceProperty_ENUM).Pack(var_Operation_mapped)

	if err != nil {
		panic(err)
	}

	properties["operation"] = var_Operation_packed

	var_Properties := auditLog.Properties

	if var_Properties != nil {
		var var_Properties_mapped interface{}

		var_Properties_mapped = var_Properties

		var_Properties_packed, err := types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_Properties_mapped)

		if err != nil {
			panic(err)
		}

		properties["properties"] = var_Properties_packed
	}

	var_Annotations := auditLog.Annotations

	if var_Annotations != nil {
		var var_Annotations_mapped interface{}

		var var_Annotations_st = make(map[string]interface{})
		for key, value := range var_Annotations {

			var_1x := value
			var var_1x_mapped interface{}

			var_1x_mapped = var_1x

			var_Annotations_st[key] = var_1x_mapped
		}
		var_Annotations_mapped = var_Annotations_st

		var_Annotations_packed, err := types.ByResourcePropertyType(model.ResourceProperty_MAP).Pack(var_Annotations_mapped)

		if err != nil {
			panic(err)
		}

		properties["annotations"] = var_Annotations_packed
	}
	return properties
}

func (m *AuditLogMapper) FromProperties(properties map[string]interface{}) *AuditLog {
	var s = m.New()
	if properties["id"] != nil {

		var_Id := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_Id)

		if err != nil {
			panic(err)
		}

		var_Id_mapped := new(uuid.UUID)
		*var_Id_mapped = val.(uuid.UUID)

		s.Id = var_Id_mapped
	}
	if properties["version"] != nil {

		var_Version := properties["version"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Version)

		if err != nil {
			panic(err)
		}

		var_Version_mapped := val.(int32)

		s.Version = var_Version_mapped
	}
	if properties["namespace"] != nil {

		var_Namespace := properties["namespace"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Namespace)

		if err != nil {
			panic(err)
		}

		var_Namespace_mapped := val.(string)

		s.Namespace = var_Namespace_mapped
	}
	if properties["resource"] != nil {

		var_Resource := properties["resource"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Resource)

		if err != nil {
			panic(err)
		}

		var_Resource_mapped := val.(string)

		s.Resource = var_Resource_mapped
	}
	if properties["recordId"] != nil {

		var_RecordId := properties["recordId"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_RecordId)

		if err != nil {
			panic(err)
		}

		var_RecordId_mapped := val.(string)

		s.RecordId = var_RecordId_mapped
	}
	if properties["time"] != nil {

		var_Time := properties["time"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_Time)

		if err != nil {
			panic(err)
		}

		var_Time_mapped := val.(time.Time)

		s.Time = var_Time_mapped
	}
	if properties["username"] != nil {

		var_Username := properties["username"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Username)

		if err != nil {
			panic(err)
		}

		var_Username_mapped := val.(string)

		s.Username = var_Username_mapped
	}
	if properties["operation"] != nil {

		var_Operation := properties["operation"]
		var_Operation_mapped := (AuditLogOperation)(var_Operation.(string))

		s.Operation = var_Operation_mapped
	}
	if properties["properties"] != nil {

		var_Properties := properties["properties"]
		var_Properties_mapped := new(interface{})
		*var_Properties_mapped = var_Properties

		s.Properties = var_Properties_mapped
	}
	if properties["annotations"] != nil {

		var_Annotations := properties["annotations"]
		var_Annotations_mapped := make(map[string]string)
		for k, v := range var_Annotations.(map[string]interface{}) {

			var_3x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_3x)

			if err != nil {
				panic(err)
			}

			var_3x_mapped := val.(string)

			var_Annotations_mapped[k] = var_3x_mapped
		}

		s.Annotations = var_Annotations_mapped
	}
	return s
}
