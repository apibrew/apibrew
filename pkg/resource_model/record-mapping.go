// AUTOGENERATED FILE

//go:build !codeanalysis

package resource_model

import (
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
	"google.golang.org/protobuf/types/known/structpb"
)

import "github.com/google/uuid"
import "github.com/apibrew/apibrew/pkg/formats/unstructured"

type RecordMapper struct {
}

func NewRecordMapper() *RecordMapper {
	return &RecordMapper{}
}

var RecordMapperInstance = NewRecordMapper()

func (m *RecordMapper) New() *Record {
	return &Record{}
}

func (m *RecordMapper) ToRecord(record *Record) *model.Record {
	var rec = &model.Record{}
	rec.Properties = m.ToProperties(record)

	if record.Id != nil {
		rec.Id = record.Id.String()
	}

	return rec
}

func (m *RecordMapper) FromRecord(record *model.Record) *Record {
	return m.FromProperties(record.Properties)
}

func (m *RecordMapper) ToProperties(record *Record) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_a24ae4b83009 := record.Id

	if var_a24ae4b83009 != nil {
		var var_a24ae4b83009_mapped *structpb.Value

		var var_a24ae4b83009_err error
		var_a24ae4b83009_mapped, var_a24ae4b83009_err = types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(*var_a24ae4b83009)
		if var_a24ae4b83009_err != nil {
			panic(var_a24ae4b83009_err)
		}
		properties["id"] = var_a24ae4b83009_mapped
	}

	var_524515f9ea89 := record.Properties

	var var_524515f9ea89_mapped *structpb.Value

	var var_524515f9ea89_err error
	var_524515f9ea89_mapped, var_524515f9ea89_err = types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_524515f9ea89)
	if var_524515f9ea89_err != nil {
		panic(var_524515f9ea89_err)
	}
	properties["properties"] = var_524515f9ea89_mapped

	var_66db775811a9 := record.PackedProperties

	if var_66db775811a9 != nil {
		var var_66db775811a9_mapped *structpb.Value

		var var_66db775811a9_l []*structpb.Value
		for _, value := range var_66db775811a9 {

			var_b2ec1bad3642 := value
			var var_b2ec1bad3642_mapped *structpb.Value

			var var_b2ec1bad3642_err error
			var_b2ec1bad3642_mapped, var_b2ec1bad3642_err = types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_b2ec1bad3642)
			if var_b2ec1bad3642_err != nil {
				panic(var_b2ec1bad3642_err)
			}

			var_66db775811a9_l = append(var_66db775811a9_l, var_b2ec1bad3642_mapped)
		}
		var_66db775811a9_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_66db775811a9_l})
		properties["packedProperties"] = var_66db775811a9_mapped
	}
	return properties
}

func (m *RecordMapper) FromProperties(properties map[string]*structpb.Value) *Record {
	var s = m.New()
	if properties["id"] != nil {

		var_3e756ba4fd4f := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_3e756ba4fd4f)

		if err != nil {
			panic(err)
		}

		var_3e756ba4fd4f_mapped := new(uuid.UUID)
		*var_3e756ba4fd4f_mapped = val.(uuid.UUID)

		s.Id = var_3e756ba4fd4f_mapped
	}
	if properties["properties"] != nil {

		var_efd884d9438f := properties["properties"]
		var_efd884d9438f_mapped := unstructured.FromStructValue(var_efd884d9438f.GetStructValue())

		s.Properties = var_efd884d9438f_mapped
	}
	if properties["packedProperties"] != nil {

		var_abdf5417baf2 := properties["packedProperties"]
		var_abdf5417baf2_mapped := []unstructured.Unstructured{}
		for _, v := range var_abdf5417baf2.GetListValue().Values {

			var_4572361332cc := v
			var_4572361332cc_mapped := unstructured.FromStructValue(var_4572361332cc.GetStructValue())

			var_abdf5417baf2_mapped = append(var_abdf5417baf2_mapped, var_4572361332cc_mapped)
		}

		s.PackedProperties = var_abdf5417baf2_mapped
	}
	return s
}
