// AUTOGENERATED FILE

//go:build !codeanalysis

package resource_model

import (
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
	"google.golang.org/protobuf/types/known/structpb"
)

import "github.com/google/uuid"
import "github.com/apibrew/apibrew/pkg/formats/unstructured"

type RecordMapper struct {
}

func NewRecordMapper() *RecordMapper {
	return &RecordMapper{}
}

var RecordMapperInstance = NewRecordMapper()

func (m *RecordMapper) New() *Record {
	return &Record{}
}

func (m *RecordMapper) ToRecord(record *Record) *model.Record {
	var rec = &model.Record{}
	rec.Properties = m.ToProperties(record)

	if record.Id != nil {
		rec.Id = record.Id.String()
	}

	return rec
}

func (m *RecordMapper) FromRecord(record *model.Record) *Record {
	return m.FromProperties(record.Properties)
}

func (m *RecordMapper) ToProperties(record *Record) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_77d26e855104 := record.Id

	if var_77d26e855104 != nil {
		var var_77d26e855104_mapped *structpb.Value

		var var_77d26e855104_err error
		var_77d26e855104_mapped, var_77d26e855104_err = types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(*var_77d26e855104)
		if var_77d26e855104_err != nil {
			panic(var_77d26e855104_err)
		}
		properties["id"] = var_77d26e855104_mapped
	}

	var_8aa4e69622a1 := record.Properties

	var var_8aa4e69622a1_mapped *structpb.Value

	var var_8aa4e69622a1_err error
	var_8aa4e69622a1_mapped, var_8aa4e69622a1_err = types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_8aa4e69622a1)
	if var_8aa4e69622a1_err != nil {
		panic(var_8aa4e69622a1_err)
	}
	properties["properties"] = var_8aa4e69622a1_mapped

	var_9813743b233b := record.PackedProperties

	if var_9813743b233b != nil {
		var var_9813743b233b_mapped *structpb.Value

		var var_9813743b233b_l []*structpb.Value
		for _, value := range var_9813743b233b {

			var_805ddb5de085 := value
			var var_805ddb5de085_mapped *structpb.Value

			var var_805ddb5de085_err error
			var_805ddb5de085_mapped, var_805ddb5de085_err = types.ByResourcePropertyType(model.ResourceProperty_OBJECT).Pack(var_805ddb5de085)
			if var_805ddb5de085_err != nil {
				panic(var_805ddb5de085_err)
			}

			var_9813743b233b_l = append(var_9813743b233b_l, var_805ddb5de085_mapped)
		}
		var_9813743b233b_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_9813743b233b_l})
		properties["packedProperties"] = var_9813743b233b_mapped
	}
	return properties
}

func (m *RecordMapper) FromProperties(properties map[string]*structpb.Value) *Record {
	var s = m.New()
	if properties["id"] != nil {

		var_457e0d67d32c := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_457e0d67d32c)

		if err != nil {
			panic(err)
		}

		var_457e0d67d32c_mapped := new(uuid.UUID)
		*var_457e0d67d32c_mapped = val.(uuid.UUID)

		s.Id = var_457e0d67d32c_mapped
	}
	if properties["properties"] != nil {

		var_3c13a49c453d := properties["properties"]
		var_3c13a49c453d_mapped := unstructured.FromStructValue(var_3c13a49c453d.GetStructValue())

		s.Properties = var_3c13a49c453d_mapped
	}
	if properties["packedProperties"] != nil {

		var_5c376fd136a4 := properties["packedProperties"]
		var_5c376fd136a4_mapped := []unstructured.Unstructured{}
		for _, v := range var_5c376fd136a4.GetListValue().Values {

			var_f3b982d986ca := v
			var_f3b982d986ca_mapped := unstructured.FromStructValue(var_f3b982d986ca.GetStructValue())

			var_5c376fd136a4_mapped = append(var_5c376fd136a4_mapped, var_f3b982d986ca_mapped)
		}

		s.PackedProperties = var_5c376fd136a4_mapped
	}
	return s
}
