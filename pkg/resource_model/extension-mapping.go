// AUTOGENERATED FILE

//go:build !codeanalysis

package resource_model

import (
	"github.com/apibrew/apibrew/pkg/abs"
	"github.com/apibrew/apibrew/pkg/model"
	"github.com/apibrew/apibrew/pkg/types"
	"google.golang.org/protobuf/types/known/structpb"
)

import "github.com/google/uuid"
import "time"

type ExtensionMapper struct {
}

func NewExtensionMapper() *ExtensionMapper {
	return &ExtensionMapper{}
}

var ExtensionMapperInstance = NewExtensionMapper()

func (m *ExtensionMapper) New() *Extension {
	return &Extension{}
}

func (m *ExtensionMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "system",
		Name:      "Extension",
	}
}

func (m *ExtensionMapper) ToRecord(extension *Extension) *model.Record {
	var rec = &model.Record{}
	rec.Properties = m.ToProperties(extension)

	if extension.Id != nil {
		rec.Id = extension.Id.String()
	}

	return rec
}

func (m *ExtensionMapper) FromRecord(record *model.Record) *Extension {
	return m.FromProperties(record.Properties)
}

func (m *ExtensionMapper) ToProperties(extension *Extension) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Id := extension.Id

	if var_Id != nil {
		var var_Id_mapped *structpb.Value

		var var_Id_err error
		var_Id_mapped, var_Id_err = types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(*var_Id)
		if var_Id_err != nil {
			panic(var_Id_err)
		}
		properties["id"] = var_Id_mapped
	}

	var_Version := extension.Version

	var var_Version_mapped *structpb.Value

	var var_Version_err error
	var_Version_mapped, var_Version_err = types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(var_Version)
	if var_Version_err != nil {
		panic(var_Version_err)
	}
	properties["version"] = var_Version_mapped

	var_CreatedBy := extension.CreatedBy

	if var_CreatedBy != nil {
		var var_CreatedBy_mapped *structpb.Value

		var var_CreatedBy_err error
		var_CreatedBy_mapped, var_CreatedBy_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_CreatedBy)
		if var_CreatedBy_err != nil {
			panic(var_CreatedBy_err)
		}
		properties["createdBy"] = var_CreatedBy_mapped
	}

	var_UpdatedBy := extension.UpdatedBy

	if var_UpdatedBy != nil {
		var var_UpdatedBy_mapped *structpb.Value

		var var_UpdatedBy_err error
		var_UpdatedBy_mapped, var_UpdatedBy_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_UpdatedBy)
		if var_UpdatedBy_err != nil {
			panic(var_UpdatedBy_err)
		}
		properties["updatedBy"] = var_UpdatedBy_mapped
	}

	var_CreatedOn := extension.CreatedOn

	if var_CreatedOn != nil {
		var var_CreatedOn_mapped *structpb.Value

		var var_CreatedOn_err error
		var_CreatedOn_mapped, var_CreatedOn_err = types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(*var_CreatedOn)
		if var_CreatedOn_err != nil {
			panic(var_CreatedOn_err)
		}
		properties["createdOn"] = var_CreatedOn_mapped
	}

	var_UpdatedOn := extension.UpdatedOn

	if var_UpdatedOn != nil {
		var var_UpdatedOn_mapped *structpb.Value

		var var_UpdatedOn_err error
		var_UpdatedOn_mapped, var_UpdatedOn_err = types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(*var_UpdatedOn)
		if var_UpdatedOn_err != nil {
			panic(var_UpdatedOn_err)
		}
		properties["updatedOn"] = var_UpdatedOn_mapped
	}

	var_Name := extension.Name

	var var_Name_mapped *structpb.Value

	var var_Name_err error
	var_Name_mapped, var_Name_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Name)
	if var_Name_err != nil {
		panic(var_Name_err)
	}
	properties["name"] = var_Name_mapped

	var_Description := extension.Description

	if var_Description != nil {
		var var_Description_mapped *structpb.Value

		var var_Description_err error
		var_Description_mapped, var_Description_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_Description)
		if var_Description_err != nil {
			panic(var_Description_err)
		}
		properties["description"] = var_Description_mapped
	}

	var_Selector := extension.Selector

	if var_Selector != nil {
		var var_Selector_mapped *structpb.Value

		var_Selector_mapped = structpb.NewStructValue(&structpb.Struct{Fields: ExtensionEventSelectorMapperInstance.ToProperties(var_Selector)})
		properties["selector"] = var_Selector_mapped
	}

	var_Order := extension.Order

	var var_Order_mapped *structpb.Value

	var var_Order_err error
	var_Order_mapped, var_Order_err = types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(var_Order)
	if var_Order_err != nil {
		panic(var_Order_err)
	}
	properties["order"] = var_Order_mapped

	var_Finalizes := extension.Finalizes

	var var_Finalizes_mapped *structpb.Value

	var var_Finalizes_err error
	var_Finalizes_mapped, var_Finalizes_err = types.ByResourcePropertyType(model.ResourceProperty_BOOL).Pack(var_Finalizes)
	if var_Finalizes_err != nil {
		panic(var_Finalizes_err)
	}
	properties["finalizes"] = var_Finalizes_mapped

	var_Sync := extension.Sync

	var var_Sync_mapped *structpb.Value

	var var_Sync_err error
	var_Sync_mapped, var_Sync_err = types.ByResourcePropertyType(model.ResourceProperty_BOOL).Pack(var_Sync)
	if var_Sync_err != nil {
		panic(var_Sync_err)
	}
	properties["sync"] = var_Sync_mapped

	var_Responds := extension.Responds

	var var_Responds_mapped *structpb.Value

	var var_Responds_err error
	var_Responds_mapped, var_Responds_err = types.ByResourcePropertyType(model.ResourceProperty_BOOL).Pack(var_Responds)
	if var_Responds_err != nil {
		panic(var_Responds_err)
	}
	properties["responds"] = var_Responds_mapped

	var_Call := extension.Call

	var var_Call_mapped *structpb.Value

	var_Call_mapped = structpb.NewStructValue(&structpb.Struct{Fields: ExtensionExternalCallMapperInstance.ToProperties(&var_Call)})
	properties["call"] = var_Call_mapped

	var_Annotations := extension.Annotations

	if var_Annotations != nil {
		var var_Annotations_mapped *structpb.Value

		var var_Annotations_st *structpb.Struct = new(structpb.Struct)
		var_Annotations_st.Fields = make(map[string]*structpb.Value)
		for key, value := range var_Annotations {

			var_1x := value
			var var_1x_mapped *structpb.Value

			var var_1x_err error
			var_1x_mapped, var_1x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_1x)
			if var_1x_err != nil {
				panic(var_1x_err)
			}

			var_Annotations_st.Fields[key] = var_1x_mapped
		}
		var_Annotations_mapped = structpb.NewStructValue(var_Annotations_st)
		properties["annotations"] = var_Annotations_mapped
	}
	return properties
}

func (m *ExtensionMapper) FromProperties(properties map[string]*structpb.Value) *Extension {
	var s = m.New()
	if properties["id"] != nil {

		var_Id := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_Id)

		if err != nil {
			panic(err)
		}

		var_Id_mapped := new(uuid.UUID)
		*var_Id_mapped = val.(uuid.UUID)

		s.Id = var_Id_mapped
	}
	if properties["version"] != nil {

		var_Version := properties["version"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Version)

		if err != nil {
			panic(err)
		}

		var_Version_mapped := val.(int32)

		s.Version = var_Version_mapped
	}
	if properties["createdBy"] != nil {

		var_CreatedBy := properties["createdBy"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_CreatedBy)

		if err != nil {
			panic(err)
		}

		var_CreatedBy_mapped := new(string)
		*var_CreatedBy_mapped = val.(string)

		s.CreatedBy = var_CreatedBy_mapped
	}
	if properties["updatedBy"] != nil {

		var_UpdatedBy := properties["updatedBy"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_UpdatedBy)

		if err != nil {
			panic(err)
		}

		var_UpdatedBy_mapped := new(string)
		*var_UpdatedBy_mapped = val.(string)

		s.UpdatedBy = var_UpdatedBy_mapped
	}
	if properties["createdOn"] != nil {

		var_CreatedOn := properties["createdOn"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_CreatedOn)

		if err != nil {
			panic(err)
		}

		var_CreatedOn_mapped := new(time.Time)
		*var_CreatedOn_mapped = val.(time.Time)

		s.CreatedOn = var_CreatedOn_mapped
	}
	if properties["updatedOn"] != nil {

		var_UpdatedOn := properties["updatedOn"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_UpdatedOn)

		if err != nil {
			panic(err)
		}

		var_UpdatedOn_mapped := new(time.Time)
		*var_UpdatedOn_mapped = val.(time.Time)

		s.UpdatedOn = var_UpdatedOn_mapped
	}
	if properties["name"] != nil {

		var_Name := properties["name"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Name)

		if err != nil {
			panic(err)
		}

		var_Name_mapped := val.(string)

		s.Name = var_Name_mapped
	}
	if properties["description"] != nil {

		var_Description := properties["description"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Description)

		if err != nil {
			panic(err)
		}

		var_Description_mapped := new(string)
		*var_Description_mapped = val.(string)

		s.Description = var_Description_mapped
	}
	if properties["selector"] != nil {

		var_Selector := properties["selector"]
		var mappedValue = ExtensionEventSelectorMapperInstance.FromProperties(var_Selector.GetStructValue().Fields)

		var_Selector_mapped := mappedValue

		s.Selector = var_Selector_mapped
	}
	if properties["order"] != nil {

		var_Order := properties["order"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Order)

		if err != nil {
			panic(err)
		}

		var_Order_mapped := val.(int32)

		s.Order = var_Order_mapped
	}
	if properties["finalizes"] != nil {

		var_Finalizes := properties["finalizes"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_BOOL).UnPack(var_Finalizes)

		if err != nil {
			panic(err)
		}

		var_Finalizes_mapped := val.(bool)

		s.Finalizes = var_Finalizes_mapped
	}
	if properties["sync"] != nil {

		var_Sync := properties["sync"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_BOOL).UnPack(var_Sync)

		if err != nil {
			panic(err)
		}

		var_Sync_mapped := val.(bool)

		s.Sync = var_Sync_mapped
	}
	if properties["responds"] != nil {

		var_Responds := properties["responds"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_BOOL).UnPack(var_Responds)

		if err != nil {
			panic(err)
		}

		var_Responds_mapped := val.(bool)

		s.Responds = var_Responds_mapped
	}
	if properties["call"] != nil {

		var_Call := properties["call"]
		var mappedValue = ExtensionExternalCallMapperInstance.FromProperties(var_Call.GetStructValue().Fields)

		var_Call_mapped := *mappedValue

		s.Call = var_Call_mapped
	}
	if properties["annotations"] != nil {

		var_Annotations := properties["annotations"]
		var_Annotations_mapped := make(map[string]string)
		for k, v := range var_Annotations.GetStructValue().Fields {

			var_3x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_3x)

			if err != nil {
				panic(err)
			}

			var_3x_mapped := val.(string)

			var_Annotations_mapped[k] = var_3x_mapped
		}

		s.Annotations = var_Annotations_mapped
	}
	return s
}

type ExtensionBooleanExpressionMapper struct {
}

func NewExtensionBooleanExpressionMapper() *ExtensionBooleanExpressionMapper {
	return &ExtensionBooleanExpressionMapper{}
}

var ExtensionBooleanExpressionMapperInstance = NewExtensionBooleanExpressionMapper()

func (m *ExtensionBooleanExpressionMapper) New() *ExtensionBooleanExpression {
	return &ExtensionBooleanExpression{}
}

func (m *ExtensionBooleanExpressionMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "system",
		Name:      "Extension",
	}
}

func (m *ExtensionBooleanExpressionMapper) ToProperties(extensionBooleanExpression *ExtensionBooleanExpression) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	return properties
}

func (m *ExtensionBooleanExpressionMapper) FromProperties(properties map[string]*structpb.Value) *ExtensionBooleanExpression {
	var s = m.New()
	return s
}

type ExtensionFunctionCallMapper struct {
}

func NewExtensionFunctionCallMapper() *ExtensionFunctionCallMapper {
	return &ExtensionFunctionCallMapper{}
}

var ExtensionFunctionCallMapperInstance = NewExtensionFunctionCallMapper()

func (m *ExtensionFunctionCallMapper) New() *ExtensionFunctionCall {
	return &ExtensionFunctionCall{}
}

func (m *ExtensionFunctionCallMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "system",
		Name:      "Extension",
	}
}

func (m *ExtensionFunctionCallMapper) ToProperties(extensionFunctionCall *ExtensionFunctionCall) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Host := extensionFunctionCall.Host

	var var_Host_mapped *structpb.Value

	var var_Host_err error
	var_Host_mapped, var_Host_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Host)
	if var_Host_err != nil {
		panic(var_Host_err)
	}
	properties["host"] = var_Host_mapped

	var_FunctionName := extensionFunctionCall.FunctionName

	var var_FunctionName_mapped *structpb.Value

	var var_FunctionName_err error
	var_FunctionName_mapped, var_FunctionName_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_FunctionName)
	if var_FunctionName_err != nil {
		panic(var_FunctionName_err)
	}
	properties["functionName"] = var_FunctionName_mapped
	return properties
}

func (m *ExtensionFunctionCallMapper) FromProperties(properties map[string]*structpb.Value) *ExtensionFunctionCall {
	var s = m.New()
	if properties["host"] != nil {

		var_Host := properties["host"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Host)

		if err != nil {
			panic(err)
		}

		var_Host_mapped := val.(string)

		s.Host = var_Host_mapped
	}
	if properties["functionName"] != nil {

		var_FunctionName := properties["functionName"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_FunctionName)

		if err != nil {
			panic(err)
		}

		var_FunctionName_mapped := val.(string)

		s.FunctionName = var_FunctionName_mapped
	}
	return s
}

type ExtensionHttpCallMapper struct {
}

func NewExtensionHttpCallMapper() *ExtensionHttpCallMapper {
	return &ExtensionHttpCallMapper{}
}

var ExtensionHttpCallMapperInstance = NewExtensionHttpCallMapper()

func (m *ExtensionHttpCallMapper) New() *ExtensionHttpCall {
	return &ExtensionHttpCall{}
}

func (m *ExtensionHttpCallMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "system",
		Name:      "Extension",
	}
}

func (m *ExtensionHttpCallMapper) ToProperties(extensionHttpCall *ExtensionHttpCall) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Uri := extensionHttpCall.Uri

	var var_Uri_mapped *structpb.Value

	var var_Uri_err error
	var_Uri_mapped, var_Uri_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Uri)
	if var_Uri_err != nil {
		panic(var_Uri_err)
	}
	properties["uri"] = var_Uri_mapped

	var_Method := extensionHttpCall.Method

	var var_Method_mapped *structpb.Value

	var var_Method_err error
	var_Method_mapped, var_Method_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_Method)
	if var_Method_err != nil {
		panic(var_Method_err)
	}
	properties["method"] = var_Method_mapped
	return properties
}

func (m *ExtensionHttpCallMapper) FromProperties(properties map[string]*structpb.Value) *ExtensionHttpCall {
	var s = m.New()
	if properties["uri"] != nil {

		var_Uri := properties["uri"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Uri)

		if err != nil {
			panic(err)
		}

		var_Uri_mapped := val.(string)

		s.Uri = var_Uri_mapped
	}
	if properties["method"] != nil {

		var_Method := properties["method"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_Method)

		if err != nil {
			panic(err)
		}

		var_Method_mapped := val.(string)

		s.Method = var_Method_mapped
	}
	return s
}

type ExtensionExternalCallMapper struct {
}

func NewExtensionExternalCallMapper() *ExtensionExternalCallMapper {
	return &ExtensionExternalCallMapper{}
}

var ExtensionExternalCallMapperInstance = NewExtensionExternalCallMapper()

func (m *ExtensionExternalCallMapper) New() *ExtensionExternalCall {
	return &ExtensionExternalCall{}
}

func (m *ExtensionExternalCallMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "system",
		Name:      "Extension",
	}
}

func (m *ExtensionExternalCallMapper) ToProperties(extensionExternalCall *ExtensionExternalCall) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_FunctionCall := extensionExternalCall.FunctionCall

	if var_FunctionCall != nil {
		var var_FunctionCall_mapped *structpb.Value

		var_FunctionCall_mapped = structpb.NewStructValue(&structpb.Struct{Fields: ExtensionFunctionCallMapperInstance.ToProperties(var_FunctionCall)})
		properties["functionCall"] = var_FunctionCall_mapped
	}

	var_HttpCall := extensionExternalCall.HttpCall

	if var_HttpCall != nil {
		var var_HttpCall_mapped *structpb.Value

		var_HttpCall_mapped = structpb.NewStructValue(&structpb.Struct{Fields: ExtensionHttpCallMapperInstance.ToProperties(var_HttpCall)})
		properties["httpCall"] = var_HttpCall_mapped
	}
	return properties
}

func (m *ExtensionExternalCallMapper) FromProperties(properties map[string]*structpb.Value) *ExtensionExternalCall {
	var s = m.New()
	if properties["functionCall"] != nil {

		var_FunctionCall := properties["functionCall"]
		var mappedValue = ExtensionFunctionCallMapperInstance.FromProperties(var_FunctionCall.GetStructValue().Fields)

		var_FunctionCall_mapped := mappedValue

		s.FunctionCall = var_FunctionCall_mapped
	}
	if properties["httpCall"] != nil {

		var_HttpCall := properties["httpCall"]
		var mappedValue = ExtensionHttpCallMapperInstance.FromProperties(var_HttpCall.GetStructValue().Fields)

		var_HttpCall_mapped := mappedValue

		s.HttpCall = var_HttpCall_mapped
	}
	return s
}

type ExtensionEventSelectorMapper struct {
}

func NewExtensionEventSelectorMapper() *ExtensionEventSelectorMapper {
	return &ExtensionEventSelectorMapper{}
}

var ExtensionEventSelectorMapperInstance = NewExtensionEventSelectorMapper()

func (m *ExtensionEventSelectorMapper) New() *ExtensionEventSelector {
	return &ExtensionEventSelector{}
}

func (m *ExtensionEventSelectorMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "system",
		Name:      "Extension",
	}
}

func (m *ExtensionEventSelectorMapper) ToProperties(extensionEventSelector *ExtensionEventSelector) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Actions := extensionEventSelector.Actions

	if var_Actions != nil {
		var var_Actions_mapped *structpb.Value

		var var_Actions_l []*structpb.Value
		for _, value := range var_Actions {

			var_5x := value
			var var_5x_mapped *structpb.Value

			var var_5x_err error
			var_5x_mapped, var_5x_err = types.ByResourcePropertyType(model.ResourceProperty_ENUM).Pack(string(var_5x))
			if var_5x_err != nil {
				panic(var_5x_err)
			}

			var_Actions_l = append(var_Actions_l, var_5x_mapped)
		}
		var_Actions_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_Actions_l})
		properties["actions"] = var_Actions_mapped
	}

	var_RecordSelector := extensionEventSelector.RecordSelector

	if var_RecordSelector != nil {
		var var_RecordSelector_mapped *structpb.Value

		var_RecordSelector_mapped = structpb.NewStructValue(&structpb.Struct{Fields: ExtensionBooleanExpressionMapperInstance.ToProperties(var_RecordSelector)})
		properties["recordSelector"] = var_RecordSelector_mapped
	}

	var_Namespaces := extensionEventSelector.Namespaces

	if var_Namespaces != nil {
		var var_Namespaces_mapped *structpb.Value

		var var_Namespaces_l []*structpb.Value
		for _, value := range var_Namespaces {

			var_5x := value
			var var_5x_mapped *structpb.Value

			var var_5x_err error
			var_5x_mapped, var_5x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_5x)
			if var_5x_err != nil {
				panic(var_5x_err)
			}

			var_Namespaces_l = append(var_Namespaces_l, var_5x_mapped)
		}
		var_Namespaces_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_Namespaces_l})
		properties["namespaces"] = var_Namespaces_mapped
	}

	var_Resources := extensionEventSelector.Resources

	if var_Resources != nil {
		var var_Resources_mapped *structpb.Value

		var var_Resources_l []*structpb.Value
		for _, value := range var_Resources {

			var_5x := value
			var var_5x_mapped *structpb.Value

			var var_5x_err error
			var_5x_mapped, var_5x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_5x)
			if var_5x_err != nil {
				panic(var_5x_err)
			}

			var_Resources_l = append(var_Resources_l, var_5x_mapped)
		}
		var_Resources_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_Resources_l})
		properties["resources"] = var_Resources_mapped
	}

	var_Ids := extensionEventSelector.Ids

	if var_Ids != nil {
		var var_Ids_mapped *structpb.Value

		var var_Ids_l []*structpb.Value
		for _, value := range var_Ids {

			var_5x := value
			var var_5x_mapped *structpb.Value

			var var_5x_err error
			var_5x_mapped, var_5x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_5x)
			if var_5x_err != nil {
				panic(var_5x_err)
			}

			var_Ids_l = append(var_Ids_l, var_5x_mapped)
		}
		var_Ids_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_Ids_l})
		properties["ids"] = var_Ids_mapped
	}

	var_Annotations := extensionEventSelector.Annotations

	if var_Annotations != nil {
		var var_Annotations_mapped *structpb.Value

		var var_Annotations_st *structpb.Struct = new(structpb.Struct)
		var_Annotations_st.Fields = make(map[string]*structpb.Value)
		for key, value := range var_Annotations {

			var_1x := value
			var var_1x_mapped *structpb.Value

			var var_1x_err error
			var_1x_mapped, var_1x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_1x)
			if var_1x_err != nil {
				panic(var_1x_err)
			}

			var_Annotations_st.Fields[key] = var_1x_mapped
		}
		var_Annotations_mapped = structpb.NewStructValue(var_Annotations_st)
		properties["annotations"] = var_Annotations_mapped
	}
	return properties
}

func (m *ExtensionEventSelectorMapper) FromProperties(properties map[string]*structpb.Value) *ExtensionEventSelector {
	var s = m.New()
	if properties["actions"] != nil {

		var_Actions := properties["actions"]
		var_Actions_mapped := []EventAction{}
		for _, v := range var_Actions.GetListValue().Values {

			var_4x := v
			var_4x_mapped := (EventAction)(var_4x.GetStringValue())

			var_Actions_mapped = append(var_Actions_mapped, var_4x_mapped)
		}

		s.Actions = var_Actions_mapped
	}
	if properties["recordSelector"] != nil {

		var_RecordSelector := properties["recordSelector"]
		var mappedValue = ExtensionBooleanExpressionMapperInstance.FromProperties(var_RecordSelector.GetStructValue().Fields)

		var_RecordSelector_mapped := mappedValue

		s.RecordSelector = var_RecordSelector_mapped
	}
	if properties["namespaces"] != nil {

		var_Namespaces := properties["namespaces"]
		var_Namespaces_mapped := []string{}
		for _, v := range var_Namespaces.GetListValue().Values {

			var_4x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_4x)

			if err != nil {
				panic(err)
			}

			var_4x_mapped := val.(string)

			var_Namespaces_mapped = append(var_Namespaces_mapped, var_4x_mapped)
		}

		s.Namespaces = var_Namespaces_mapped
	}
	if properties["resources"] != nil {

		var_Resources := properties["resources"]
		var_Resources_mapped := []string{}
		for _, v := range var_Resources.GetListValue().Values {

			var_4x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_4x)

			if err != nil {
				panic(err)
			}

			var_4x_mapped := val.(string)

			var_Resources_mapped = append(var_Resources_mapped, var_4x_mapped)
		}

		s.Resources = var_Resources_mapped
	}
	if properties["ids"] != nil {

		var_Ids := properties["ids"]
		var_Ids_mapped := []string{}
		for _, v := range var_Ids.GetListValue().Values {

			var_4x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_4x)

			if err != nil {
				panic(err)
			}

			var_4x_mapped := val.(string)

			var_Ids_mapped = append(var_Ids_mapped, var_4x_mapped)
		}

		s.Ids = var_Ids_mapped
	}
	if properties["annotations"] != nil {

		var_Annotations := properties["annotations"]
		var_Annotations_mapped := make(map[string]string)
		for k, v := range var_Annotations.GetStructValue().Fields {

			var_3x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_3x)

			if err != nil {
				panic(err)
			}

			var_3x_mapped := val.(string)

			var_Annotations_mapped[k] = var_3x_mapped
		}

		s.Annotations = var_Annotations_mapped
	}
	return s
}

type ExtensionRecordSearchParamsMapper struct {
}

func NewExtensionRecordSearchParamsMapper() *ExtensionRecordSearchParamsMapper {
	return &ExtensionRecordSearchParamsMapper{}
}

var ExtensionRecordSearchParamsMapperInstance = NewExtensionRecordSearchParamsMapper()

func (m *ExtensionRecordSearchParamsMapper) New() *ExtensionRecordSearchParams {
	return &ExtensionRecordSearchParams{}
}

func (m *ExtensionRecordSearchParamsMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "system",
		Name:      "Extension",
	}
}

func (m *ExtensionRecordSearchParamsMapper) ToProperties(extensionRecordSearchParams *ExtensionRecordSearchParams) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Query := extensionRecordSearchParams.Query

	if var_Query != nil {
		var var_Query_mapped *structpb.Value

		var_Query_mapped = structpb.NewStructValue(&structpb.Struct{Fields: ExtensionBooleanExpressionMapperInstance.ToProperties(var_Query)})
		properties["query"] = var_Query_mapped
	}

	var_Limit := extensionRecordSearchParams.Limit

	if var_Limit != nil {
		var var_Limit_mapped *structpb.Value

		var var_Limit_err error
		var_Limit_mapped, var_Limit_err = types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(*var_Limit)
		if var_Limit_err != nil {
			panic(var_Limit_err)
		}
		properties["limit"] = var_Limit_mapped
	}

	var_Offset := extensionRecordSearchParams.Offset

	if var_Offset != nil {
		var var_Offset_mapped *structpb.Value

		var var_Offset_err error
		var_Offset_mapped, var_Offset_err = types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(*var_Offset)
		if var_Offset_err != nil {
			panic(var_Offset_err)
		}
		properties["offset"] = var_Offset_mapped
	}

	var_ResolveReferences := extensionRecordSearchParams.ResolveReferences

	if var_ResolveReferences != nil {
		var var_ResolveReferences_mapped *structpb.Value

		var var_ResolveReferences_l []*structpb.Value
		for _, value := range var_ResolveReferences {

			var_5x := value
			var var_5x_mapped *structpb.Value

			var var_5x_err error
			var_5x_mapped, var_5x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_5x)
			if var_5x_err != nil {
				panic(var_5x_err)
			}

			var_ResolveReferences_l = append(var_ResolveReferences_l, var_5x_mapped)
		}
		var_ResolveReferences_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_ResolveReferences_l})
		properties["resolveReferences"] = var_ResolveReferences_mapped
	}
	return properties
}

func (m *ExtensionRecordSearchParamsMapper) FromProperties(properties map[string]*structpb.Value) *ExtensionRecordSearchParams {
	var s = m.New()
	if properties["query"] != nil {

		var_Query := properties["query"]
		var mappedValue = ExtensionBooleanExpressionMapperInstance.FromProperties(var_Query.GetStructValue().Fields)

		var_Query_mapped := mappedValue

		s.Query = var_Query_mapped
	}
	if properties["limit"] != nil {

		var_Limit := properties["limit"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Limit)

		if err != nil {
			panic(err)
		}

		var_Limit_mapped := new(int32)
		*var_Limit_mapped = val.(int32)

		s.Limit = var_Limit_mapped
	}
	if properties["offset"] != nil {

		var_Offset := properties["offset"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(var_Offset)

		if err != nil {
			panic(err)
		}

		var_Offset_mapped := new(int32)
		*var_Offset_mapped = val.(int32)

		s.Offset = var_Offset_mapped
	}
	if properties["resolveReferences"] != nil {

		var_ResolveReferences := properties["resolveReferences"]
		var_ResolveReferences_mapped := []string{}
		for _, v := range var_ResolveReferences.GetListValue().Values {

			var_4x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_4x)

			if err != nil {
				panic(err)
			}

			var_4x_mapped := val.(string)

			var_ResolveReferences_mapped = append(var_ResolveReferences_mapped, var_4x_mapped)
		}

		s.ResolveReferences = var_ResolveReferences_mapped
	}
	return s
}

type ExtensionEventMapper struct {
}

func NewExtensionEventMapper() *ExtensionEventMapper {
	return &ExtensionEventMapper{}
}

var ExtensionEventMapperInstance = NewExtensionEventMapper()

func (m *ExtensionEventMapper) New() *ExtensionEvent {
	return &ExtensionEvent{}
}

func (m *ExtensionEventMapper) ResourceIdentity() abs.ResourceIdentity {
	return abs.ResourceIdentity{
		Namespace: "system",
		Name:      "Extension",
	}
}

func (m *ExtensionEventMapper) ToProperties(extensionEvent *ExtensionEvent) map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	var_Id := extensionEvent.Id

	if var_Id != nil {
		var var_Id_mapped *structpb.Value

		var var_Id_err error
		var_Id_mapped, var_Id_err = types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(*var_Id)
		if var_Id_err != nil {
			panic(var_Id_err)
		}
		properties["id"] = var_Id_mapped
	}

	var_Action := extensionEvent.Action

	var var_Action_mapped *structpb.Value

	var var_Action_err error
	var_Action_mapped, var_Action_err = types.ByResourcePropertyType(model.ResourceProperty_ENUM).Pack(string(var_Action))
	if var_Action_err != nil {
		panic(var_Action_err)
	}
	properties["action"] = var_Action_mapped

	var_RecordSearchParams := extensionEvent.RecordSearchParams

	if var_RecordSearchParams != nil {
		var var_RecordSearchParams_mapped *structpb.Value

		var_RecordSearchParams_mapped = structpb.NewStructValue(&structpb.Struct{Fields: ExtensionRecordSearchParamsMapperInstance.ToProperties(var_RecordSearchParams)})
		properties["recordSearchParams"] = var_RecordSearchParams_mapped
	}

	var_ActionSummary := extensionEvent.ActionSummary

	if var_ActionSummary != nil {
		var var_ActionSummary_mapped *structpb.Value

		var var_ActionSummary_err error
		var_ActionSummary_mapped, var_ActionSummary_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_ActionSummary)
		if var_ActionSummary_err != nil {
			panic(var_ActionSummary_err)
		}
		properties["actionSummary"] = var_ActionSummary_mapped
	}

	var_ActionDescription := extensionEvent.ActionDescription

	if var_ActionDescription != nil {
		var var_ActionDescription_mapped *structpb.Value

		var var_ActionDescription_err error
		var_ActionDescription_mapped, var_ActionDescription_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*var_ActionDescription)
		if var_ActionDescription_err != nil {
			panic(var_ActionDescription_err)
		}
		properties["actionDescription"] = var_ActionDescription_mapped
	}

	var_Resource := extensionEvent.Resource

	if var_Resource != nil {
		var var_Resource_mapped *structpb.Value

		var_Resource_mapped = structpb.NewStructValue(&structpb.Struct{Fields: ResourceMapperInstance.ToProperties(var_Resource)})
		properties["resource"] = var_Resource_mapped
	}

	var_Records := extensionEvent.Records

	if var_Records != nil {
		var var_Records_mapped *structpb.Value

		var var_Records_l []*structpb.Value
		for _, value := range var_Records {

			var_5x := value
			var var_5x_mapped *structpb.Value

			var_5x_mapped = structpb.NewStructValue(&structpb.Struct{Fields: RecordMapperInstance.ToProperties(var_5x)})

			var_Records_l = append(var_Records_l, var_5x_mapped)
		}
		var_Records_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_Records_l})
		properties["records"] = var_Records_mapped
	}

	var_Ids := extensionEvent.Ids

	if var_Ids != nil {
		var var_Ids_mapped *structpb.Value

		var var_Ids_l []*structpb.Value
		for _, value := range var_Ids {

			var_5x := value
			var var_5x_mapped *structpb.Value

			var var_5x_err error
			var_5x_mapped, var_5x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_5x)
			if var_5x_err != nil {
				panic(var_5x_err)
			}

			var_Ids_l = append(var_Ids_l, var_5x_mapped)
		}
		var_Ids_mapped = structpb.NewListValue(&structpb.ListValue{Values: var_Ids_l})
		properties["ids"] = var_Ids_mapped
	}

	var_Finalizes := extensionEvent.Finalizes

	if var_Finalizes != nil {
		var var_Finalizes_mapped *structpb.Value

		var var_Finalizes_err error
		var_Finalizes_mapped, var_Finalizes_err = types.ByResourcePropertyType(model.ResourceProperty_BOOL).Pack(*var_Finalizes)
		if var_Finalizes_err != nil {
			panic(var_Finalizes_err)
		}
		properties["finalizes"] = var_Finalizes_mapped
	}

	var_Sync := extensionEvent.Sync

	if var_Sync != nil {
		var var_Sync_mapped *structpb.Value

		var var_Sync_err error
		var_Sync_mapped, var_Sync_err = types.ByResourcePropertyType(model.ResourceProperty_BOOL).Pack(*var_Sync)
		if var_Sync_err != nil {
			panic(var_Sync_err)
		}
		properties["sync"] = var_Sync_mapped
	}

	var_Time := extensionEvent.Time

	if var_Time != nil {
		var var_Time_mapped *structpb.Value

		var var_Time_err error
		var_Time_mapped, var_Time_err = types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(*var_Time)
		if var_Time_err != nil {
			panic(var_Time_err)
		}
		properties["time"] = var_Time_mapped
	}

	var_Annotations := extensionEvent.Annotations

	if var_Annotations != nil {
		var var_Annotations_mapped *structpb.Value

		var var_Annotations_st *structpb.Struct = new(structpb.Struct)
		var_Annotations_st.Fields = make(map[string]*structpb.Value)
		for key, value := range var_Annotations {

			var_1x := value
			var var_1x_mapped *structpb.Value

			var var_1x_err error
			var_1x_mapped, var_1x_err = types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(var_1x)
			if var_1x_err != nil {
				panic(var_1x_err)
			}

			var_Annotations_st.Fields[key] = var_1x_mapped
		}
		var_Annotations_mapped = structpb.NewStructValue(var_Annotations_st)
		properties["annotations"] = var_Annotations_mapped
	}
	return properties
}

func (m *ExtensionEventMapper) FromProperties(properties map[string]*structpb.Value) *ExtensionEvent {
	var s = m.New()
	if properties["id"] != nil {

		var_Id := properties["id"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).UnPack(var_Id)

		if err != nil {
			panic(err)
		}

		var_Id_mapped := new(uuid.UUID)
		*var_Id_mapped = val.(uuid.UUID)

		s.Id = var_Id_mapped
	}
	if properties["action"] != nil {

		var_Action := properties["action"]
		var_Action_mapped := (EventAction)(var_Action.GetStringValue())

		s.Action = var_Action_mapped
	}
	if properties["recordSearchParams"] != nil {

		var_RecordSearchParams := properties["recordSearchParams"]
		var mappedValue = ExtensionRecordSearchParamsMapperInstance.FromProperties(var_RecordSearchParams.GetStructValue().Fields)

		var_RecordSearchParams_mapped := mappedValue

		s.RecordSearchParams = var_RecordSearchParams_mapped
	}
	if properties["actionSummary"] != nil {

		var_ActionSummary := properties["actionSummary"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_ActionSummary)

		if err != nil {
			panic(err)
		}

		var_ActionSummary_mapped := new(string)
		*var_ActionSummary_mapped = val.(string)

		s.ActionSummary = var_ActionSummary_mapped
	}
	if properties["actionDescription"] != nil {

		var_ActionDescription := properties["actionDescription"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_ActionDescription)

		if err != nil {
			panic(err)
		}

		var_ActionDescription_mapped := new(string)
		*var_ActionDescription_mapped = val.(string)

		s.ActionDescription = var_ActionDescription_mapped
	}
	if properties["resource"] != nil {

		var_Resource := properties["resource"]
		var_Resource_mapped := ResourceMapperInstance.FromProperties(var_Resource.GetStructValue().Fields)

		s.Resource = var_Resource_mapped
	}
	if properties["records"] != nil {

		var_Records := properties["records"]
		var_Records_mapped := []*Record{}
		for _, v := range var_Records.GetListValue().Values {

			var_4x := v
			var_4x_mapped := RecordMapperInstance.FromProperties(var_4x.GetStructValue().Fields)

			var_Records_mapped = append(var_Records_mapped, var_4x_mapped)
		}

		s.Records = var_Records_mapped
	}
	if properties["ids"] != nil {

		var_Ids := properties["ids"]
		var_Ids_mapped := []string{}
		for _, v := range var_Ids.GetListValue().Values {

			var_4x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_4x)

			if err != nil {
				panic(err)
			}

			var_4x_mapped := val.(string)

			var_Ids_mapped = append(var_Ids_mapped, var_4x_mapped)
		}

		s.Ids = var_Ids_mapped
	}
	if properties["finalizes"] != nil {

		var_Finalizes := properties["finalizes"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_BOOL).UnPack(var_Finalizes)

		if err != nil {
			panic(err)
		}

		var_Finalizes_mapped := new(bool)
		*var_Finalizes_mapped = val.(bool)

		s.Finalizes = var_Finalizes_mapped
	}
	if properties["sync"] != nil {

		var_Sync := properties["sync"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_BOOL).UnPack(var_Sync)

		if err != nil {
			panic(err)
		}

		var_Sync_mapped := new(bool)
		*var_Sync_mapped = val.(bool)

		s.Sync = var_Sync_mapped
	}
	if properties["time"] != nil {

		var_Time := properties["time"]
		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(var_Time)

		if err != nil {
			panic(err)
		}

		var_Time_mapped := new(time.Time)
		*var_Time_mapped = val.(time.Time)

		s.Time = var_Time_mapped
	}
	if properties["annotations"] != nil {

		var_Annotations := properties["annotations"]
		var_Annotations_mapped := make(map[string]string)
		for k, v := range var_Annotations.GetStructValue().Fields {

			var_3x := v
			val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(var_3x)

			if err != nil {
				panic(err)
			}

			var_3x_mapped := val.(string)

			var_Annotations_mapped[k] = var_3x_mapped
		}

		s.Annotations = var_Annotations_mapped
	}
	return s
}
