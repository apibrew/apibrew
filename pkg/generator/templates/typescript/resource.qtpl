{% import "github.com/apibrew/apibrew/pkg/model" %}

{%- func GenerateClassCode(pkg string, resource *model.Resource) -%}
{%- for _, reference := range getAllReferencedResources(resource) -%}
import {{%s= typescriptClassName(reference.Resource) %}} from './{%s= fileName(reference.Resource) %}';
{%- endfor -%}

export interface {%s typescriptClassName(resource.Name) %} {
    {%- for _, property := range resource.Properties -%}
    {%s= propertyName(property) %}{% if !property.Required %}?{% endif %}: {%s= getTypescriptType(resource, property, false) %}
    {%- endfor -%}
}

export const {%s typescriptClassName(resource.Name) %}EntityInfo = {
    namespace: "{%s resource.Namespace %}",
    resource: "{%s resource.Name %}",
    restPath: "{%s getRestPath(resource) %}",
}
{%- for _, subType := range getAllSubTypes(resource) -%}

export interface {%s typescriptClassName(subType.Name) %} {
    {%- for _, property := range subType.Properties -%}
    {%s= propertyName(property) %}: {%s= getTypescriptType(resource, property, false) %}
    {%- endfor -%}
}
{%- endfor -%}
{%- for _, enum := range getAllEnums(resource) -%}

export enum {%s typescriptClassName(enum.Name) %} {
    {%- for _, enumValue := range enum.EnumValues -%}
    {%s= enumName(enumValue) %} = "{%s enumValue %}",
    {%- endfor -%}
}
{%- endfor -%}

export const {%s typescriptClassName(resource.Name) %}Resource = {%s= resourceJson(resource) %} as unknown

{%- endfunc -%}