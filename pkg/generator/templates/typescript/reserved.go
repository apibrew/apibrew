package typescript

func isTypescriptReservedKeyword(word string) bool {
	keywords := map[string]bool{
		"break":       true,
		"case":        true,
		"catch":       true,
		"class":       true,
		"const":       true,
		"continue":    true,
		"debugger":    true,
		"default":     true,
		"delete":      true,
		"do":          true,
		"else":        true,
		"enum":        true,
		"export":      true,
		"extends":     true,
		"false":       true,
		"finally":     true,
		"for":         true,
		"function":    true,
		"if":          true,
		"import":      true,
		"in":          true,
		"instanceof":  true,
		"new":         true,
		"null":        true,
		"return":      true,
		"super":       true,
		"switch":      true,
		"this":        true,
		"throw":       true,
		"true":        true,
		"try":         true,
		"typeof":      true,
		"var":         true,
		"void":        true,
		"while":       true,
		"with":        true,
		"implements":  true,
		"interface":   true,
		"let":         true,
		"package":     true,
		"private":     true,
		"protected":   true,
		"public":      true,
		"static":      true,
		"yield":       true,
		"any":         true,
		"boolean":     true,
		"constructor": true,
		"declare":     true,
		"get":         true,
		"module":      true,
		"require":     true,
		"number":      true,
		"set":         true,
		"string":      true,
		"symbol":      true,
		"type":        true,
		"from":        true,
		"of":          true,
		"async":       true,
		"await":       true,
	}

	_, exists := keywords[word]
	return exists
}
