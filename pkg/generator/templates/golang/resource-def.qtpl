{% import "github.com/apibrew/apibrew/pkg/model" %}
{% import "strings" %}
{% import "google.golang.org/protobuf/types/known/structpb" %}

{%- func GenerateStructDef(value *structpb.Value) -%}
  {%- collapsespace -%}
  {%- if value == nil -%}
    nil
  {%- elseif value.GetStringValue() != "" -%}
    structpb.NewStringValue("{%s value.GetStringValue() %}")
  {%- elseif value.GetNumberValue() != 0 -%}
    structpb.NewNumberValue({%f value.GetNumberValue() %})
  {%- elseif value.GetBoolValue() != false -%}
    structpb.NewBoolValue({% if value.GetBoolValue() %}true{% else %}false{% endif %})
  {%- elseif value.GetListValue() != nil -%}
    structpb.NewListValue(&structpb.ListValue{
                          			Values: []*structpb.Value{
                          				{% for _, item := range value.GetListValue().Values -%}
                          				{%-= GenerateStructDef(item) -%},
                          				{% endfor -%}
                          			},
                          		})
  {%- elseif value.GetStructValue() != nil -%}
    structpb.NewStructValue(&structpb.Struct{
                          			Fields: map[string]*structpb.Value{
                          				{% for key, item := range value.GetStructValue().Fields -%}
                          				"{%s key %}": {%-= GenerateStructDef(item) -%},
                          				{% endfor -%}
                          			},
                          		})
  {%- elseif value.GetNullValue() != 0 -%}
    nil
  {%- else -%}
    nil
  {%- endif -%}
  {%- endcollapsespace -%}
  {%- endfunc -%}

{%- func GeneratePropertyDef(resource *model.Resource, property *model.ResourceProperty) -%}{
        Name:     "{%s property.Name %}",
        Type:     model.ResourceProperty_{%s property.Type.String() %},
        {%- if property.Length > 0 %}Length:   {%d int(property.Length) %},
        {% endif-%}
        {%- if property.Required %}Required: true,
        {% endif-%}
        {%- if property.Unique %}Unique: true,
        {% endif-%}
        {%- if property.Immutable %}Immutable: true,
        {% endif-%}
        {%- if property.DefaultValue != nil %}DefaultValue: {%-= GenerateStructDef(property.DefaultValue) -%},
        {% endif-%}
        {%- if property.TypeRef != nil %}TypeRef: util.Pointer("{%s *property.TypeRef %}"),
        {% endif-%}
        {%- if property.Item != nil %}Item: &model.ResourceProperty{%-= GeneratePropertyDef(resource, property.Item) -%},
        {% endif-%}
        {%- if property.ExampleValue != nil %}ExampleValue: {%-= GenerateStructDef(property.ExampleValue) -%},
        {% endif-%}
        {%- if property.EnumValues != nil %}EnumValues: []string{{%- for _, item := range property.EnumValues -%}"{%s item %}",{%- endfor -%}},
        {% endif-%}
        {%= GenerateAnnotationsDef(property.Annotations) %}
    }{%- endfunc -%}

{%- func GenerateAnnotationsDef(annotations map[string]string) %}
        {%- if len(annotations) > 0 -%}
        Annotations: map[string]string{
			{%- for key, value := range annotations -%}
			"{%s key %}": "{%s value %}",
			{%- endfor -%}
	    },
	    {% endif %}
{%- endfunc -%}

{%- func GenerateResourceDefCode(pkg string, resource *model.Resource) -%}
{%- code pkgParts := strings.Split(pkg, "/") -%}
{%- code pkgName := pkgParts[len(pkgParts)-1] -%}
// Code generated by apbr generate. DO NOT EDIT.
// versions:
// 	apbr generate v1.2

//go:build !codeanalysis
package {%s pkgName %}

import (
    {% for _, imp := range getImportsForResourceDef(resource) -%}
    "{%s imp %}"
    {% endfor -%}
)

var {%= GoName(resource.Name) %}Resource = &model.Resource{
	Name:      "{%s resource.Name %}",
	Namespace: "{%s resource.Namespace %}",
    {%- if resource.Title != nil %}Title: util.Pointer("{%s *resource.Title %}"),
    {% endif -%}
    {%- if resource.Description != nil %}Description: util.Pointer("{%s *resource.Description %}"),
    {% endif -%}
	{%- if len(resource.Types) > 0 -%}
	Types: []*model.ResourceSubType{
	    {%- for _, typ := range resource.Types -%}
		{
		    Name: "{%s typ.Name %}",
		    {%- if typ.Title != "" %}Title: "{%s typ.Title %}",
		    {% endif -%}
		    {%- if typ.Description != "" %}Description: "{%s typ.Description %}",
		    {% endif -%}
		    Properties: []*model.ResourceProperty{
		        {%- for _, property := range typ.Properties -%}
		        {%= GeneratePropertyDef(resource, property) %},
		        {%- endfor -%}
		    },
		    {%-= GenerateAnnotationsDef(resource.Annotations) -%}
		},
		{%- endfor -%}
	},
	{%- endif -%}
	Properties: []*model.ResourceProperty{
	    {%- for _, property := range resource.Properties -%}
		{%= GeneratePropertyDef(resource, property) %},
		{%- endfor -%}
	},
	{%- if len(resource.Indexes) > 0 -%}
	Indexes: []*model.ResourceIndex{
        {%- for _, index := range resource.Indexes -%}
        {
            Properties: []*model.ResourceIndexProperty{
                {%- for _, property := range index.Properties -%}
                {
                    Name: "{%s property.Name %}",
                    Order: model.Order_{%s property.Order.String() %},
                },
                {%- endfor -%}
            },
            IndexType: model.ResourceIndexType_{%s index.IndexType.String() %},
            {%- if index.Unique %}Unique: true,
            {% endif-%}
            {%= GenerateAnnotationsDef(index.Annotations) %}
        },
        {%- endfor -%}
    },
    {%- endif -%}
    {%- if resource.Virtual %}Virtual: true,
    {% endif-%}
    {%- if resource.Immutable %}Immutable: true,
    {% endif-%}
    {%- if resource.Abstract %}Abstract: true,
    {% endif-%}
    {%- if resource.CheckReferences %}CheckReferences: true,
    {% endif-%}
	{%-= GenerateAnnotationsDef(resource.Annotations) -%}
}
{%- endfunc -%}