{% import "github.com/apibrew/apibrew/pkg/model" %}
{% import "strings" %}

{%- func PropertyTo(resource *model.Resource, property *model.ResourceProperty, isCollectionItem bool, varName string) -%}
    var {%s varName %}_mapped *structpb.Value

    {%- if property.Type == model.ResourceProperty_ENUM -%}
         var {%s varName %}_err error
         {%s varName %}_mapped, {%s varName %}_err = types.ByResourcePropertyType(model.ResourceProperty_{%s property.Type.String() %}).Pack(string({%= NormalizePointer(property, varName, isCollectionItem, false) %}))
        if {%s varName %}_err != nil {
            panic({%s varName %}_err)
        }
    {%- elseif property.Type == model.ResourceProperty_STRUCT -%}
            {%s varName %}_mapped = structpb.NewStructValue(&structpb.Struct{Fields: {%= GoName(getSubTypeNameByProperty(resource, property)) %}MapperInstance.ToProperties({%= NormalizePointer(property, varName , isCollectionItem, true) %})})
    {%- elseif property.Type == model.ResourceProperty_MAP -%}
        var {%s varName %}_st *structpb.Struct = new(structpb.Struct)
        {%s varName %}_st.Fields = make(map[string]*structpb.Value)
        for key, value := range {%s varName %} {
            {% code subVarName := "var_1x" %}
            {%s subVarName %} := value
            {%= PropertyTo(resource, property.Item, true, subVarName) %}
            {%s varName %}_st.Fields[key] = {%s subVarName %}_mapped
        }
        {%s varName %}_mapped = structpb.NewStructValue({%s varName %}_st)
    {%- elseif property.Type == model.ResourceProperty_LIST -%}
        var {%s varName %}_l []*structpb.Value
        for _, value := range {%s varName %} {
            {% code subVarName := "var_5x"  %}
            {%s subVarName %} := value
            {%= PropertyTo(resource, property.Item, true, subVarName) %}
            {%s varName %}_l = append({%s varName %}_l, {%s subVarName %}_mapped)
        }
        {%s varName %}_mapped = structpb.NewListValue(&structpb.ListValue{Values: {%s varName %}_l})
    {%- elseif property.Type == model.ResourceProperty_REFERENCE -%}
        {%s varName %}_mapped = structpb.NewStructValue(&structpb.Struct{Fields: {%= GoName(property.Reference.Resource) %}MapperInstance.ToProperties({%= NormalizePointer(property, varName, isCollectionItem, true) %})})
    {%- else -%}
        var {%s varName %}_err error
        {%s varName %}_mapped, {%s varName %}_err = types.ByResourcePropertyType(model.ResourceProperty_{%s property.Type.String() %}).Pack({%= NormalizePointer(property, varName, isCollectionItem, false) %})
        if {%s varName %}_err != nil {
            panic({%s varName %}_err)
        }
    {%- endif -%}
{%- endfunc -%}




{%- func GenerateResourceMappingCode(pkg string, resource *model.Resource, resources []*model.Resource) -%}

{%= GenerateResourceMappingHeaderCode(pkg, resource, resources) %}
{%= GenerateResourceMappingBodyCode(pkg, resource, GoName(resource.Name), resource.Properties, resources) %}
{%= UGenerateResourceMappingBodyCode(pkg, resource, GoName(resource.Name), resource.Properties, resources) %}

{%- for _, subType := range getAllSubTypes(resource) -%}
{%- code typeName := GoName(getSubTypeName(resource, subType)) -%}
{%= GenerateResourceMappingBodyCode(pkg, resource, typeName, subType.Properties, resources ) %}
{%= UGenerateResourceMappingBodyCode(pkg, resource, typeName, subType.Properties, resources ) %}
{%- endfor -%}

{%- endfunc -%}


{%- func GenerateResourceMappingHeaderCode(pkg string, resource *model.Resource, resources []*model.Resource) -%}
{%- code pkgParts := strings.Split(pkg, "/") -%}
{%- code pkgName := pkgParts[len(pkgParts)-1] -%}
// Code generated by apbr generate. DO NOT EDIT.
// versions:
// 	apbr generate v1.2

//go:build !codeanalysis
package {%s pkgName %}

import (
    "github.com/apibrew/apibrew/pkg/model"
    "github.com/apibrew/apibrew/pkg/types"
    "google.golang.org/protobuf/types/known/structpb"
    "github.com/apibrew/apibrew/pkg/abs"
    "github.com/apibrew/apibrew/pkg/formats/unstructured"
)

{%- for _, importLine := range getImportsForMapping(resource) -%}
import "{%s importLine %}"
{%- endfor -%}
{%- endfunc -%}

{%- func GenerateResourceMappingBodyCode(pkg string, resource *model.Resource, typeName string, properties []*model.ResourceProperty, resources []*model.Resource) -%}
type {%s typeName %}Mapper struct {
}

func New{%s typeName %}Mapper() *{%s typeName %}Mapper {
    return &{%s typeName %}Mapper{}
}

var {%s typeName %}MapperInstance = New{%s typeName %}Mapper()

func (m *{%s typeName %}Mapper) New() *{%s typeName %} {
    return &{%s typeName %}{}
}

func (m *{%s typeName %}Mapper) ResourceIdentity() abs.ResourceIdentity {
    return abs.ResourceIdentity{
       Namespace: "{%s resource.Namespace %}",
       Name: "{%s resource.Name %}",
    }
}

{% if typeName == resource.Name %}
func (m *{%s typeName %}Mapper) ToRecord({%= GoVarName(typeName)%} *{%s typeName %}) abs.NewRecordLike() {
    var rec = &model.Record{}
    rec.Properties = m.ToProperties({%= GoVarName(typeName)%})
    return rec
}

func (m *{%s typeName %}Mapper) FromRecord(record abs.NewRecordLike()) *{%s typeName %}  {
    return m.FromProperties(record.Properties)
}
{% endif %}

func (m *{%s typeName %}Mapper) ToProperties({%= GoVarName(typeName)%} *{%s typeName %}) map[string]*structpb.Value {
    var properties = make(map[string]*structpb.Value)

    {%- for _, property := range properties -%}
    {% code varName := "var_" + GoName(property.Name) %}
    {%s varName %} := {%= GoVarName(typeName) %}.{%= GoName(property.Name) %}

        {%- if isNullable(property) -%}
    if {%s varName %} != nil {
        {%-= PropertyTo(resource, property, false, varName) -%}
        properties["{%s property.Name %}"] = {%s varName %}_mapped
    }
    {%- else -%}
    {%-= PropertyTo(resource, property, false, varName) -%}
        properties["{%s property.Name %}"] = {%s varName %}_mapped
    {%- endif -%}
    {%- endfor -%}
    return properties
}

func (m *{%s typeName %}Mapper) FromProperties(properties map[string]*structpb.Value) *{%s typeName %}  {
    var s = m.New()
{%- for _, property := range properties -%}
    if properties["{%s property.Name %}"] != nil && properties["{%s property.Name %}"].AsInterface() != nil {
        {% code valueVarName := "var_" + GoName(property.Name) %}
        {%s valueVarName %} := properties["{%s property.Name %}"]
        {%= PreparePropertyFromMapping(resource, property, valueVarName, false) %}
        s.{%= GoName(property.Name) %} = {%s valueVarName %}_mapped
    }
{%- endfor -%}
    return s
}

{% endfunc %}

{%- func PreparePropertyFromMapping(resource *model.Resource, property *model.ResourceProperty, valueVarName string, insideCollection bool) -%}
{%- if property.Type == model.ResourceProperty_REFERENCE -%}
        {%s valueVarName %}_mapped := {%= GoName(property.Reference.Resource) %}MapperInstance.FromProperties({%s valueVarName %}.GetStructValue().Fields)
    {%- elseif property.Type == model.ResourceProperty_MAP -%}
        {%s valueVarName %}_mapped := make({%= PropPureGoType(resource, property, property.Name) %})
        for k, v := range {%s valueVarName %}.GetStructValue().Fields {
            {% code subValueVarName := "var_3x" %}
            {%s subValueVarName %} := v
            {%= PreparePropertyFromMapping(resource, property.Item, subValueVarName, true) %}
            {%s valueVarName %}_mapped[k] = {%s subValueVarName %}_mapped
        }
    {%- elseif property.Type == model.ResourceProperty_LIST -%}
        {%s valueVarName %}_mapped := []{%= PropPureGoType(resource, property.Item, property.Name) %}{}
        for _, v := range {%s valueVarName %}.GetListValue().Values {
            {% code subValueVarName := "var_4x" %}
            {%s subValueVarName %} := v
            {%= PreparePropertyFromMapping(resource, property.Item, subValueVarName, true) %}
            {%s valueVarName %}_mapped = append({%s valueVarName %}_mapped, {%s subValueVarName %}_mapped)
        }
    {%- elseif property.Type == model.ResourceProperty_ENUM -%}
        {%- if isNullable(property) && !insideCollection -%}
        {%s valueVarName %}_mapped := new({%= PropPureGoType(resource, property, property.Name) %})
        *{%s valueVarName %}_mapped = ({%= PropPureGoType(resource, property, property.Name) %})({%s valueVarName %}.GetStringValue())
        {%- else -%}
        {%s valueVarName %}_mapped := ({%= PropPureGoType(resource, property, property.Name) %})({%s valueVarName %}.GetStringValue())
        {%- endif -%}
    {%- elseif property.Type == model.ResourceProperty_STRUCT -%}
        var mappedValue = {%= GoName(getSubTypeNameByProperty(resource, property)) %}MapperInstance.FromProperties({%s valueVarName %}.GetStructValue().Fields)
        {% if property.Required || insideCollection %}
        {%s valueVarName %}_mapped := *mappedValue
        {% else %}
        {%s valueVarName %}_mapped := mappedValue
        {% endif %}
    {%- elseif property.Type == model.ResourceProperty_OBJECT -%}
        {%- if isNullable(property) && !insideCollection -%}
            {%s valueVarName %}_mapped := new(interface{})
            *{%s valueVarName %}_mapped = unstructured.FromValue({%s valueVarName %})
        {%- else -%}
            {%s valueVarName %}_mapped := unstructured.FromValue({%s valueVarName %})
        {%- endif -%}
    {%- else -%}
        val, err := types.ByResourcePropertyType(model.ResourceProperty_{%s property.Type.String() %}).UnPack({%s valueVarName %})

        if err != nil {
            panic(err)
        }

        {%- if isNullable(property) && !insideCollection -%}
        {%s valueVarName %}_mapped := new({%= PropPureGoType(resource, property, property.Name) %})
        *{%s valueVarName %}_mapped = val.({%= PropPureGoType(resource, property, property.Name) %})
        {%- else -%}
        {%s valueVarName %}_mapped := val.({%= PropPureGoType(resource, property, property.Name) %})
        {%- endif -%}
    {%- endif -%}
{%- endfunc -%}