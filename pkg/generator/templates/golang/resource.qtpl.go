// Code generated by qtc from "resource.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line templates/golang/resource.qtpl:1
package golang

//line templates/golang/resource.qtpl:1
import "github.com/apibrew/apibrew/pkg/model"

//line templates/golang/resource.qtpl:2
import "github.com/apibrew/apibrew/pkg/util"

//line templates/golang/resource.qtpl:3
import "strings"

//line templates/golang/resource.qtpl:7
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line templates/golang/resource.qtpl:7
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line templates/golang/resource.qtpl:7
func StreamPropertyType(qw422016 *qt422016.Writer, resource *model.Resource, property *model.ResourceProperty) {
//line templates/golang/resource.qtpl:7
	qw422016.N().S(`aa
`)
//line templates/golang/resource.qtpl:9
}

//line templates/golang/resource.qtpl:9
func WritePropertyType(qq422016 qtio422016.Writer, resource *model.Resource, property *model.ResourceProperty) {
//line templates/golang/resource.qtpl:9
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/golang/resource.qtpl:9
	StreamPropertyType(qw422016, resource, property)
//line templates/golang/resource.qtpl:9
	qt422016.ReleaseWriter(qw422016)
//line templates/golang/resource.qtpl:9
}

//line templates/golang/resource.qtpl:9
func PropertyType(resource *model.Resource, property *model.ResourceProperty) string {
//line templates/golang/resource.qtpl:9
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/golang/resource.qtpl:9
	WritePropertyType(qb422016, resource, property)
//line templates/golang/resource.qtpl:9
	qs422016 := string(qb422016.B)
//line templates/golang/resource.qtpl:9
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/golang/resource.qtpl:9
	return qs422016
//line templates/golang/resource.qtpl:9
}

//line templates/golang/resource.qtpl:13
func StreamGenerateResourceCode(qw422016 *qt422016.Writer, pkg string, resource *model.Resource, resources []*model.Resource) {
//line templates/golang/resource.qtpl:14
	pkgParts := strings.Split(pkg, "/")

//line templates/golang/resource.qtpl:15
	pkgName := pkgParts[len(pkgParts)-1]

//line templates/golang/resource.qtpl:16
	typeName := util.Capitalize(util.SnakeCaseToCamelCase(resource.Name))

//line templates/golang/resource.qtpl:16
	qw422016.N().S(`package `)
//line templates/golang/resource.qtpl:17
	qw422016.E().S(pkgName)
//line templates/golang/resource.qtpl:17
	qw422016.N().S(`

import "time"
import "reflect"
import "github.com/apibrew/apibrew/pkg/model"
import "github.com/apibrew/apibrew/pkg/types"
import "google.golang.org/protobuf/types/known/structpb"

type `)
//line templates/golang/resource.qtpl:25
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:25
	qw422016.N().S(` struct {
`)
//line templates/golang/resource.qtpl:26
	for _, property := range resource.Properties {
//line templates/golang/resource.qtpl:26
		qw422016.N().S(`	`)
//line templates/golang/resource.qtpl:27
		qw422016.E().S(property.Name)
//line templates/golang/resource.qtpl:27
		qw422016.N().S(` `)
//line templates/golang/resource.qtpl:27
		StreamPropertyType(qw422016, resource, property)
//line templates/golang/resource.qtpl:28
	}
//line templates/golang/resource.qtpl:28
	qw422016.N().S(`}

func (s *`)
//line templates/golang/resource.qtpl:31
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:31
	qw422016.N().S(`) GetId() string {
	return s.Id
}

func (s *`)
//line templates/golang/resource.qtpl:35
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:35
	qw422016.N().S(`) GetVersion() int32 {
	return s.Version
}

func (s *`)
//line templates/golang/resource.qtpl:39
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:39
	qw422016.N().S(`) GetCreatedBy() string {
	return s.CreatedBy
}

func (s *`)
//line templates/golang/resource.qtpl:43
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:43
	qw422016.N().S(`) GetUpdatedBy() *string {
	return s.UpdatedBy
}

func (s *`)
//line templates/golang/resource.qtpl:47
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:47
	qw422016.N().S(`) GetCreatedOn() time.Time {
	return s.CreatedOn
}

func (s *`)
//line templates/golang/resource.qtpl:51
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:51
	qw422016.N().S(`) GetUpdatedOn() *time.Time {
	return s.UpdatedOn
}

func (s *`)
//line templates/golang/resource.qtpl:55
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:55
	qw422016.N().S(`) GetName() string {
	return s.Name
}

func (s *`)
//line templates/golang/resource.qtpl:59
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:59
	qw422016.N().S(`) GetDescription() *string {
	return s.Description
}

func (s *`)
//line templates/golang/resource.qtpl:63
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:63
	qw422016.N().S(`) GetBackend() `)
//line templates/golang/resource.qtpl:63
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:63
	qw422016.N().S(`BackendType {
	return s.Backend
}

func (s *`)
//line templates/golang/resource.qtpl:67
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:67
	qw422016.N().S(`) GetOptions() map[string]string {
	return s.Options
}

func (s *`)
//line templates/golang/resource.qtpl:71
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:71
	qw422016.N().S(`) ToRecord() *model.Record {
	var rec = &model.Record{}
	rec.Properties = s.ToProperties()

	return rec
}

func (s *`)
//line templates/golang/resource.qtpl:78
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:78
	qw422016.N().S(`) FromRecord(record *model.Record) {
	s.FromProperties(record.Properties)
}

func (s *`)
//line templates/golang/resource.qtpl:82
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:82
	qw422016.N().S(`) FromProperties(properties map[string]*structpb.Value) {

	if properties["id"] != nil {

		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(properties["id"])

		if err != nil {
			panic(err)
		}

		s.Id = val.(string)

	}

	if properties["version"] != nil {

		val, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).UnPack(properties["version"])

		if err != nil {
			panic(err)
		}

		s.Version = val.(int32)

	}

	if properties["createdBy"] != nil {

		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(properties["createdBy"])

		if err != nil {
			panic(err)
		}

		s.CreatedBy = val.(string)

	}

	if properties["updatedBy"] != nil {

		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(properties["updatedBy"])

		if err != nil {
			panic(err)
		}

		s.UpdatedBy = new(string)
		*s.UpdatedBy = val.(string)

	}

	if properties["createdOn"] != nil {

		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(properties["createdOn"])

		if err != nil {
			panic(err)
		}

		s.CreatedOn = val.(time.Time)

	}

	if properties["updatedOn"] != nil {

		val, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).UnPack(properties["updatedOn"])

		if err != nil {
			panic(err)
		}

		s.UpdatedOn = new(time.Time)
		*s.UpdatedOn = val.(time.Time)

	}

	if properties["name"] != nil {

		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(properties["name"])

		if err != nil {
			panic(err)
		}

		s.Name = val.(string)

	}

	if properties["description"] != nil {

		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).UnPack(properties["description"])

		if err != nil {
			panic(err)
		}

		s.Description = new(string)
		*s.Description = val.(string)

	}

	if properties["backend"] != nil {

		val, err := types.ByResourcePropertyType(model.ResourceProperty_STRUCT).UnPack(properties["backend"])

		if err != nil {
			panic(err)
		}

		s.Backend = `)
//line templates/golang/resource.qtpl:191
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:191
	qw422016.N().S(`BackendType(val.(string))

	}

	if properties["options"] != nil {

		val, err := types.ByResourcePropertyType(model.ResourceProperty_MAP).UnPack(properties["options"])

		if err != nil {
			panic(err)
		}

		mapData := val.(map[string]interface{})
		s.Options = make(map[string]string)

		for k, v := range mapData {
			s.Options[k] = v.(string)
		}
	}

}

func (s *`)
//line templates/golang/resource.qtpl:213
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:213
	qw422016.N().S(`) ToProperties() map[string]*structpb.Value {
	var properties = make(map[string]*structpb.Value)

	Id, err := types.ByResourcePropertyType(model.ResourceProperty_UUID).Pack(s.Id)
	if err != nil {
		panic(err)
	}
	properties["id"] = Id

	Version, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(s.Version)
	if err != nil {
		panic(err)
	}
	properties["version"] = Version

	CreatedBy, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(s.CreatedBy)
	if err != nil {
		panic(err)
	}
	properties["createdBy"] = CreatedBy

	if s.UpdatedBy != nil {

		UpdatedBy, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*s.UpdatedBy)
		if err != nil {
			panic(err)
		}
		properties["updatedBy"] = UpdatedBy

	}

	CreatedOn, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(s.CreatedOn)
	if err != nil {
		panic(err)
	}
	properties["createdOn"] = CreatedOn

	if s.UpdatedOn != nil {

		UpdatedOn, err := types.ByResourcePropertyType(model.ResourceProperty_TIMESTAMP).Pack(*s.UpdatedOn)
		if err != nil {
			panic(err)
		}
		properties["updatedOn"] = UpdatedOn

	}

	Name, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(s.Name)
	if err != nil {
		panic(err)
	}
	properties["name"] = Name

	if s.Description != nil {

		Description, err := types.ByResourcePropertyType(model.ResourceProperty_STRING).Pack(*s.Description)
		if err != nil {
			panic(err)
		}
		properties["description"] = Description

	}

	Backend, err := types.ByResourcePropertyType(model.ResourceProperty_INT32).Pack(s.Backend)
	if err != nil {
		panic(err)
	}
	properties["backend"] = Backend

	return properties
}

func (s *`)
//line templates/golang/resource.qtpl:285
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:285
	qw422016.N().S(`) GetResourceName() string {
	return "data-source"
}

func (s *`)
//line templates/golang/resource.qtpl:289
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:289
	qw422016.N().S(`) GetNamespace() string {
	return "system"
}

func (s *`)
//line templates/golang/resource.qtpl:293
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:293
	qw422016.N().S(`) Equals(other *`)
//line templates/golang/resource.qtpl:293
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:293
	qw422016.N().S(`) bool {
	return reflect.DeepEqual(s, other)
}

func (s *`)
//line templates/golang/resource.qtpl:297
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:297
	qw422016.N().S(`) Same(other *`)
//line templates/golang/resource.qtpl:297
	qw422016.E().S(typeName)
//line templates/golang/resource.qtpl:297
	qw422016.N().S(`) bool {
	return s.Equals(other)
}



 `)
//line templates/golang/resource.qtpl:303
}

//line templates/golang/resource.qtpl:303
func WriteGenerateResourceCode(qq422016 qtio422016.Writer, pkg string, resource *model.Resource, resources []*model.Resource) {
//line templates/golang/resource.qtpl:303
	qw422016 := qt422016.AcquireWriter(qq422016)
//line templates/golang/resource.qtpl:303
	StreamGenerateResourceCode(qw422016, pkg, resource, resources)
//line templates/golang/resource.qtpl:303
	qt422016.ReleaseWriter(qw422016)
//line templates/golang/resource.qtpl:303
}

//line templates/golang/resource.qtpl:303
func GenerateResourceCode(pkg string, resource *model.Resource, resources []*model.Resource) string {
//line templates/golang/resource.qtpl:303
	qb422016 := qt422016.AcquireByteBuffer()
//line templates/golang/resource.qtpl:303
	WriteGenerateResourceCode(qb422016, pkg, resource, resources)
//line templates/golang/resource.qtpl:303
	qs422016 := string(qb422016.B)
//line templates/golang/resource.qtpl:303
	qt422016.ReleaseByteBuffer(qb422016)
//line templates/golang/resource.qtpl:303
	return qs422016
//line templates/golang/resource.qtpl:303
}
