{% import "github.com/apibrew/apibrew/pkg/model" %}
{% import "google.golang.org/protobuf/types/known/structpb" %}

{%- func GenerateStructDef(value *structpb.Value) -%}
  {%- collapsespace -%}
  {%- if value == nil -%}
    nil
  {%- elseif value.GetStringValue() != "" -%}
    structpb.NewStringValue("{%s value.GetStringValue() %}")
  {%- elseif value.GetNumberValue() != 0 -%}
    structpb.NewNumberValue({%f value.GetNumberValue() %})
  {%- elseif value.GetBoolValue() != false -%}
    structpb.NewBoolValue({% if value.GetBoolValue() %}true{% else %}false{% endif %})
  {%- elseif value.GetListValue() != nil -%}
    structpb.NewListValue(&structpb.ListValue{
                          			Values: []*structpb.Value{
                          				{% for _, item := range value.GetListValue().Values -%}
                          				{%-= GenerateStructDef(item) -%},
                          				{% endfor -%}
                          			},
                          		})
  {%- elseif value.GetStructValue() != nil -%}
    structpb.NewStructValue(&structpb.Struct{
                          			Fields: map[string]*structpb.Value{
                          				{% for key, item := range value.GetStructValue().Fields) -%}
                          				"{%s key %}": {%-= GenerateStructDef(item) -%},
                          				{% endfor -%}
                          			},
                          		})
  {%- elseif value.GetNullValue() != 0 -%}
    nil
  {%- else -%}
    nil
  {%- endif -%}
  {%- endcollapsespace -%}
  {%- endfunc -%}

{%- func GeneratePropertyDef(resource *model.Resource, property *model.ResourceProperty) -%}{
        Name:     "{%s property.Name %}",
        Type:     model.ResourceProperty_{%s property.Type.String() %},
        {%- if property.Length > 0 %}Length:   {%d int(property.Length) %},
        {% endif-%}
        {%- if property.Required %}Required: true,
        {% endif-%}
        {%- if property.Unique %}Unique: true,
        {% endif-%}
        {%- if property.Immutable %}Immutable: true,
        {% endif-%}
        {%- if property.DefaultValue != nil %}DefaultValue: {%-= GenerateStructDef(property.DefaultValue) -%},
        {% endif-%}
        {%- if property.ExampleValue != nil %}ExampleValue: {%-= GenerateStructDef(property.ExampleValue) -%},
        {% endif-%}
        {%= GenerateAnnotationsDef(property.Annotations) %}
    }{%- endfunc -%}

{%- func GenerateAnnotationsDef(annotations map[string]string) %}
        {%- if len(annotations) > 0 -%}
        Annotations: map[string]string{
			{%- for key, value := range annotations -%}
			"{%s key %}": "{%s value %}",
			{%- endfor -%}
	    },
	    {% endif %}
{%- endfunc -%}

{%- func GenerateResourceDefCode(resource *model.Resource) -%}
{%- collapsespace -%}
new Resource()
      .withName("{%s resource.Name %}")
	  .withNamespace(new Namespace().withName({%s resource.Namespace %}))
	  {% if resource.Title != nil %}.withTitle("{%s *resource.Title %}"){% endif %}
	  {% if resource.Description != nil %}.withDescription("{%s *resource.Description %}"){% endif %}
	{%- if len(resource.Types) > 0 -%}
      .withSubTypes(
        {%- for _, typ := range resource.Types -%}
        new ResourceSubType()
            .withName("{%s typ.Name %}")
            {%- if typ.Title != "" %}.withTitle("{%s typ.Title %}")
            {% endif -%}
            {%- if typ.Description != "" %}.withDescription("{%s typ.Description %}")
            {% endif -%}
            .withProperties(
                {%- for _, property := range typ.Properties -%}
                {%= GeneratePropertyDef(resource, property) %},
                {%- endfor -%}
            )
            {%-= GenerateAnnotationsDef(typ.Annotations) -%}
        )
        {%- endfor -%}
     )
    {%- endif -%}
	.withProperties(
        {%- for _, property := range resource.Properties -%}
        {%= GeneratePropertyDef(resource, property) %},
        {%- endfor -%}
    )
	{%- if len(resource.Indexes) > 0 -%}
	.withIndexes(
        {%- for _, index := range resource.Indexes -%}
        new ResourceIndex()
            .withUnique({% if index.Unique %}true{% else %}false{% endif %})
            .withProperties(
                {%- for _, property := range index.Properties -%}
                new ResourceIndexProperty()
                    .withName("{%s property.Name %}")
                    .withOrder(model.ResourceIndexProperty_{%s property.Order.String() %}),
                {%- endfor -%}
            )
            {%-= GenerateAnnotationsDef(index.Annotations) -%}
        )
        {%- endfor -%}
     )
    {%- endif -%}
    {%- if resource.Virtual %}.withVirtual(true),
    {% endif-%}
    {%- if resource.Immutable %}.withImmutable(true),
    {% endif-%}
    {%- if resource.Abstract %}.withAbstract(true),
    {% endif-%}
    {%- if resource.CheckReferences %}.withCheckReferences(true),
    {% endif-%}
    {%= GenerateAnnotationsDef(resource.Annotations) %}
}
{%- endcollapsespace -%}
{%- endfunc -%}