package model


import "time"
import "reflect"
import "github.com/tislib/data-handler/pkg/helper"
import "github.com/tislib/data-handler/pkg/model"
import "github.com/tislib/data-handler/pkg/client"
import "github.com/google/uuid"
import "github.com/tislib/data-handler/pkg/types"
import "google.golang.org/protobuf/types/known/structpb"

type {{ToCamel .resource.Name}} struct {
{{ range .resource.Properties }}
    {{ToCamel .Name}} {{PropGoType .}}
{{end}}
}

{{ with $resource := .resource }}
    {{ range .Properties }}
        func (s *{{ToCamel $resource.Name}}) Get{{ToCamel .Name}}() {{PropGoType .}} {
        return s.{{ToCamel .Name}}
        }
    {{end}}
{{end}}
func (s *{{ToCamel .resource.Name}}) ToRecord() *model.Record {
var rec = &model.Record{}
rec.Properties = s.ToProperties()

return rec
}

func (s *{{ToCamel .resource.Name}}) FromRecord(record *model.Record) {
s.FromProperties(record.Properties)
}

func (s *{{ToCamel .resource.Name}}) FromProperties(properties map[string]*structpb.Value) {
{{ range .resource.Properties }}
    if properties["{{.Name}}"] != nil {
    {{if eq .Type.String "REFERENCE" }}
        s.{{ToCamel .Name}} = new({{ToCamel .Reference.ReferencedResource}})
        s.{{ToCamel .Name}}.FromProperties(properties["{{.Name}}"].GetStructValue().Fields)
    {{else}}
        val, err := types.ByResourcePropertyType(model.ResourceProperty_{{.Type.String}}).UnPack(properties["{{.Name}}"])

        if err != nil {
        panic(err);
        }
        {{ if IsNullable . }}
            s.{{ToCamel .Name}} = new({{PropPureGoType .}})
            *s.{{ToCamel .Name}} = val.({{PropPureGoType .}})
        {{else}}
            s.{{ToCamel .Name}} = val.({{PropGoType .}})
        {{end}}
    {{end}}
    }
{{end}}
}

func (s *{{ToCamel .resource.Name}}) ToProperties() map[string]*structpb.Value {
var properties = make(map[string]*structpb.Value)

{{ range .resource.Properties }}
    {{ if IsNullable . }}
        if s.{{ToCamel .Name}} != nil {
    {{end}}
    {{if IsPrimitive .Type}}
        {{ToCamel .Name}}, err := types.ByResourcePropertyType(model.ResourceProperty_{{.Type.String}}).Pack({{ if IsNullable . }}*{{end}}s.{{ToCamel .Name}})
        if err != nil {
        panic(err)
        }
        properties["{{.Name}}"] = {{ToCamel .Name}}
    {{else if eq .Type.String "REFERENCE"}}
        properties["{{.Name}}"] = structpb.NewStructValue(&structpb.Struct{Fields: s.{{ToCamel .Name}}.ToProperties()})
    {{end}}
    {{ if IsNullable . }}
        }
    {{end}}
{{end}}

return properties
}

func (s *{{ToCamel .resource.Name}}) GetResourceName() string {
return "{{.resource.Name}}"
}

func (s *{{ToCamel .resource.Name}}) GetNamespace() string {
return "{{.resource.Namespace}}"
}

func (s *{{ToCamel .resource.Name}}) Equals(other *{{ToCamel .resource.Name}}) bool {
return reflect.DeepEqual(s, other)
}

func (s *{{ToCamel .resource.Name}}) Same(other *{{ToCamel .resource.Name}}) bool {
return s.Equals(other)
}

func New{{ToCamel .resource.Name}}Repository(dhClient client.DhClient) client.Repository[*{{ToCamel .resource.Name}}] {
return client.NewRepository[*{{ToCamel .resource.Name}}](dhClient, client.RepositoryParams[*{{ToCamel .resource.Name}}]{InstanceProvider: func() *{{ToCamel .resource.Name}} {
return new({{ToCamel .resource.Name}})
}})
}

{{ with $resource := .resource }}
    {{ range .Properties }}
        var {{ToCamel $resource.Name}}{{ToCamel .Name}} = client.DefineProperty[{{PropPureGoType .}},helper.{{ ToCamel (Lower .Type.String) }}QueryBuilder{{if eq .Type.String "REFERENCE" }}[{{PropPureGoType .}}]{{end}}]("{{.Name}}", model.ResourceProperty_{{.Type.String}}, helper.{{ ToCamel (Lower .Type.String) }}QueryBuilder{{if eq .Type.String "REFERENCE" }}[{{PropPureGoType .}}]{{end}}{PropName: "{{.Name}}"})
    {{end}}
{{end}}

