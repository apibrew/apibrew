{
  "components": {
    "schemas": {
      "AuthenticationRequest": {
        "properties": {
          "password": {
            "example": "admin",
            "type": "string"
          },
          "term": {
            "$ref": "#/components/schemas/TokenTerm"
          },
          "username": {
            "example": "admin",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "AuthenticationResponse": {
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "required": [
          "token"
        ]
      },
      "BooleanExpression": {
        "type": "object"
      },
      "Error": {
        "properties": {
          "code": {
            "type": "string"
          },
          "details": {
            "type": "object"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "NanoCode": {
        "description": "Nano code",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "type": "object",
            "x-item": 1,
            "x-type": "MAP"
          },
          "auditData": {
            "$ref": "#/components/schemas/NanoCodeAuditData"
          },
          "content": {
            "type": "string",
            "x-SQLType": "TEXT",
            "x-type": "STRING"
          },
          "contentFormat": {
            "default": "TEXT",
            "type": "string",
            "x-type": "ENUM"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "language": {
            "default": "JAVASCRIPT",
            "type": "string",
            "x-type": "ENUM"
          },
          "name": {
            "type": "string",
            "uniqueItems": true,
            "x-immutable": true,
            "x-type": "STRING"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          }
        },
        "required": [
          "id",
          "name",
          "content",
          "version",
          "language",
          "contentFormat"
        ],
        "title": "Code",
        "type": "object",
        "x-resource": "Code"
      },
      "NanoCodeAuditData": {
        "description": "Audit Data is a type that represents the audit data of a resource/record. ",
        "properties": {
          "createdBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "createdOn": {
            "example": "2024-04-14T10:47:09+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "TIMESTAMP"
          },
          "updatedBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "STRING"
          },
          "updatedOn": {
            "example": "2024-04-14T10:47:09+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "TIMESTAMP"
          }
        },
        "title": "Audit Data",
        "type": "object",
        "x-resource": "Code"
      },
      "NanoCronJob": {
        "description": "Cron Job",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "type": "object",
            "x-item": 1,
            "x-type": "MAP"
          },
          "auditData": {
            "$ref": "#/components/schemas/NanoCronJobAuditData"
          },
          "contentFormat": {
            "default": "TEXT",
            "type": "string",
            "x-type": "ENUM"
          },
          "expression": {
            "type": "string",
            "x-type": "STRING"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "language": {
            "default": "JAVASCRIPT",
            "type": "string",
            "x-type": "ENUM"
          },
          "lastExecutionError": {
            "type": "string",
            "x-type": "STRING"
          },
          "lastExecutionTime": {
            "format": "datetime",
            "type": "string",
            "x-type": "TIMESTAMP"
          },
          "name": {
            "type": "string",
            "uniqueItems": true,
            "x-immutable": true,
            "x-type": "STRING"
          },
          "source": {
            "type": "string",
            "x-SQLType": "TEXT",
            "x-type": "STRING"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          }
        },
        "required": [
          "contentFormat",
          "version",
          "id",
          "source",
          "name",
          "language",
          "expression"
        ],
        "title": "Cron Job",
        "type": "object",
        "x-resource": "CronJob"
      },
      "NanoCronJobAuditData": {
        "description": "Audit Data is a type that represents the audit data of a resource/record. ",
        "properties": {
          "createdBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "createdOn": {
            "example": "2024-04-14T10:47:09+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "TIMESTAMP"
          },
          "updatedBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "STRING"
          },
          "updatedOn": {
            "example": "2024-04-14T10:47:09+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "TIMESTAMP"
          }
        },
        "title": "Audit Data",
        "type": "object",
        "x-resource": "CronJob"
      },
      "NanoFunction": {
        "description": "Nano function",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "type": "object",
            "x-item": 1,
            "x-type": "MAP"
          },
          "auditData": {
            "$ref": "#/components/schemas/NanoFunctionAuditData"
          },
          "contentFormat": {
            "default": "TEXT",
            "type": "string",
            "x-type": "ENUM"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "language": {
            "default": "JAVASCRIPT",
            "type": "string",
            "x-type": "ENUM"
          },
          "name": {
            "type": "string",
            "uniqueItems": true,
            "x-immutable": true,
            "x-type": "STRING"
          },
          "source": {
            "type": "string",
            "x-SQLType": "TEXT",
            "x-type": "STRING"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          }
        },
        "required": [
          "id",
          "name",
          "source",
          "version",
          "language",
          "contentFormat"
        ],
        "title": "Function",
        "type": "object",
        "x-resource": "Function"
      },
      "NanoFunctionAuditData": {
        "description": "Audit Data is a type that represents the audit data of a resource/record. ",
        "properties": {
          "createdBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "createdOn": {
            "example": "2024-04-14T10:47:09+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "TIMESTAMP"
          },
          "updatedBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "STRING"
          },
          "updatedOn": {
            "example": "2024-04-14T10:47:09+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "TIMESTAMP"
          }
        },
        "title": "Audit Data",
        "type": "object",
        "x-resource": "Function"
      },
      "NanoScript": {
        "description": "Nano Script",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "type": "object",
            "x-item": 1,
            "x-type": "MAP"
          },
          "auditData": {
            "$ref": "#/components/schemas/NanoScriptAuditData"
          },
          "contentFormat": {
            "default": "TEXT",
            "type": "string",
            "x-type": "ENUM"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "language": {
            "default": "JAVASCRIPT",
            "type": "string",
            "x-type": "ENUM"
          },
          "output": {
            "type": "object",
            "x-type": "OBJECT"
          },
          "source": {
            "type": "string",
            "x-SQLType": "TEXT",
            "x-type": "STRING"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          }
        },
        "required": [
          "contentFormat",
          "id",
          "source",
          "version",
          "language"
        ],
        "title": "Script",
        "type": "object",
        "x-resource": "Script"
      },
      "NanoScriptAuditData": {
        "description": "Audit Data is a type that represents the audit data of a resource/record. ",
        "properties": {
          "createdBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "createdOn": {
            "example": "2024-04-14T10:47:09+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "TIMESTAMP"
          },
          "updatedBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "STRING"
          },
          "updatedOn": {
            "example": "2024-04-14T10:47:09+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "TIMESTAMP"
          }
        },
        "title": "Audit Data",
        "type": "object",
        "x-resource": "Script"
      },
      "RefreshTokenRequest": {
        "properties": {
          "term": {
            "$ref": "#/components/schemas/TokenTerm"
          },
          "token": {
            "example": "admin",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "RefreshTokenResponse": {
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token"
          }
        },
        "required": [
          "token"
        ]
      },
      "SearchRecordRequest": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "limit": {
            "type": "integer"
          },
          "offset": {
            "type": "integer"
          },
          "query": {
            "$ref": "#/components/schemas/BooleanExpression"
          },
          "resolveReferences": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "useHistory": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SystemAuditLog": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "example": {
              "CheckVersion": "true",
              "CommonType": "testType",
              "IgnoreIfExists": "true"
            },
            "type": "object",
            "x-SpecialProperty": "true",
            "x-item": 1,
            "x-type": "MAP"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "namespace": {
            "type": "string",
            "x-type": "STRING"
          },
          "operation": {
            "type": "string",
            "x-type": "ENUM"
          },
          "properties": {
            "type": "object",
            "x-type": "OBJECT"
          },
          "recordId": {
            "type": "string",
            "x-SourceDef": "record_id",
            "x-type": "STRING"
          },
          "resource": {
            "type": "string",
            "x-type": "STRING"
          },
          "time": {
            "format": "datetime",
            "type": "string",
            "x-type": "TIMESTAMP"
          },
          "username": {
            "type": "string",
            "x-type": "STRING"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          }
        },
        "required": [
          "id",
          "version",
          "namespace",
          "resource",
          "recordId",
          "time",
          "username",
          "operation"
        ],
        "type": "object",
        "x-resource": "AuditLog"
      },
      "SystemDataSource": {
        "properties": {
          "auditData": {
            "$ref": "#/components/schemas/SystemDataSourceAuditData"
          },
          "backend": {
            "type": "string",
            "x-type": "ENUM"
          },
          "description": {
            "type": "string",
            "x-AllowEmptyPrimitive": "true",
            "x-type": "STRING"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "name": {
            "type": "string",
            "uniqueItems": true,
            "x-IsHclLabel": "true",
            "x-type": "STRING"
          },
          "options": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "type": "object",
            "x-item": 1,
            "x-type": "MAP"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          }
        },
        "required": [
          "id",
          "version",
          "name",
          "backend",
          "options"
        ],
        "type": "object",
        "x-resource": "DataSource"
      },
      "SystemDataSourceAuditData": {
        "description": "Audit Data is a type that represents the audit data of a resource/record. ",
        "properties": {
          "createdBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "createdOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "TIMESTAMP"
          },
          "updatedBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "STRING"
          },
          "updatedOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "TIMESTAMP"
          }
        },
        "title": "Audit Data",
        "type": "object",
        "x-resource": "DataSource"
      },
      "SystemExtension": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "example": {
              "CheckVersion": "true",
              "CommonType": "testType",
              "IgnoreIfExists": "true"
            },
            "type": "object",
            "x-SpecialProperty": "true",
            "x-item": 1,
            "x-type": "MAP"
          },
          "auditData": {
            "$ref": "#/components/schemas/SystemExtensionAuditData"
          },
          "call": {
            "$ref": "#/components/schemas/SystemExtensionExternalCall"
          },
          "description": {
            "type": "string",
            "x-type": "STRING"
          },
          "finalizes": {
            "type": "boolean",
            "x-type": "BOOL"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "name": {
            "type": "string",
            "uniqueItems": true,
            "x-IsHclLabel": "true",
            "x-type": "STRING"
          },
          "order": {
            "format": "int32",
            "type": "number",
            "x-type": "INT32"
          },
          "responds": {
            "type": "boolean",
            "x-type": "BOOL"
          },
          "selector": {
            "$ref": "#/components/schemas/SystemExtensionEventSelector"
          },
          "sync": {
            "type": "boolean",
            "x-type": "BOOL"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          }
        },
        "required": [
          "id",
          "version",
          "name",
          "order",
          "finalizes",
          "sync",
          "responds",
          "call"
        ],
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionAuditData": {
        "description": "Audit Data is a type that represents the audit data of a resource/record. ",
        "properties": {
          "createdBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "createdOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "TIMESTAMP"
          },
          "updatedBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "STRING"
          },
          "updatedOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "TIMESTAMP"
          }
        },
        "title": "Audit Data",
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionBooleanExpression": {
        "properties": {
          "and": {
            "items": {
              "$ref": "#/components/schemas/SystemExtensionBooleanExpression"
            },
            "type": "array",
            "x-item": 17,
            "x-type": "LIST"
          },
          "equal": {
            "$ref": "#/components/schemas/SystemExtensionPairExpression"
          },
          "greaterThan": {
            "$ref": "#/components/schemas/SystemExtensionPairExpression"
          },
          "greaterThanOrEqual": {
            "$ref": "#/components/schemas/SystemExtensionPairExpression"
          },
          "in": {
            "$ref": "#/components/schemas/SystemExtensionPairExpression"
          },
          "isNull": {
            "$ref": "#/components/schemas/SystemExtensionExpression"
          },
          "lessThan": {
            "$ref": "#/components/schemas/SystemExtensionPairExpression"
          },
          "lessThanOrEqual": {
            "$ref": "#/components/schemas/SystemExtensionPairExpression"
          },
          "not": {
            "$ref": "#/components/schemas/SystemExtensionBooleanExpression"
          },
          "or": {
            "items": {
              "$ref": "#/components/schemas/SystemExtensionBooleanExpression"
            },
            "type": "array",
            "x-item": 17,
            "x-type": "LIST"
          },
          "regexMatch": {
            "$ref": "#/components/schemas/SystemExtensionRegexMatchExpression"
          }
        },
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionChannelCall": {
        "properties": {
          "channelKey": {
            "type": "string",
            "x-type": "STRING"
          }
        },
        "required": [
          "channelKey"
        ],
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionError": {
        "properties": {
          "code": {
            "type": "string",
            "x-type": "ENUM"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/SystemExtensionErrorField"
            },
            "type": "array",
            "x-item": 17,
            "x-type": "LIST"
          },
          "message": {
            "type": "string",
            "x-type": "STRING"
          }
        },
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionErrorField": {
        "properties": {
          "message": {
            "type": "string",
            "x-type": "STRING"
          },
          "property": {
            "type": "string",
            "x-type": "STRING"
          },
          "recordId": {
            "type": "string",
            "x-type": "STRING"
          },
          "value": {
            "type": "object",
            "x-type": "OBJECT"
          }
        },
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionEvent": {
        "properties": {
          "action": {
            "type": "string",
            "x-type": "ENUM"
          },
          "actionDescription": {
            "type": "string",
            "x-type": "STRING"
          },
          "actionName": {
            "type": "string",
            "x-type": "STRING"
          },
          "actionSummary": {
            "type": "string",
            "x-type": "STRING"
          },
          "annotations": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "example": {
              "CheckVersion": "true",
              "CommonType": "testType",
              "IgnoreIfExists": "true"
            },
            "type": "object",
            "x-SpecialProperty": "true",
            "x-item": 1,
            "x-type": "MAP"
          },
          "error": {
            "$ref": "#/components/schemas/SystemExtensionError"
          },
          "finalizes": {
            "type": "boolean",
            "x-type": "BOOL"
          },
          "id": {
            "type": "string",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "input": {
            "type": "object",
            "x-type": "OBJECT"
          },
          "output": {
            "type": "object",
            "x-type": "OBJECT"
          },
          "recordSearchParams": {
            "$ref": "#/components/schemas/SystemExtensionRecordSearchParams"
          },
          "records": {
            "items": {
              "$ref": "#/components/schemas/SystemRecord"
            },
            "type": "array",
            "x-item": 15,
            "x-type": "LIST"
          },
          "resource": {
            "$ref": "#/components/schemas/SystemResource"
          },
          "sync": {
            "type": "boolean",
            "x-type": "BOOL"
          },
          "time": {
            "format": "datetime",
            "type": "string",
            "x-type": "TIMESTAMP"
          },
          "total": {
            "format": "int64",
            "type": "number",
            "x-type": "INT64"
          }
        },
        "required": [
          "id",
          "action"
        ],
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionEventSelector": {
        "properties": {
          "actions": {
            "items": {
              "type": "string",
              "x-TypeName": "EventAction",
              "x-type": "ENUM"
            },
            "type": "array",
            "x-item": 16,
            "x-type": "LIST"
          },
          "annotations": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "example": {
              "CheckVersion": "true",
              "CommonType": "testType",
              "IgnoreIfExists": "true"
            },
            "type": "object",
            "x-SpecialProperty": "true",
            "x-item": 1,
            "x-type": "MAP"
          },
          "ids": {
            "items": {
              "type": "string",
              "x-type": "STRING"
            },
            "type": "array",
            "x-item": 1,
            "x-type": "LIST"
          },
          "namespaces": {
            "items": {
              "type": "string",
              "x-type": "STRING"
            },
            "type": "array",
            "x-item": 1,
            "x-type": "LIST"
          },
          "recordSelector": {
            "$ref": "#/components/schemas/SystemExtensionBooleanExpression"
          },
          "resources": {
            "items": {
              "type": "string",
              "x-type": "STRING"
            },
            "type": "array",
            "x-item": 1,
            "x-type": "LIST"
          }
        },
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionExpression": {
        "properties": {
          "property": {
            "type": "string",
            "x-type": "STRING"
          },
          "value": {
            "type": "object",
            "x-type": "OBJECT"
          }
        },
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionExternalCall": {
        "properties": {
          "channelCall": {
            "$ref": "#/components/schemas/SystemExtensionChannelCall"
          },
          "functionCall": {
            "$ref": "#/components/schemas/SystemExtensionFunctionCall"
          },
          "httpCall": {
            "$ref": "#/components/schemas/SystemExtensionHttpCall"
          }
        },
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionFunctionCall": {
        "properties": {
          "functionName": {
            "type": "string",
            "x-type": "STRING"
          },
          "host": {
            "type": "string",
            "x-type": "STRING"
          }
        },
        "required": [
          "host",
          "functionName"
        ],
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionHttpCall": {
        "properties": {
          "method": {
            "type": "string",
            "x-type": "STRING"
          },
          "uri": {
            "type": "string",
            "x-type": "STRING"
          }
        },
        "required": [
          "uri",
          "method"
        ],
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionPairExpression": {
        "properties": {
          "left": {
            "$ref": "#/components/schemas/SystemExtensionExpression"
          },
          "right": {
            "$ref": "#/components/schemas/SystemExtensionExpression"
          }
        },
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionRecordSearchParams": {
        "properties": {
          "limit": {
            "format": "int32",
            "type": "number",
            "x-type": "INT32"
          },
          "offset": {
            "format": "int32",
            "type": "number",
            "x-type": "INT32"
          },
          "query": {
            "$ref": "#/components/schemas/SystemExtensionBooleanExpression"
          },
          "resolveReferences": {
            "items": {
              "type": "string",
              "x-type": "STRING"
            },
            "type": "array",
            "x-item": 1,
            "x-type": "LIST"
          }
        },
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemExtensionRegexMatchExpression": {
        "properties": {
          "expression": {
            "$ref": "#/components/schemas/SystemExtensionExpression"
          },
          "pattern": {
            "type": "string",
            "x-type": "STRING"
          }
        },
        "type": "object",
        "x-resource": "Extension"
      },
      "SystemNamespace": {
        "properties": {
          "auditData": {
            "$ref": "#/components/schemas/SystemNamespaceAuditData"
          },
          "description": {
            "type": "string",
            "x-type": "STRING"
          },
          "details": {
            "type": "object",
            "x-type": "OBJECT"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "name": {
            "type": "string",
            "uniqueItems": true,
            "x-IsHclLabel": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          }
        },
        "required": [
          "id",
          "version",
          "name"
        ],
        "type": "object",
        "x-resource": "Namespace"
      },
      "SystemNamespaceAuditData": {
        "description": "Audit Data is a type that represents the audit data of a resource/record. ",
        "properties": {
          "createdBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "createdOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "TIMESTAMP"
          },
          "updatedBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "STRING"
          },
          "updatedOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "TIMESTAMP"
          }
        },
        "title": "Audit Data",
        "type": "object",
        "x-resource": "Namespace"
      },
      "SystemPermission": {
        "description": "Permission is a resource that defines the access control rules for resources for users.",
        "properties": {
          "after": {
            "format": "datetime",
            "type": "string",
            "x-type": "TIMESTAMP"
          },
          "auditData": {
            "$ref": "#/components/schemas/SystemPermissionAuditData"
          },
          "before": {
            "format": "datetime",
            "type": "string",
            "x-type": "TIMESTAMP"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "localFlags": {
            "type": "object",
            "x-type": "OBJECT"
          },
          "namespace": {
            "example": "default",
            "type": "string",
            "x-type": "STRING"
          },
          "operation": {
            "default": "FULL",
            "example": "READ",
            "type": "string",
            "x-type": "ENUM"
          },
          "permit": {
            "type": "string",
            "x-type": "ENUM"
          },
          "recordSelector": {
            "$ref": "#/components/schemas/SystemPermissionBooleanExpression"
          },
          "resource": {
            "example": "Book",
            "type": "string",
            "x-type": "STRING"
          },
          "role": {
            "$ref": "#/components/schemas/SystemRole"
          },
          "user": {
            "$ref": "#/components/schemas/SystemUser"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          }
        },
        "required": [
          "id",
          "version",
          "operation",
          "permit"
        ],
        "title": "Permission",
        "type": "object",
        "x-resource": "Permission"
      },
      "SystemPermissionAuditData": {
        "description": "Audit Data is a type that represents the audit data of a resource/record. ",
        "properties": {
          "createdBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "createdOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "TIMESTAMP"
          },
          "updatedBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "STRING"
          },
          "updatedOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "TIMESTAMP"
          }
        },
        "title": "Audit Data",
        "type": "object",
        "x-resource": "Permission"
      },
      "SystemPermissionBooleanExpression": {
        "properties": {
          "and": {
            "items": {
              "$ref": "#/components/schemas/SystemPermissionBooleanExpression"
            },
            "type": "array",
            "x-item": 17,
            "x-type": "LIST"
          },
          "equal": {
            "$ref": "#/components/schemas/SystemPermissionPairExpression"
          },
          "greaterThan": {
            "$ref": "#/components/schemas/SystemPermissionPairExpression"
          },
          "greaterThanOrEqual": {
            "$ref": "#/components/schemas/SystemPermissionPairExpression"
          },
          "in": {
            "$ref": "#/components/schemas/SystemPermissionPairExpression"
          },
          "isNull": {
            "$ref": "#/components/schemas/SystemPermissionExpression"
          },
          "lessThan": {
            "$ref": "#/components/schemas/SystemPermissionPairExpression"
          },
          "lessThanOrEqual": {
            "$ref": "#/components/schemas/SystemPermissionPairExpression"
          },
          "not": {
            "$ref": "#/components/schemas/SystemPermissionBooleanExpression"
          },
          "or": {
            "items": {
              "$ref": "#/components/schemas/SystemPermissionBooleanExpression"
            },
            "type": "array",
            "x-item": 17,
            "x-type": "LIST"
          },
          "regexMatch": {
            "$ref": "#/components/schemas/SystemPermissionRegexMatchExpression"
          }
        },
        "type": "object",
        "x-resource": "Permission"
      },
      "SystemPermissionExpression": {
        "properties": {
          "property": {
            "type": "string",
            "x-type": "STRING"
          },
          "value": {
            "type": "object",
            "x-type": "OBJECT"
          }
        },
        "type": "object",
        "x-resource": "Permission"
      },
      "SystemPermissionPairExpression": {
        "properties": {
          "left": {
            "$ref": "#/components/schemas/SystemPermissionExpression"
          },
          "right": {
            "$ref": "#/components/schemas/SystemPermissionExpression"
          }
        },
        "type": "object",
        "x-resource": "Permission"
      },
      "SystemPermissionRegexMatchExpression": {
        "properties": {
          "expression": {
            "$ref": "#/components/schemas/SystemPermissionExpression"
          },
          "pattern": {
            "type": "string",
            "x-type": "STRING"
          }
        },
        "type": "object",
        "x-resource": "Permission"
      },
      "SystemRecord": {
        "description": "A generic record resource. All Apis are extended from Generic Record resource",
        "properties": {
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "properties": {
            "type": "object",
            "x-type": "OBJECT"
          }
        },
        "required": [
          "id",
          "properties"
        ],
        "title": "Generic Record",
        "type": "object",
        "x-resource": "Record"
      },
      "SystemResource": {
        "description": "Resource is a top level resource that represents a model and API in the system",
        "properties": {
          "abstract": {
            "default": false,
            "type": "boolean",
            "x-type": "BOOL"
          },
          "annotations": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "example": {
              "CheckVersion": "true",
              "CommonType": "testType",
              "IgnoreIfExists": "true"
            },
            "type": "object",
            "x-SpecialProperty": "true",
            "x-item": 1,
            "x-type": "MAP"
          },
          "auditData": {
            "$ref": "#/components/schemas/SystemResourceAuditData"
          },
          "catalog": {
            "example": "public",
            "type": "string",
            "x-type": "STRING"
          },
          "checkReferences": {
            "default": false,
            "type": "boolean",
            "x-type": "BOOL"
          },
          "dataSource": {
            "$ref": "#/components/schemas/SystemDataSource"
          },
          "description": {
            "example": "Book is a resource in the system. It represents a book in the system.",
            "type": "string",
            "x-type": "STRING"
          },
          "entity": {
            "example": "book",
            "type": "string",
            "x-type": "STRING"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "immutable": {
            "default": false,
            "type": "boolean",
            "x-type": "BOOL"
          },
          "indexes": {
            "items": {
              "$ref": "#/components/schemas/SystemResourceIndex"
            },
            "type": "array",
            "x-item": 17,
            "x-type": "LIST"
          },
          "name": {
            "example": "Book",
            "type": "string",
            "x-IsHclLabel": "true",
            "x-type": "STRING"
          },
          "namespace": {
            "$ref": "#/components/schemas/SystemNamespace"
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/SystemResourceProperty"
            },
            "example": [
              {
                "name": "title",
                "type": "name"
              },
              {
                "name": "type",
                "type": "STRING"
              }
            ],
            "type": "object",
            "x-item": 17,
            "x-type": "MAP"
          },
          "title": {
            "example": "Book",
            "type": "string",
            "x-type": "STRING"
          },
          "types": {
            "items": {
              "$ref": "#/components/schemas/SystemResourceSubType"
            },
            "type": "array",
            "x-item": 17,
            "x-type": "LIST"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          },
          "virtual": {
            "default": false,
            "type": "boolean",
            "x-type": "BOOL"
          }
        },
        "required": [
          "id",
          "version",
          "name",
          "namespace",
          "virtual",
          "properties",
          "immutable",
          "abstract",
          "checkReferences"
        ],
        "title": "Resource",
        "type": "object",
        "x-resource": "Resource"
      },
      "SystemResourceAuditData": {
        "description": "Audit Data is a type that represents the audit data of a resource/record. ",
        "properties": {
          "createdBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "createdOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "TIMESTAMP"
          },
          "updatedBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "STRING"
          },
          "updatedOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "TIMESTAMP"
          }
        },
        "title": "Audit Data",
        "type": "object",
        "x-resource": "Resource"
      },
      "SystemResourceIndex": {
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "example": {
              "CheckVersion": "true",
              "CommonType": "testType",
              "IgnoreIfExists": "true"
            },
            "type": "object",
            "x-SpecialProperty": "true",
            "x-item": 1,
            "x-type": "MAP"
          },
          "indexType": {
            "default": "BTREE",
            "type": "string",
            "x-type": "ENUM"
          },
          "properties": {
            "items": {
              "$ref": "#/components/schemas/SystemResourceIndexProperty"
            },
            "type": "array",
            "x-item": 17,
            "x-type": "LIST"
          },
          "unique": {
            "type": "boolean",
            "x-type": "BOOL"
          }
        },
        "type": "object",
        "x-resource": "Resource"
      },
      "SystemResourceIndexProperty": {
        "properties": {
          "name": {
            "type": "string",
            "x-type": "STRING"
          },
          "order": {
            "default": "ASC",
            "type": "string",
            "x-type": "ENUM"
          }
        },
        "required": [
          "name"
        ],
        "type": "object",
        "x-resource": "Resource"
      },
      "SystemResourceProperty": {
        "description": "Property is a type that represents a property of a resource. It is like an API properties or properties of class in a programming language",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string",
              "x-type": "STRING"
            },
            "example": {
              "CheckVersion": "true",
              "CommonType": "testType",
              "IgnoreIfExists": "true"
            },
            "type": "object",
            "x-SpecialProperty": "true",
            "x-item": 1,
            "x-type": "MAP"
          },
          "backReference": {
            "example": "Book",
            "type": "string",
            "x-type": "STRING"
          },
          "defaultValue": {
            "example": "Lord of the Rings",
            "type": "object",
            "x-type": "OBJECT"
          },
          "description": {
            "example": "Book Title is a property of Book Resource. It represents the title of the book.",
            "type": "string",
            "x-type": "STRING"
          },
          "enumValues": {
            "example": [
              "UNKNOWN",
              "ASC",
              "DESC"
            ],
            "items": {
              "type": "string",
              "x-type": "STRING"
            },
            "type": "array",
            "x-item": 1,
            "x-type": "LIST"
          },
          "exampleValue": {
            "example": "no-book-name",
            "type": "object",
            "x-type": "OBJECT"
          },
          "immutable": {
            "default": false,
            "type": "boolean",
            "x-type": "BOOL"
          },
          "item": {
            "$ref": "#/components/schemas/SystemResourceProperty"
          },
          "length": {
            "default": 256,
            "example": 256,
            "format": "int32",
            "type": "number",
            "x-type": "INT32"
          },
          "primary": {
            "default": false,
            "type": "boolean",
            "x-type": "BOOL"
          },
          "reference": {
            "example": "Book",
            "type": "string",
            "x-type": "STRING"
          },
          "required": {
            "default": false,
            "type": "boolean",
            "x-type": "BOOL"
          },
          "title": {
            "example": "Book Title",
            "type": "string",
            "x-type": "STRING"
          },
          "type": {
            "example": "STRING",
            "type": "string",
            "x-type": "ENUM"
          },
          "typeRef": {
            "example": "BookPublishingDetails",
            "type": "string",
            "x-type": "STRING"
          },
          "unique": {
            "default": false,
            "type": "boolean",
            "x-type": "BOOL"
          },
          "virtual": {
            "default": false,
            "type": "boolean",
            "x-type": "BOOL"
          }
        },
        "required": [
          "type",
          "primary",
          "required",
          "unique",
          "immutable",
          "virtual",
          "length"
        ],
        "title": "Property",
        "type": "object",
        "x-resource": "Resource"
      },
      "SystemResourceSubType": {
        "description": "Sub Type is a type that represents a sub type of a resource. It is mostly used by STRUCT type to define the properties of the struct. ",
        "properties": {
          "description": {
            "example": "Book is a sub type of Resource. It represents a book in the system. ",
            "type": "string",
            "x-type": "STRING"
          },
          "name": {
            "example": "Book",
            "type": "string",
            "x-type": "STRING"
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/components/schemas/SystemResourceProperty"
            },
            "example": [
              {
                "name": "title",
                "type": "STRING"
              }
            ],
            "type": "object",
            "x-item": 17,
            "x-type": "MAP"
          },
          "title": {
            "example": "Book",
            "type": "string",
            "x-type": "STRING"
          }
        },
        "required": [
          "name",
          "properties"
        ],
        "title": "Sub Type",
        "type": "object",
        "x-resource": "Resource"
      },
      "SystemRole": {
        "description": "Role is a resource that defines the access control model. It is used to give permissions to users in a grouped way",
        "properties": {
          "auditData": {
            "$ref": "#/components/schemas/SystemRoleAuditData"
          },
          "details": {
            "type": "object",
            "x-type": "OBJECT"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "name": {
            "type": "string",
            "uniqueItems": true,
            "x-IsHclLabel": "true",
            "x-type": "STRING"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/SystemPermission"
            },
            "type": "array",
            "x-item": 15,
            "x-type": "LIST"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          }
        },
        "required": [
          "id",
          "version",
          "name"
        ],
        "title": "Role",
        "type": "object",
        "x-resource": "Role"
      },
      "SystemRoleAuditData": {
        "description": "Audit Data is a type that represents the audit data of a resource/record. ",
        "properties": {
          "createdBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "createdOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "TIMESTAMP"
          },
          "updatedBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "STRING"
          },
          "updatedOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "TIMESTAMP"
          }
        },
        "title": "Audit Data",
        "type": "object",
        "x-resource": "Role"
      },
      "SystemUser": {
        "description": "User is a resource that defines the access control model. It is used to authenticate and authorize users.",
        "properties": {
          "auditData": {
            "$ref": "#/components/schemas/SystemUserAuditData"
          },
          "details": {
            "type": "object",
            "x-type": "OBJECT"
          },
          "id": {
            "example": "a39621a4-6d48-11ee-b962-0242ac120002",
            "format": "uuid",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "UUID"
          },
          "password": {
            "type": "string",
            "x-type": "STRING"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/SystemPermission"
            },
            "type": "array",
            "x-item": 15,
            "x-type": "LIST"
          },
          "roles": {
            "items": {
              "$ref": "#/components/schemas/SystemRole"
            },
            "type": "array",
            "x-item": 15,
            "x-type": "LIST"
          },
          "username": {
            "type": "string",
            "uniqueItems": true,
            "x-IsHclLabel": "true",
            "x-type": "STRING"
          },
          "version": {
            "default": 1,
            "example": 1,
            "format": "int32",
            "type": "number",
            "x-AllowEmptyPrimitive": "true",
            "x-SpecialProperty": "true",
            "x-type": "INT32"
          }
        },
        "required": [
          "id",
          "version",
          "username"
        ],
        "title": "User",
        "type": "object",
        "x-resource": "User"
      },
      "SystemUserAuditData": {
        "description": "Audit Data is a type that represents the audit data of a resource/record. ",
        "properties": {
          "createdBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "STRING"
          },
          "createdOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-immutable": true,
            "x-type": "TIMESTAMP"
          },
          "updatedBy": {
            "example": "admin",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "STRING"
          },
          "updatedOn": {
            "example": "2024-04-19T19:23:58+04:00",
            "format": "datetime",
            "type": "string",
            "x-SpecialProperty": "true",
            "x-type": "TIMESTAMP"
          }
        },
        "title": "Audit Data",
        "type": "object",
        "x-resource": "User"
      },
      "Token": {
        "example": {
          "content": "eyJhbGciOiJSUzI1NiIsI-8pl63y8h-ZOLM",
          "expiration": "2023-10-16T15:14:11.161530Z",
          "term": "SHORT"
        },
        "properties": {
          "content": {
            "type": "string"
          },
          "expiration": {
            "format": "date-time",
            "type": "string"
          },
          "term": {
            "$ref": "#/components/schemas/TokenTerm"
          }
        },
        "type": "object"
      },
      "TokenTerm": {
        "enum": [
          "VERY_SHORT",
          "SHORT",
          "MIDDLE",
          "LONG",
          "VERY_LONG"
        ],
        "example": "LONG",
        "format": "enum",
        "type": "string"
      },
      "ViewTokenResponse": {}
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {
      "name": "API Brew"
    },
    "description": "OpenApi 3.0 definition for API Brew Rest API",
    "license": {
      "name": "Apache License",
      "url": "https://github.com/google/gnostic/blob/master/LICENSE"
    },
    "title": "API Brew",
    "version": "1.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/Resources": {
      "get": {
        "description": "The access token is used to authenticate the user for all the endpoints which needs authentication.",
        "operationId": "getResources",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SystemResource"
                  },
                  "type": "array"
                }
              }
            },
            "description": "List of Resources"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "This endpoint is used to get the list of Resources.",
        "tags": [
          "Resources"
        ]
      },
      "post": {
        "description": "The access token is used to authenticate the user for all the endpoints which needs authentication.",
        "operationId": "createResource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemResource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemResource"
                }
              }
            },
            "description": "Created resource"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "This endpoint is used to create a new resource.",
        "tags": [
          "Resources"
        ]
      }
    },
    "/Resources/by-name/{namespace}/{name}": {
      "get": {
        "description": "The access token is used to authenticate the user for all the endpoints which needs authentication.",
        "operationId": "getResourceByName",
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemResource"
                }
              }
            },
            "description": "Resource"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "This endpoint is used to get a resource by name.",
        "tags": [
          "Resources"
        ]
      }
    },
    "/Resources/{id}": {
      "delete": {
        "description": "The access token is used to authenticate the user for all the endpoints which needs authentication.",
        "operationId": "deleteResource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": null,
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "This endpoint is used to delete a resource.",
        "tags": [
          "Resources"
        ]
      },
      "get": {
        "description": "The access token is used to authenticate the user for all the endpoints which needs authentication.",
        "operationId": "getResource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemResource"
                }
              }
            },
            "description": "Resource"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "This endpoint is used to get a resource.",
        "tags": [
          "Resources"
        ]
      },
      "put": {
        "description": "The access token is used to authenticate the user for all the endpoints which needs authentication.",
        "operationId": "updateResource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemResource"
              }
            }
          },
          "required": true
        },
        "responses": null,
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "This endpoint is used to update a resource.",
        "tags": [
          "Resources"
        ]
      }
    },
    "/authentication/token": {
      "get": {
        "description": "The access token is used to authenticate the user for all the endpoints which needs authentication.",
        "operationId": "ViewToken",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewTokenResponse"
                }
              }
            },
            "description": "Authentication Response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "This endpoint is used to view the content of the access token.",
        "tags": [
          "Authentication"
        ]
      },
      "post": {
        "description": "The access token is used to authenticate the user for all the endpoints which needs authentication.",
        "operationId": "getAuthenticationToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationResponse"
                }
              }
            },
            "description": "Authentication Response"
          },
          "400": {
            "content": {
              "application/json": {
                "example": {
                  "code": "RECORD_VALIDATION_ERROR",
                  "message": "json: cannot unmarshal number into Go struct field AuthenticationRequest.password of type string"
                }
              }
            },
            "description": "Unauthorized"
          },
          "401": {
            "content": {
              "application/json": {
                "example": {
                  "code": "AUTHENTICATION_FAILED",
                  "message": "Authentication failed"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "summary": "This endpoint is used to authenticate the user and get the access token.",
        "tags": [
          "Authentication"
        ]
      },
      "put": {
        "description": "The access token is used to authenticate the user for all the endpoints which needs authentication.",
        "operationId": "refreshAuthenticationToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenResponse"
                }
              }
            },
            "description": "Authentication Response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "This endpoint is used to refresh the access token.",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/nano-code": {
      "description": "Nano code",
      "get": {
        "description": "Nano code - List items",
        "operationId": "listCode",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/NanoCode"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Code - List items",
        "tags": [
          "nano / Code API"
        ]
      },
      "patch": {
        "description": "Nano code - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoCode"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Code - Apply an item",
        "tags": [
          "nano / Code API"
        ]
      },
      "post": {
        "description": "Nano code - Create new item",
        "operationId": "createCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoCode"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Code - Create new item",
        "tags": [
          "nano / Code API"
        ]
      },
      "summary": "Code"
    },
    "/nano-code/_search": {
      "description": "Nano code - Search",
      "post": {
        "description": "Nano code - Search items",
        "operationId": "searchCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoCode"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Code - Search items",
        "tags": [
          "nano / Code API"
        ]
      },
      "summary": "Code - Search"
    },
    "/nano-code/{id}": {
      "delete": {
        "description": "Nano code - Delete_ item",
        "operationId": "deleteCode",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoCode"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Code - Delete_ item",
        "tags": [
          "nano / Code API"
        ]
      },
      "description": "Nano code",
      "get": {
        "description": "Nano code - Get_ item",
        "operationId": "getCode",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoCode"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Code - Get_ item",
        "tags": [
          "nano / Code API"
        ]
      },
      "put": {
        "description": "Nano code - Update item",
        "operationId": "updateCode",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoCode"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Code - Update item",
        "tags": [
          "nano / Code API"
        ]
      },
      "summary": "Code"
    },
    "/nano-cron-job": {
      "description": "Cron Job",
      "get": {
        "description": "Cron Job - List items",
        "operationId": "listCronJob",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/NanoCronJob"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Cron Job - List items",
        "tags": [
          "nano / CronJob API"
        ]
      },
      "patch": {
        "description": "Cron Job - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyCronJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoCronJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoCronJob"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Cron Job - Apply an item",
        "tags": [
          "nano / CronJob API"
        ]
      },
      "post": {
        "description": "Cron Job - Create new item",
        "operationId": "createCronJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoCronJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoCronJob"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Cron Job - Create new item",
        "tags": [
          "nano / CronJob API"
        ]
      },
      "summary": "Cron Job"
    },
    "/nano-cron-job/_search": {
      "description": "Cron Job - Search",
      "post": {
        "description": "Cron Job - Search items",
        "operationId": "searchCronJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoCronJob"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Cron Job - Search items",
        "tags": [
          "nano / CronJob API"
        ]
      },
      "summary": "Cron Job - Search"
    },
    "/nano-cron-job/{id}": {
      "delete": {
        "description": "Cron Job - Delete_ item",
        "operationId": "deleteCronJob",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoCronJob"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Cron Job - Delete_ item",
        "tags": [
          "nano / CronJob API"
        ]
      },
      "description": "Cron Job",
      "get": {
        "description": "Cron Job - Get_ item",
        "operationId": "getCronJob",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoCronJob"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Cron Job - Get_ item",
        "tags": [
          "nano / CronJob API"
        ]
      },
      "put": {
        "description": "Cron Job - Update item",
        "operationId": "updateCronJob",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoCronJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoCronJob"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Cron Job - Update item",
        "tags": [
          "nano / CronJob API"
        ]
      },
      "summary": "Cron Job"
    },
    "/nano-function": {
      "description": "Nano function",
      "get": {
        "description": "Nano function - List items",
        "operationId": "listFunction",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/NanoFunction"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Function - List items",
        "tags": [
          "nano / Function API"
        ]
      },
      "patch": {
        "description": "Nano function - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyFunction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoFunction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoFunction"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Function - Apply an item",
        "tags": [
          "nano / Function API"
        ]
      },
      "post": {
        "description": "Nano function - Create new item",
        "operationId": "createFunction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoFunction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoFunction"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Function - Create new item",
        "tags": [
          "nano / Function API"
        ]
      },
      "summary": "Function"
    },
    "/nano-function/_search": {
      "description": "Nano function - Search",
      "post": {
        "description": "Nano function - Search items",
        "operationId": "searchFunction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoFunction"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Function - Search items",
        "tags": [
          "nano / Function API"
        ]
      },
      "summary": "Function - Search"
    },
    "/nano-function/{id}": {
      "delete": {
        "description": "Nano function - Delete_ item",
        "operationId": "deleteFunction",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoFunction"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Function - Delete_ item",
        "tags": [
          "nano / Function API"
        ]
      },
      "description": "Nano function",
      "get": {
        "description": "Nano function - Get_ item",
        "operationId": "getFunction",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoFunction"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Function - Get_ item",
        "tags": [
          "nano / Function API"
        ]
      },
      "put": {
        "description": "Nano function - Update item",
        "operationId": "updateFunction",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoFunction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoFunction"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Function - Update item",
        "tags": [
          "nano / Function API"
        ]
      },
      "summary": "Function"
    },
    "/nano-script": {
      "description": "Nano Script",
      "get": {
        "description": "Nano Script - List items",
        "operationId": "listScript",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/NanoScript"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Script - List items",
        "tags": [
          "nano / Script API"
        ]
      },
      "patch": {
        "description": "Nano Script - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyScript",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoScript"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoScript"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Script - Apply an item",
        "tags": [
          "nano / Script API"
        ]
      },
      "post": {
        "description": "Nano Script - Create new item",
        "operationId": "createScript",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoScript"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoScript"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Script - Create new item",
        "tags": [
          "nano / Script API"
        ]
      },
      "summary": "Script"
    },
    "/nano-script/_search": {
      "description": "Nano Script - Search",
      "post": {
        "description": "Nano Script - Search items",
        "operationId": "searchScript",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoScript"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Script - Search items",
        "tags": [
          "nano / Script API"
        ]
      },
      "summary": "Script - Search"
    },
    "/nano-script/{id}": {
      "delete": {
        "description": "Nano Script - Delete_ item",
        "operationId": "deleteScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoScript"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Script - Delete_ item",
        "tags": [
          "nano / Script API"
        ]
      },
      "description": "Nano Script",
      "get": {
        "description": "Nano Script - Get_ item",
        "operationId": "getScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/NanoScript"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Script - Get_ item",
        "tags": [
          "nano / Script API"
        ]
      },
      "put": {
        "description": "Nano Script - Update item",
        "operationId": "updateScript",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NanoScript"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NanoScript"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Script - Update item",
        "tags": [
          "nano / Script API"
        ]
      },
      "summary": "Script"
    },
    "/system-audit-log": {
      "description": "Api for AuditLog",
      "get": {
        "description": "Api for AuditLog - List items",
        "operationId": "listAuditLog",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/SystemAuditLog"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "AuditLog - List items",
        "tags": [
          "system / AuditLog API"
        ]
      },
      "patch": {
        "description": "Api for AuditLog - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyAuditLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemAuditLog"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemAuditLog"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "AuditLog - Apply an item",
        "tags": [
          "system / AuditLog API"
        ]
      },
      "post": {
        "description": "Api for AuditLog - Create new item",
        "operationId": "createAuditLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemAuditLog"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemAuditLog"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "AuditLog - Create new item",
        "tags": [
          "system / AuditLog API"
        ]
      },
      "summary": "AuditLog"
    },
    "/system-audit-log/_search": {
      "description": "Api for AuditLog - Search",
      "post": {
        "description": "Api for AuditLog - Search items",
        "operationId": "searchAuditLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemAuditLog"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "AuditLog - Search items",
        "tags": [
          "system / AuditLog API"
        ]
      },
      "summary": "AuditLog - Search"
    },
    "/system-audit-log/{id}": {
      "delete": {
        "description": "Api for AuditLog - Delete_ item",
        "operationId": "deleteAuditLog",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemAuditLog"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "AuditLog - Delete_ item",
        "tags": [
          "system / AuditLog API"
        ]
      },
      "description": "Api for AuditLog",
      "get": {
        "description": "Api for AuditLog - Get_ item",
        "operationId": "getAuditLog",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemAuditLog"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "AuditLog - Get_ item",
        "tags": [
          "system / AuditLog API"
        ]
      },
      "put": {
        "description": "Api for AuditLog - Update item",
        "operationId": "updateAuditLog",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemAuditLog"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemAuditLog"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "AuditLog - Update item",
        "tags": [
          "system / AuditLog API"
        ]
      },
      "summary": "AuditLog"
    },
    "/system-data-source": {
      "description": "Api for DataSource",
      "get": {
        "description": "Api for DataSource - List items",
        "operationId": "listDataSource",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/SystemDataSource"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "DataSource - List items",
        "tags": [
          "system / DataSource API"
        ]
      },
      "patch": {
        "description": "Api for DataSource - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyDataSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemDataSource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDataSource"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "DataSource - Apply an item",
        "tags": [
          "system / DataSource API"
        ]
      },
      "post": {
        "description": "Api for DataSource - Create new item",
        "operationId": "createDataSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemDataSource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDataSource"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "DataSource - Create new item",
        "tags": [
          "system / DataSource API"
        ]
      },
      "summary": "DataSource"
    },
    "/system-data-source/_search": {
      "description": "Api for DataSource - Search",
      "post": {
        "description": "Api for DataSource - Search items",
        "operationId": "searchDataSource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemDataSource"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "DataSource - Search items",
        "tags": [
          "system / DataSource API"
        ]
      },
      "summary": "DataSource - Search"
    },
    "/system-data-source/{id}": {
      "delete": {
        "description": "Api for DataSource - Delete_ item",
        "operationId": "deleteDataSource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemDataSource"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "DataSource - Delete_ item",
        "tags": [
          "system / DataSource API"
        ]
      },
      "description": "Api for DataSource",
      "get": {
        "description": "Api for DataSource - Get_ item",
        "operationId": "getDataSource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemDataSource"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "DataSource - Get_ item",
        "tags": [
          "system / DataSource API"
        ]
      },
      "put": {
        "description": "Api for DataSource - Update item",
        "operationId": "updateDataSource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemDataSource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDataSource"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "DataSource - Update item",
        "tags": [
          "system / DataSource API"
        ]
      },
      "summary": "DataSource"
    },
    "/system-extension": {
      "description": "Api for Extension",
      "get": {
        "description": "Api for Extension - List items",
        "operationId": "listExtension",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/SystemExtension"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Extension - List items",
        "tags": [
          "system / Extension API"
        ]
      },
      "patch": {
        "description": "Api for Extension - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyExtension",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemExtension"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemExtension"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Extension - Apply an item",
        "tags": [
          "system / Extension API"
        ]
      },
      "post": {
        "description": "Api for Extension - Create new item",
        "operationId": "createExtension",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemExtension"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemExtension"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Extension - Create new item",
        "tags": [
          "system / Extension API"
        ]
      },
      "summary": "Extension"
    },
    "/system-extension/_search": {
      "description": "Api for Extension - Search",
      "post": {
        "description": "Api for Extension - Search items",
        "operationId": "searchExtension",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemExtension"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Extension - Search items",
        "tags": [
          "system / Extension API"
        ]
      },
      "summary": "Extension - Search"
    },
    "/system-extension/{id}": {
      "delete": {
        "description": "Api for Extension - Delete_ item",
        "operationId": "deleteExtension",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemExtension"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Extension - Delete_ item",
        "tags": [
          "system / Extension API"
        ]
      },
      "description": "Api for Extension",
      "get": {
        "description": "Api for Extension - Get_ item",
        "operationId": "getExtension",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemExtension"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Extension - Get_ item",
        "tags": [
          "system / Extension API"
        ]
      },
      "put": {
        "description": "Api for Extension - Update item",
        "operationId": "updateExtension",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemExtension"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemExtension"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Extension - Update item",
        "tags": [
          "system / Extension API"
        ]
      },
      "summary": "Extension"
    },
    "/system-namespace": {
      "description": "Api for Namespace",
      "get": {
        "description": "Api for Namespace - List items",
        "operationId": "listNamespace",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/SystemNamespace"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Namespace - List items",
        "tags": [
          "system / Namespace API"
        ]
      },
      "patch": {
        "description": "Api for Namespace - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyNamespace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemNamespace"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemNamespace"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Namespace - Apply an item",
        "tags": [
          "system / Namespace API"
        ]
      },
      "post": {
        "description": "Api for Namespace - Create new item",
        "operationId": "createNamespace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemNamespace"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemNamespace"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Namespace - Create new item",
        "tags": [
          "system / Namespace API"
        ]
      },
      "summary": "Namespace"
    },
    "/system-namespace/_search": {
      "description": "Api for Namespace - Search",
      "post": {
        "description": "Api for Namespace - Search items",
        "operationId": "searchNamespace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemNamespace"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Namespace - Search items",
        "tags": [
          "system / Namespace API"
        ]
      },
      "summary": "Namespace - Search"
    },
    "/system-namespace/{id}": {
      "delete": {
        "description": "Api for Namespace - Delete_ item",
        "operationId": "deleteNamespace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemNamespace"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Namespace - Delete_ item",
        "tags": [
          "system / Namespace API"
        ]
      },
      "description": "Api for Namespace",
      "get": {
        "description": "Api for Namespace - Get_ item",
        "operationId": "getNamespace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemNamespace"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Namespace - Get_ item",
        "tags": [
          "system / Namespace API"
        ]
      },
      "put": {
        "description": "Api for Namespace - Update item",
        "operationId": "updateNamespace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemNamespace"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemNamespace"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Namespace - Update item",
        "tags": [
          "system / Namespace API"
        ]
      },
      "summary": "Namespace"
    },
    "/system-permission": {
      "description": "Permission is a resource that defines the access control rules for resources for users.",
      "get": {
        "description": "Permission is a resource that defines the access control rules for resources for users. - List items",
        "operationId": "listPermission",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/SystemPermission"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Permission - List items",
        "tags": [
          "system / Permission API"
        ]
      },
      "patch": {
        "description": "Permission is a resource that defines the access control rules for resources for users. - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyPermission",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemPermission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemPermission"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Permission - Apply an item",
        "tags": [
          "system / Permission API"
        ]
      },
      "post": {
        "description": "Permission is a resource that defines the access control rules for resources for users. - Create new item",
        "operationId": "createPermission",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemPermission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemPermission"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Permission - Create new item",
        "tags": [
          "system / Permission API"
        ]
      },
      "summary": "Permission"
    },
    "/system-permission/_search": {
      "description": "Permission is a resource that defines the access control rules for resources for users. - Search",
      "post": {
        "description": "Permission is a resource that defines the access control rules for resources for users. - Search items",
        "operationId": "searchPermission",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemPermission"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Permission - Search items",
        "tags": [
          "system / Permission API"
        ]
      },
      "summary": "Permission - Search"
    },
    "/system-permission/{id}": {
      "delete": {
        "description": "Permission is a resource that defines the access control rules for resources for users. - Delete_ item",
        "operationId": "deletePermission",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemPermission"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Permission - Delete_ item",
        "tags": [
          "system / Permission API"
        ]
      },
      "description": "Permission is a resource that defines the access control rules for resources for users.",
      "get": {
        "description": "Permission is a resource that defines the access control rules for resources for users. - Get_ item",
        "operationId": "getPermission",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemPermission"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Permission - Get_ item",
        "tags": [
          "system / Permission API"
        ]
      },
      "put": {
        "description": "Permission is a resource that defines the access control rules for resources for users. - Update item",
        "operationId": "updatePermission",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemPermission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemPermission"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Permission - Update item",
        "tags": [
          "system / Permission API"
        ]
      },
      "summary": "Permission"
    },
    "/system-role": {
      "description": "Role is a resource that defines the access control model. It is used to give permissions to users in a grouped way",
      "get": {
        "description": "Role is a resource that defines the access control model. It is used to give permissions to users in a grouped way - List items",
        "operationId": "listRole",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/SystemRole"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Role - List items",
        "tags": [
          "system / Role API"
        ]
      },
      "patch": {
        "description": "Role is a resource that defines the access control model. It is used to give permissions to users in a grouped way - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemRole"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Role - Apply an item",
        "tags": [
          "system / Role API"
        ]
      },
      "post": {
        "description": "Role is a resource that defines the access control model. It is used to give permissions to users in a grouped way - Create new item",
        "operationId": "createRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemRole"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Role - Create new item",
        "tags": [
          "system / Role API"
        ]
      },
      "summary": "Role"
    },
    "/system-role/_search": {
      "description": "Role is a resource that defines the access control model. It is used to give permissions to users in a grouped way - Search",
      "post": {
        "description": "Role is a resource that defines the access control model. It is used to give permissions to users in a grouped way - Search items",
        "operationId": "searchRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemRole"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Role - Search items",
        "tags": [
          "system / Role API"
        ]
      },
      "summary": "Role - Search"
    },
    "/system-role/{id}": {
      "delete": {
        "description": "Role is a resource that defines the access control model. It is used to give permissions to users in a grouped way - Delete_ item",
        "operationId": "deleteRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemRole"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Role - Delete_ item",
        "tags": [
          "system / Role API"
        ]
      },
      "description": "Role is a resource that defines the access control model. It is used to give permissions to users in a grouped way",
      "get": {
        "description": "Role is a resource that defines the access control model. It is used to give permissions to users in a grouped way - Get_ item",
        "operationId": "getRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemRole"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Role - Get_ item",
        "tags": [
          "system / Role API"
        ]
      },
      "put": {
        "description": "Role is a resource that defines the access control model. It is used to give permissions to users in a grouped way - Update item",
        "operationId": "updateRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemRole"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Role - Update item",
        "tags": [
          "system / Role API"
        ]
      },
      "summary": "Role"
    },
    "/system-user": {
      "description": "User is a resource that defines the access control model. It is used to authenticate and authorize users.",
      "get": {
        "description": "User is a resource that defines the access control model. It is used to authenticate and authorize users. - List items",
        "operationId": "listUser",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "$ref": "#/components/schemas/SystemUser"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "User - List items",
        "tags": [
          "system / User API"
        ]
      },
      "patch": {
        "description": "User is a resource that defines the access control model. It is used to authenticate and authorize users. - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemUser"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "User - Apply an item",
        "tags": [
          "system / User API"
        ]
      },
      "post": {
        "description": "User is a resource that defines the access control model. It is used to authenticate and authorize users. - Create new item",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemUser"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "User - Create new item",
        "tags": [
          "system / User API"
        ]
      },
      "summary": "User"
    },
    "/system-user/_search": {
      "description": "User is a resource that defines the access control model. It is used to authenticate and authorize users. - Search",
      "post": {
        "description": "User is a resource that defines the access control model. It is used to authenticate and authorize users. - Search items",
        "operationId": "searchUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemUser"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "User - Search items",
        "tags": [
          "system / User API"
        ]
      },
      "summary": "User - Search"
    },
    "/system-user/{id}": {
      "delete": {
        "description": "User is a resource that defines the access control model. It is used to authenticate and authorize users. - Delete_ item",
        "operationId": "deleteUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemUser"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "User - Delete_ item",
        "tags": [
          "system / User API"
        ]
      },
      "description": "User is a resource that defines the access control model. It is used to authenticate and authorize users.",
      "get": {
        "description": "User is a resource that defines the access control model. It is used to authenticate and authorize users. - Get_ item",
        "operationId": "getUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "$ref": "#/components/schemas/SystemUser"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "User - Get_ item",
        "tags": [
          "system / User API"
        ]
      },
      "put": {
        "description": "User is a resource that defines the access control model. It is used to authenticate and authorize users. - Update item",
        "operationId": "updateUser",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemUser"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "User - Update item",
        "tags": [
          "system / User API"
        ]
      },
      "summary": "User"
    },
    "/{namespace}-{resource}": {
      "description": "A generic record resource. All Apis are extended from Generic Record resource",
      "get": {
        "description": "A generic record resource. All Apis are extended from Generic Record resource - List items",
        "operationId": "listRecord",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "items": {
                        "additionalProperties": true,
                        "description": "It is a generic payload, it has not a specific structure without knowledge of resource. For each resource this structure is shaped accordingly",
                        "title": "Generic Record"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "content"
                  ]
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generic Record - List items",
        "tags": [
          "Records Generic API"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "resource",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "description": "A generic record resource. All Apis are extended from Generic Record resource - Apply an item, it will check id and unique properties, if such item is exists, update operation will be executed, if not create operation is executed. If There are no change between updating record and existing record, nothing will be done",
        "operationId": "applyRecord",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "It is a generic payload, it has not a specific structure without knowledge of resource. For each resource this structure is shaped accordingly",
                "title": "Generic Record"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "description": "It is a generic payload, it has not a specific structure without knowledge of resource. For each resource this structure is shaped accordingly",
                  "title": "Generic Record"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generic Record - Apply an item",
        "tags": [
          "Records Generic API"
        ]
      },
      "post": {
        "description": "A generic record resource. All Apis are extended from Generic Record resource - Create new item",
        "operationId": "createRecord",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "It is a generic payload, it has not a specific structure without knowledge of resource. For each resource this structure is shaped accordingly",
                "title": "Generic Record"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "description": "It is a generic payload, it has not a specific structure without knowledge of resource. For each resource this structure is shaped accordingly",
                  "title": "Generic Record"
                }
              }
            },
            "description": "Created item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generic Record - Create new item",
        "tags": [
          "Records Generic API"
        ]
      },
      "summary": "Generic Record"
    },
    "/{namespace}-{resource}/{id}": {
      "delete": {
        "description": "A generic record resource. All Apis are extended from Generic Record resource - Delete_ item",
        "operationId": "deleteRecord",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "additionalProperties": true,
                      "description": "It is a generic payload, it has not a specific structure without knowledge of resource. For each resource this structure is shaped accordingly",
                      "title": "Generic Record"
                    }
                  }
                }
              }
            },
            "description": "Deleted item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generic Record - Delete_ item",
        "tags": [
          "Records Generic API"
        ]
      },
      "description": "A generic record resource. All Apis are extended from Generic Record resource",
      "get": {
        "description": "A generic record resource. All Apis are extended from Generic Record resource - Get_ item",
        "operationId": "getRecord",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "additionalProperties": true,
                      "description": "It is a generic payload, it has not a specific structure without knowledge of resource. For each resource this structure is shaped accordingly",
                      "title": "Generic Record"
                    }
                  }
                }
              }
            },
            "description": "Item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generic Record - Get_ item",
        "tags": [
          "Records Generic API"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "resource",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "A generic record resource. All Apis are extended from Generic Record resource - Update item",
        "operationId": "updateRecord",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "description": "It is a generic payload, it has not a specific structure without knowledge of resource. For each resource this structure is shaped accordingly",
                "title": "Generic Record"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "description": "It is a generic payload, it has not a specific structure without knowledge of resource. For each resource this structure is shaped accordingly",
                  "title": "Generic Record"
                }
              }
            },
            "description": "Updated item"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generic Record - Update item",
        "tags": [
          "Records Generic API"
        ]
      },
      "summary": "Generic Record"
    },
    "/{namespace}-{resource}/{id}/_search": {
      "description": "A generic record resource. All Apis are extended from Generic Record resource - Search",
      "parameters": [
        {
          "in": "path",
          "name": "namespace",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "path",
          "name": "resource",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "description": "A generic record resource. All Apis are extended from Generic Record resource - Search items",
        "operationId": "searchRecord",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "content": {
                      "additionalProperties": true,
                      "description": "It is a generic payload, it has not a specific structure without knowledge of resource. For each resource this structure is shaped accordingly",
                      "title": "Generic Record"
                    }
                  }
                }
              }
            },
            "description": "List of items"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Generic Record - Search items",
        "tags": [
          "Records Generic API"
        ]
      },
      "summary": "Generic Record - Search"
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "description": "Authentication APIs are used to authenticate users and get access to the Resources. For all endpoints, which needs you to be authenticated, you need to pass the access token in the header.\n                The access token is obtained by calling the authenticate endpoint.",
      "name": "Authentication"
    }
  ]
}