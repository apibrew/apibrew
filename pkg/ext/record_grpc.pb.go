// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ext/record.proto

package ext

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordExtensionServiceClient is the client API for RecordExtensionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordExtensionServiceClient interface {
	List(ctx context.Context, in *ListRecordRequest, opts ...grpc.CallOption) (*ListRecordResponse, error)
}

type recordExtensionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordExtensionServiceClient(cc grpc.ClientConnInterface) RecordExtensionServiceClient {
	return &recordExtensionServiceClient{cc}
}

func (c *recordExtensionServiceClient) List(ctx context.Context, in *ListRecordRequest, opts ...grpc.CallOption) (*ListRecordResponse, error) {
	out := new(ListRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordExtensionServiceServer is the server API for RecordExtensionService service.
// All implementations must embed UnimplementedRecordExtensionServiceServer
// for forward compatibility
type RecordExtensionServiceServer interface {
	List(context.Context, *ListRecordRequest) (*ListRecordResponse, error)
	mustEmbedUnimplementedRecordExtensionServiceServer()
}

// UnimplementedRecordExtensionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordExtensionServiceServer struct {
}

func (UnimplementedRecordExtensionServiceServer) List(context.Context, *ListRecordRequest) (*ListRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRecordExtensionServiceServer) mustEmbedUnimplementedRecordExtensionServiceServer() {
}

// UnsafeRecordExtensionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordExtensionServiceServer will
// result in compilation errors.
type UnsafeRecordExtensionServiceServer interface {
	mustEmbedUnimplementedRecordExtensionServiceServer()
}

func RegisterRecordExtensionServiceServer(s grpc.ServiceRegistrar, srv RecordExtensionServiceServer) {
	s.RegisterService(&RecordExtensionService_ServiceDesc, srv)
}

func _RecordExtensionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).List(ctx, req.(*ListRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordExtensionService_ServiceDesc is the grpc.ServiceDesc for RecordExtensionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordExtensionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ext.RecordExtensionService",
	HandlerType: (*RecordExtensionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RecordExtensionService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ext/record.proto",
}
