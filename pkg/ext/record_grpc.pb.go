// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ext/record.proto

package ext

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordExtensionServiceClient is the client API for RecordExtensionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordExtensionServiceClient interface {
	BeforeList(ctx context.Context, in *BeforeListRecordRequest, opts ...grpc.CallOption) (*BeforeListRecordResponse, error)
	List(ctx context.Context, in *ListRecordRequest, opts ...grpc.CallOption) (*ListRecordResponse, error)
	AfterList(ctx context.Context, in *AfterListRecordRequest, opts ...grpc.CallOption) (*AfterListRecordResponse, error)
	BeforeCreate(ctx context.Context, in *BeforeCreateRecordRequest, opts ...grpc.CallOption) (*BeforeCreateRecordResponse, error)
	Create(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
	AfterCreate(ctx context.Context, in *AfterCreateRecordRequest, opts ...grpc.CallOption) (*AfterCreateRecordResponse, error)
	BeforeUpdate(ctx context.Context, in *BeforeUpdateRecordRequest, opts ...grpc.CallOption) (*BeforeUpdateRecordResponse, error)
	Update(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error)
	AfterUpdate(ctx context.Context, in *AfterUpdateRecordRequest, opts ...grpc.CallOption) (*AfterUpdateRecordResponse, error)
	BeforeDelete(ctx context.Context, in *BeforeDeleteRecordRequest, opts ...grpc.CallOption) (*BeforeDeleteRecordResponse, error)
	Delete(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error)
	AfterDelete(ctx context.Context, in *AfterDeleteRecordRequest, opts ...grpc.CallOption) (*AfterDeleteRecordResponse, error)
	BeforeGet(ctx context.Context, in *BeforeGetRecordRequest, opts ...grpc.CallOption) (*BeforeGetRecordResponse, error)
	Get(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	AfterGet(ctx context.Context, in *AfterGetRecordRequest, opts ...grpc.CallOption) (*AfterGetRecordResponse, error)
}

type recordExtensionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordExtensionServiceClient(cc grpc.ClientConnInterface) RecordExtensionServiceClient {
	return &recordExtensionServiceClient{cc}
}

func (c *recordExtensionServiceClient) BeforeList(ctx context.Context, in *BeforeListRecordRequest, opts ...grpc.CallOption) (*BeforeListRecordResponse, error) {
	out := new(BeforeListRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/BeforeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) List(ctx context.Context, in *ListRecordRequest, opts ...grpc.CallOption) (*ListRecordResponse, error) {
	out := new(ListRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) AfterList(ctx context.Context, in *AfterListRecordRequest, opts ...grpc.CallOption) (*AfterListRecordResponse, error) {
	out := new(AfterListRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/AfterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) BeforeCreate(ctx context.Context, in *BeforeCreateRecordRequest, opts ...grpc.CallOption) (*BeforeCreateRecordResponse, error) {
	out := new(BeforeCreateRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/BeforeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) Create(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	out := new(CreateRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) AfterCreate(ctx context.Context, in *AfterCreateRecordRequest, opts ...grpc.CallOption) (*AfterCreateRecordResponse, error) {
	out := new(AfterCreateRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/AfterCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) BeforeUpdate(ctx context.Context, in *BeforeUpdateRecordRequest, opts ...grpc.CallOption) (*BeforeUpdateRecordResponse, error) {
	out := new(BeforeUpdateRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/BeforeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) Update(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error) {
	out := new(UpdateRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) AfterUpdate(ctx context.Context, in *AfterUpdateRecordRequest, opts ...grpc.CallOption) (*AfterUpdateRecordResponse, error) {
	out := new(AfterUpdateRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/AfterUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) BeforeDelete(ctx context.Context, in *BeforeDeleteRecordRequest, opts ...grpc.CallOption) (*BeforeDeleteRecordResponse, error) {
	out := new(BeforeDeleteRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/BeforeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) Delete(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error) {
	out := new(DeleteRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) AfterDelete(ctx context.Context, in *AfterDeleteRecordRequest, opts ...grpc.CallOption) (*AfterDeleteRecordResponse, error) {
	out := new(AfterDeleteRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/AfterDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) BeforeGet(ctx context.Context, in *BeforeGetRecordRequest, opts ...grpc.CallOption) (*BeforeGetRecordResponse, error) {
	out := new(BeforeGetRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/BeforeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) Get(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordExtensionServiceClient) AfterGet(ctx context.Context, in *AfterGetRecordRequest, opts ...grpc.CallOption) (*AfterGetRecordResponse, error) {
	out := new(AfterGetRecordResponse)
	err := c.cc.Invoke(ctx, "/ext.RecordExtensionService/AfterGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordExtensionServiceServer is the server API for RecordExtensionService service.
// All implementations must embed UnimplementedRecordExtensionServiceServer
// for forward compatibility
type RecordExtensionServiceServer interface {
	BeforeList(context.Context, *BeforeListRecordRequest) (*BeforeListRecordResponse, error)
	List(context.Context, *ListRecordRequest) (*ListRecordResponse, error)
	AfterList(context.Context, *AfterListRecordRequest) (*AfterListRecordResponse, error)
	BeforeCreate(context.Context, *BeforeCreateRecordRequest) (*BeforeCreateRecordResponse, error)
	Create(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error)
	AfterCreate(context.Context, *AfterCreateRecordRequest) (*AfterCreateRecordResponse, error)
	BeforeUpdate(context.Context, *BeforeUpdateRecordRequest) (*BeforeUpdateRecordResponse, error)
	Update(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error)
	AfterUpdate(context.Context, *AfterUpdateRecordRequest) (*AfterUpdateRecordResponse, error)
	BeforeDelete(context.Context, *BeforeDeleteRecordRequest) (*BeforeDeleteRecordResponse, error)
	Delete(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error)
	AfterDelete(context.Context, *AfterDeleteRecordRequest) (*AfterDeleteRecordResponse, error)
	BeforeGet(context.Context, *BeforeGetRecordRequest) (*BeforeGetRecordResponse, error)
	Get(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	AfterGet(context.Context, *AfterGetRecordRequest) (*AfterGetRecordResponse, error)
	mustEmbedUnimplementedRecordExtensionServiceServer()
}

// UnimplementedRecordExtensionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordExtensionServiceServer struct {
}

func (UnimplementedRecordExtensionServiceServer) BeforeList(context.Context, *BeforeListRecordRequest) (*BeforeListRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeList not implemented")
}
func (UnimplementedRecordExtensionServiceServer) List(context.Context, *ListRecordRequest) (*ListRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRecordExtensionServiceServer) AfterList(context.Context, *AfterListRecordRequest) (*AfterListRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterList not implemented")
}
func (UnimplementedRecordExtensionServiceServer) BeforeCreate(context.Context, *BeforeCreateRecordRequest) (*BeforeCreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeCreate not implemented")
}
func (UnimplementedRecordExtensionServiceServer) Create(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRecordExtensionServiceServer) AfterCreate(context.Context, *AfterCreateRecordRequest) (*AfterCreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterCreate not implemented")
}
func (UnimplementedRecordExtensionServiceServer) BeforeUpdate(context.Context, *BeforeUpdateRecordRequest) (*BeforeUpdateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeUpdate not implemented")
}
func (UnimplementedRecordExtensionServiceServer) Update(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRecordExtensionServiceServer) AfterUpdate(context.Context, *AfterUpdateRecordRequest) (*AfterUpdateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterUpdate not implemented")
}
func (UnimplementedRecordExtensionServiceServer) BeforeDelete(context.Context, *BeforeDeleteRecordRequest) (*BeforeDeleteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeDelete not implemented")
}
func (UnimplementedRecordExtensionServiceServer) Delete(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRecordExtensionServiceServer) AfterDelete(context.Context, *AfterDeleteRecordRequest) (*AfterDeleteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterDelete not implemented")
}
func (UnimplementedRecordExtensionServiceServer) BeforeGet(context.Context, *BeforeGetRecordRequest) (*BeforeGetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeGet not implemented")
}
func (UnimplementedRecordExtensionServiceServer) Get(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRecordExtensionServiceServer) AfterGet(context.Context, *AfterGetRecordRequest) (*AfterGetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AfterGet not implemented")
}
func (UnimplementedRecordExtensionServiceServer) mustEmbedUnimplementedRecordExtensionServiceServer() {
}

// UnsafeRecordExtensionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordExtensionServiceServer will
// result in compilation errors.
type UnsafeRecordExtensionServiceServer interface {
	mustEmbedUnimplementedRecordExtensionServiceServer()
}

func RegisterRecordExtensionServiceServer(s grpc.ServiceRegistrar, srv RecordExtensionServiceServer) {
	s.RegisterService(&RecordExtensionService_ServiceDesc, srv)
}

func _RecordExtensionService_BeforeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeforeListRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).BeforeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/BeforeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).BeforeList(ctx, req.(*BeforeListRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).List(ctx, req.(*ListRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_AfterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterListRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).AfterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/AfterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).AfterList(ctx, req.(*AfterListRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_BeforeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeforeCreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).BeforeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/BeforeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).BeforeCreate(ctx, req.(*BeforeCreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).Create(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_AfterCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterCreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).AfterCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/AfterCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).AfterCreate(ctx, req.(*AfterCreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_BeforeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeforeUpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).BeforeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/BeforeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).BeforeUpdate(ctx, req.(*BeforeUpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).Update(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_AfterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterUpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).AfterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/AfterUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).AfterUpdate(ctx, req.(*AfterUpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_BeforeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeforeDeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).BeforeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/BeforeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).BeforeDelete(ctx, req.(*BeforeDeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).Delete(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_AfterDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterDeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).AfterDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/AfterDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).AfterDelete(ctx, req.(*AfterDeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_BeforeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeforeGetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).BeforeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/BeforeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).BeforeGet(ctx, req.(*BeforeGetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).Get(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordExtensionService_AfterGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AfterGetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordExtensionServiceServer).AfterGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ext.RecordExtensionService/AfterGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordExtensionServiceServer).AfterGet(ctx, req.(*AfterGetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordExtensionService_ServiceDesc is the grpc.ServiceDesc for RecordExtensionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordExtensionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ext.RecordExtensionService",
	HandlerType: (*RecordExtensionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeforeList",
			Handler:    _RecordExtensionService_BeforeList_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RecordExtensionService_List_Handler,
		},
		{
			MethodName: "AfterList",
			Handler:    _RecordExtensionService_AfterList_Handler,
		},
		{
			MethodName: "BeforeCreate",
			Handler:    _RecordExtensionService_BeforeCreate_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RecordExtensionService_Create_Handler,
		},
		{
			MethodName: "AfterCreate",
			Handler:    _RecordExtensionService_AfterCreate_Handler,
		},
		{
			MethodName: "BeforeUpdate",
			Handler:    _RecordExtensionService_BeforeUpdate_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RecordExtensionService_Update_Handler,
		},
		{
			MethodName: "AfterUpdate",
			Handler:    _RecordExtensionService_AfterUpdate_Handler,
		},
		{
			MethodName: "BeforeDelete",
			Handler:    _RecordExtensionService_BeforeDelete_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RecordExtensionService_Delete_Handler,
		},
		{
			MethodName: "AfterDelete",
			Handler:    _RecordExtensionService_AfterDelete_Handler,
		},
		{
			MethodName: "BeforeGet",
			Handler:    _RecordExtensionService_BeforeGet_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RecordExtensionService_Get_Handler,
		},
		{
			MethodName: "AfterGet",
			Handler:    _RecordExtensionService_AfterGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ext/record.proto",
}
