/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: stub/rest/record.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../model/record";
import * as dependency_2 from "./../../model/query";
import * as dependency_3 from "./../../model/error";
import * as dependency_4 from "./../../google/api/annotations";
import * as dependency_5 from "./../../google/protobuf/struct";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace rest {
    export class CreateRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            properties?: Map<string, dependency_5.google.protobuf.Value>;
            annotations?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("properties" in data && data.properties != undefined) {
                    this.properties = data.properties;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
            }
            if (!this.properties)
                this.properties = new Map();
            if (!this.annotations)
                this.annotations = new Map();
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get properties() {
            return pb_1.Message.getField(this, 5) as any as Map<string, dependency_5.google.protobuf.Value>;
        }
        set properties(value: Map<string, dependency_5.google.protobuf.Value>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get annotations() {
            return pb_1.Message.getField(this, 103) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 103, value as any);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            properties?: {
                [key: string]: ReturnType<typeof dependency_5.google.protobuf.Value.prototype.toObject>;
            };
            annotations?: {
                [key: string]: string;
            };
        }): CreateRecordRequest {
            const message = new CreateRecordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (typeof data.properties == "object") {
                message.properties = new Map(Object.entries(data.properties).map(([key, value]) => [key, dependency_5.google.protobuf.Value.fromObject(value)]));
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                properties?: {
                    [key: string]: ReturnType<typeof dependency_5.google.protobuf.Value.prototype.toObject>;
                };
                annotations?: {
                    [key: string]: string;
                };
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.properties != null) {
                data.properties = (Object.fromEntries)((Array.from)(this.properties).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            for (const [key, value] of this.properties) {
                writer.writeMessage(5, this.properties, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.annotations) {
                writer.writeMessage(103, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.properties as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_5.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 103:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRecordRequest {
            return CreateRecordRequest.deserialize(bytes);
        }
    }
    export class CreateRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            properties?: Map<string, dependency_5.google.protobuf.Value>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("properties" in data && data.properties != undefined) {
                    this.properties = data.properties;
                }
            }
            if (!this.properties)
                this.properties = new Map();
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get properties() {
            return pb_1.Message.getField(this, 5) as any as Map<string, dependency_5.google.protobuf.Value>;
        }
        set properties(value: Map<string, dependency_5.google.protobuf.Value>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        static fromObject(data: {
            id?: string;
            properties?: {
                [key: string]: ReturnType<typeof dependency_5.google.protobuf.Value.prototype.toObject>;
            };
        }): CreateRecordResponse {
            const message = new CreateRecordResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (typeof data.properties == "object") {
                message.properties = new Map(Object.entries(data.properties).map(([key, value]) => [key, dependency_5.google.protobuf.Value.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                properties?: {
                    [key: string]: ReturnType<typeof dependency_5.google.protobuf.Value.prototype.toObject>;
                };
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.properties != null) {
                data.properties = (Object.fromEntries)((Array.from)(this.properties).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(4, this.id);
            for (const [key, value] of this.properties) {
                writer.writeMessage(5, this.properties, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 4:
                        message.id = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.properties as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_5.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRecordResponse {
            return CreateRecordResponse.deserialize(bytes);
        }
    }
    export class UpdateRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            id?: string;
            properties?: Map<string, dependency_5.google.protobuf.Value>;
            checkVersion?: boolean;
            annotations?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("properties" in data && data.properties != undefined) {
                    this.properties = data.properties;
                }
                if ("checkVersion" in data && data.checkVersion != undefined) {
                    this.checkVersion = data.checkVersion;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
            }
            if (!this.properties)
                this.properties = new Map();
            if (!this.annotations)
                this.annotations = new Map();
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get properties() {
            return pb_1.Message.getField(this, 5) as any as Map<string, dependency_5.google.protobuf.Value>;
        }
        set properties(value: Map<string, dependency_5.google.protobuf.Value>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get checkVersion() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set checkVersion(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get annotations() {
            return pb_1.Message.getField(this, 103) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 103, value as any);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            id?: string;
            properties?: {
                [key: string]: ReturnType<typeof dependency_5.google.protobuf.Value.prototype.toObject>;
            };
            checkVersion?: boolean;
            annotations?: {
                [key: string]: string;
            };
        }): UpdateRecordRequest {
            const message = new UpdateRecordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (typeof data.properties == "object") {
                message.properties = new Map(Object.entries(data.properties).map(([key, value]) => [key, dependency_5.google.protobuf.Value.fromObject(value)]));
            }
            if (data.checkVersion != null) {
                message.checkVersion = data.checkVersion;
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                id?: string;
                properties?: {
                    [key: string]: ReturnType<typeof dependency_5.google.protobuf.Value.prototype.toObject>;
                };
                checkVersion?: boolean;
                annotations?: {
                    [key: string]: string;
                };
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.properties != null) {
                data.properties = (Object.fromEntries)((Array.from)(this.properties).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.checkVersion != null) {
                data.checkVersion = this.checkVersion;
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            if (this.id.length)
                writer.writeString(4, this.id);
            for (const [key, value] of this.properties) {
                writer.writeMessage(5, this.properties, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (this.checkVersion != false)
                writer.writeBool(6, this.checkVersion);
            for (const [key, value] of this.annotations) {
                writer.writeMessage(103, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.properties as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_5.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 6:
                        message.checkVersion = reader.readBool();
                        break;
                    case 103:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRecordRequest {
            return UpdateRecordRequest.deserialize(bytes);
        }
    }
    export class UpdateRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            properties?: Map<string, dependency_5.google.protobuf.Value>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("properties" in data && data.properties != undefined) {
                    this.properties = data.properties;
                }
            }
            if (!this.properties)
                this.properties = new Map();
        }
        get properties() {
            return pb_1.Message.getField(this, 5) as any as Map<string, dependency_5.google.protobuf.Value>;
        }
        set properties(value: Map<string, dependency_5.google.protobuf.Value>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        static fromObject(data: {
            properties?: {
                [key: string]: ReturnType<typeof dependency_5.google.protobuf.Value.prototype.toObject>;
            };
        }): UpdateRecordResponse {
            const message = new UpdateRecordResponse({});
            if (typeof data.properties == "object") {
                message.properties = new Map(Object.entries(data.properties).map(([key, value]) => [key, dependency_5.google.protobuf.Value.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                properties?: {
                    [key: string]: ReturnType<typeof dependency_5.google.protobuf.Value.prototype.toObject>;
                };
            } = {};
            if (this.properties != null) {
                data.properties = (Object.fromEntries)((Array.from)(this.properties).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            for (const [key, value] of this.properties) {
                writer.writeMessage(5, this.properties, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.properties as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_5.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRecordResponse {
            return UpdateRecordResponse.deserialize(bytes);
        }
    }
    export class DeleteRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            id?: string;
            annotations?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
            }
            if (!this.annotations)
                this.annotations = new Map();
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get annotations() {
            return pb_1.Message.getField(this, 103) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 103, value as any);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            id?: string;
            annotations?: {
                [key: string]: string;
            };
        }): DeleteRecordRequest {
            const message = new DeleteRecordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                id?: string;
                annotations?: {
                    [key: string]: string;
                };
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            if (this.id.length)
                writer.writeString(4, this.id);
            for (const [key, value] of this.annotations) {
                writer.writeMessage(103, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readString();
                        break;
                    case 103:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRecordRequest {
            return DeleteRecordRequest.deserialize(bytes);
        }
    }
    export class DeleteRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteRecordResponse {
            const message = new DeleteRecordResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRecordResponse {
            return DeleteRecordResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedRecordService {
        static definition = {
            Create: {
                path: "/rest.Record/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateRecordResponse.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/rest.Record/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateRecordResponse.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/rest.Record/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteRecordResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Create(call: grpc_1.ServerUnaryCall<CreateRecordRequest, CreateRecordResponse>, callback: grpc_1.sendUnaryData<CreateRecordResponse>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<UpdateRecordRequest, UpdateRecordResponse>, callback: grpc_1.sendUnaryData<UpdateRecordResponse>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<DeleteRecordRequest, DeleteRecordResponse>, callback: grpc_1.sendUnaryData<DeleteRecordResponse>): void;
    }
    export class RecordClient extends grpc_1.makeGenericClientConstructor(UnimplementedRecordService.definition, "Record", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Create: GrpcUnaryServiceInterface<CreateRecordRequest, CreateRecordResponse> = (message: CreateRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateRecordResponse>, callback?: grpc_1.requestCallback<CreateRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        Update: GrpcUnaryServiceInterface<UpdateRecordRequest, UpdateRecordResponse> = (message: UpdateRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateRecordResponse>, callback?: grpc_1.requestCallback<UpdateRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.Update(message, metadata, options, callback);
        };
        Delete: GrpcUnaryServiceInterface<DeleteRecordRequest, DeleteRecordResponse> = (message: DeleteRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteRecordResponse>, callback?: grpc_1.requestCallback<DeleteRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.Delete(message, metadata, options, callback);
        };
    }
}
