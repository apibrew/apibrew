/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: stub/data-source.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../model/data-source";
import * as dependency_2 from "./../model/error";
import * as dependency_3 from "./../model/resource";
import * as dependency_4 from "./../google/api/annotations";
import * as dependency_5 from "./../openapiv3/annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class PrepareResourceFromEntityRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        id?: string;
        catalog?: string;
        entity?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("catalog" in data && data.catalog != undefined) {
                this.catalog = data.catalog;
            }
            if ("entity" in data && data.entity != undefined) {
                this.entity = data.entity;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get catalog() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set catalog(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get entity() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set entity(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        token?: string;
        id?: string;
        catalog?: string;
        entity?: string;
    }): PrepareResourceFromEntityRequest {
        const message = new PrepareResourceFromEntityRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.catalog != null) {
            message.catalog = data.catalog;
        }
        if (data.entity != null) {
            message.entity = data.entity;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            id?: string;
            catalog?: string;
            entity?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.catalog != null) {
            data.catalog = this.catalog;
        }
        if (this.entity != null) {
            data.entity = this.entity;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.id.length)
            writer.writeString(2, this.id);
        if (this.catalog.length)
            writer.writeString(3, this.catalog);
        if (this.entity.length)
            writer.writeString(4, this.entity);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareResourceFromEntityRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareResourceFromEntityRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    message.id = reader.readString();
                    break;
                case 3:
                    message.catalog = reader.readString();
                    break;
                case 4:
                    message.entity = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PrepareResourceFromEntityRequest {
        return PrepareResourceFromEntityRequest.deserialize(bytes);
    }
}
export class PrepareResourceFromEntityResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        resource?: dependency_3.Resource;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("resource" in data && data.resource != undefined) {
                this.resource = data.resource;
            }
        }
    }
    get resource() {
        return pb_1.Message.getWrapperField(this, dependency_3.Resource, 1) as dependency_3.Resource;
    }
    set resource(value: dependency_3.Resource) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasResource() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        resource?: ReturnType<typeof dependency_3.Resource.prototype.toObject>;
    }): PrepareResourceFromEntityResponse {
        const message = new PrepareResourceFromEntityResponse({});
        if (data.resource != null) {
            message.resource = dependency_3.Resource.fromObject(data.resource);
        }
        return message;
    }
    toObject() {
        const data: {
            resource?: ReturnType<typeof dependency_3.Resource.prototype.toObject>;
        } = {};
        if (this.resource != null) {
            data.resource = this.resource.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasResource)
            writer.writeMessage(1, this.resource, () => this.resource.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareResourceFromEntityResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareResourceFromEntityResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.resource, () => message.resource = dependency_3.Resource.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PrepareResourceFromEntityResponse {
        return PrepareResourceFromEntityResponse.deserialize(bytes);
    }
}
export class StatusRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        token?: string;
        id?: string;
    }): StatusRequest {
        const message = new StatusRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            id?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.id.length)
            writer.writeString(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StatusRequest {
        return StatusRequest.deserialize(bytes);
    }
}
export class StatusResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        connectionAlreadyInitiated?: boolean;
        testConnection?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("connectionAlreadyInitiated" in data && data.connectionAlreadyInitiated != undefined) {
                this.connectionAlreadyInitiated = data.connectionAlreadyInitiated;
            }
            if ("testConnection" in data && data.testConnection != undefined) {
                this.testConnection = data.testConnection;
            }
        }
    }
    get connectionAlreadyInitiated() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set connectionAlreadyInitiated(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get testConnection() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set testConnection(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        connectionAlreadyInitiated?: boolean;
        testConnection?: boolean;
    }): StatusResponse {
        const message = new StatusResponse({});
        if (data.connectionAlreadyInitiated != null) {
            message.connectionAlreadyInitiated = data.connectionAlreadyInitiated;
        }
        if (data.testConnection != null) {
            message.testConnection = data.testConnection;
        }
        return message;
    }
    toObject() {
        const data: {
            connectionAlreadyInitiated?: boolean;
            testConnection?: boolean;
        } = {};
        if (this.connectionAlreadyInitiated != null) {
            data.connectionAlreadyInitiated = this.connectionAlreadyInitiated;
        }
        if (this.testConnection != null) {
            data.testConnection = this.testConnection;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.connectionAlreadyInitiated != false)
            writer.writeBool(1, this.connectionAlreadyInitiated);
        if (this.testConnection != false)
            writer.writeBool(2, this.testConnection);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StatusResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StatusResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.connectionAlreadyInitiated = reader.readBool();
                    break;
                case 2:
                    message.testConnection = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StatusResponse {
        return StatusResponse.deserialize(bytes);
    }
}
export class ListEntitiesRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        token?: string;
        id?: string;
    }): ListEntitiesRequest {
        const message = new ListEntitiesRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            id?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.id.length)
            writer.writeString(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListEntitiesRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListEntitiesRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListEntitiesRequest {
        return ListEntitiesRequest.deserialize(bytes);
    }
}
export class ListEntitiesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        catalogs?: dependency_1.DataSourceCatalog[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("catalogs" in data && data.catalogs != undefined) {
                this.catalogs = data.catalogs;
            }
        }
    }
    get catalogs() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.DataSourceCatalog, 1) as dependency_1.DataSourceCatalog[];
    }
    set catalogs(value: dependency_1.DataSourceCatalog[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        catalogs?: ReturnType<typeof dependency_1.DataSourceCatalog.prototype.toObject>[];
    }): ListEntitiesResponse {
        const message = new ListEntitiesResponse({});
        if (data.catalogs != null) {
            message.catalogs = data.catalogs.map(item => dependency_1.DataSourceCatalog.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            catalogs?: ReturnType<typeof dependency_1.DataSourceCatalog.prototype.toObject>[];
        } = {};
        if (this.catalogs != null) {
            data.catalogs = this.catalogs.map((item: dependency_1.DataSourceCatalog) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.catalogs.length)
            writer.writeRepeatedMessage(1, this.catalogs, (item: dependency_1.DataSourceCatalog) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListEntitiesResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListEntitiesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.catalogs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.DataSourceCatalog.deserialize(reader), dependency_1.DataSourceCatalog));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListEntitiesResponse {
        return ListEntitiesResponse.deserialize(bytes);
    }
}
export class ListDataSourceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        token?: string;
    }): ListDataSourceRequest {
        const message = new ListDataSourceRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListDataSourceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListDataSourceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListDataSourceRequest {
        return ListDataSourceRequest.deserialize(bytes);
    }
}
export class ListDataSourceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        content?: dependency_1.DataSource[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
        }
    }
    get content() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.DataSource, 2) as dependency_1.DataSource[];
    }
    set content(value: dependency_1.DataSource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        content?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
    }): ListDataSourceResponse {
        const message = new ListDataSourceResponse({});
        if (data.content != null) {
            message.content = data.content.map(item => dependency_1.DataSource.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            content?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
        } = {};
        if (this.content != null) {
            data.content = this.content.map((item: dependency_1.DataSource) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.content.length)
            writer.writeRepeatedMessage(2, this.content, (item: dependency_1.DataSource) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListDataSourceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListDataSourceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    reader.readMessage(message.content, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.DataSource.deserialize(reader), dependency_1.DataSource));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListDataSourceResponse {
        return ListDataSourceResponse.deserialize(bytes);
    }
}
export class CreateDataSourceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        dataSources?: dependency_1.DataSource[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("dataSources" in data && data.dataSources != undefined) {
                this.dataSources = data.dataSources;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get dataSources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.DataSource, 2) as dependency_1.DataSource[];
    }
    set dataSources(value: dependency_1.DataSource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        token?: string;
        dataSources?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
    }): CreateDataSourceRequest {
        const message = new CreateDataSourceRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.dataSources != null) {
            message.dataSources = data.dataSources.map(item => dependency_1.DataSource.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            dataSources?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.dataSources != null) {
            data.dataSources = this.dataSources.map((item: dependency_1.DataSource) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.dataSources.length)
            writer.writeRepeatedMessage(2, this.dataSources, (item: dependency_1.DataSource) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateDataSourceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateDataSourceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.dataSources, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.DataSource.deserialize(reader), dependency_1.DataSource));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateDataSourceRequest {
        return CreateDataSourceRequest.deserialize(bytes);
    }
}
export class CreateDataSourceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        dataSources?: dependency_1.DataSource[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dataSources" in data && data.dataSources != undefined) {
                this.dataSources = data.dataSources;
            }
        }
    }
    get dataSources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.DataSource, 1) as dependency_1.DataSource[];
    }
    set dataSources(value: dependency_1.DataSource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        dataSources?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
    }): CreateDataSourceResponse {
        const message = new CreateDataSourceResponse({});
        if (data.dataSources != null) {
            message.dataSources = data.dataSources.map(item => dependency_1.DataSource.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            dataSources?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
        } = {};
        if (this.dataSources != null) {
            data.dataSources = this.dataSources.map((item: dependency_1.DataSource) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.dataSources.length)
            writer.writeRepeatedMessage(1, this.dataSources, (item: dependency_1.DataSource) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateDataSourceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateDataSourceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.dataSources, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.DataSource.deserialize(reader), dependency_1.DataSource));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateDataSourceResponse {
        return CreateDataSourceResponse.deserialize(bytes);
    }
}
export class UpdateDataSourceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        dataSources?: dependency_1.DataSource[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("dataSources" in data && data.dataSources != undefined) {
                this.dataSources = data.dataSources;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get dataSources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.DataSource, 2) as dependency_1.DataSource[];
    }
    set dataSources(value: dependency_1.DataSource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        token?: string;
        dataSources?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
    }): UpdateDataSourceRequest {
        const message = new UpdateDataSourceRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.dataSources != null) {
            message.dataSources = data.dataSources.map(item => dependency_1.DataSource.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            dataSources?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.dataSources != null) {
            data.dataSources = this.dataSources.map((item: dependency_1.DataSource) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.dataSources.length)
            writer.writeRepeatedMessage(2, this.dataSources, (item: dependency_1.DataSource) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDataSourceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDataSourceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.dataSources, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.DataSource.deserialize(reader), dependency_1.DataSource));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateDataSourceRequest {
        return UpdateDataSourceRequest.deserialize(bytes);
    }
}
export class UpdateDataSourceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        dataSources?: dependency_1.DataSource[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dataSources" in data && data.dataSources != undefined) {
                this.dataSources = data.dataSources;
            }
        }
    }
    get dataSources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.DataSource, 1) as dependency_1.DataSource[];
    }
    set dataSources(value: dependency_1.DataSource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        dataSources?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
    }): UpdateDataSourceResponse {
        const message = new UpdateDataSourceResponse({});
        if (data.dataSources != null) {
            message.dataSources = data.dataSources.map(item => dependency_1.DataSource.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            dataSources?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
        } = {};
        if (this.dataSources != null) {
            data.dataSources = this.dataSources.map((item: dependency_1.DataSource) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.dataSources.length)
            writer.writeRepeatedMessage(1, this.dataSources, (item: dependency_1.DataSource) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateDataSourceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateDataSourceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.dataSources, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.DataSource.deserialize(reader), dependency_1.DataSource));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateDataSourceResponse {
        return UpdateDataSourceResponse.deserialize(bytes);
    }
}
export class DeleteDataSourceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        ids?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("ids" in data && data.ids != undefined) {
                this.ids = data.ids;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get ids() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set ids(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        token?: string;
        ids?: string[];
    }): DeleteDataSourceRequest {
        const message = new DeleteDataSourceRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.ids != null) {
            message.ids = data.ids;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            ids?: string[];
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.ids != null) {
            data.ids = this.ids;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.ids.length)
            writer.writeRepeatedString(2, this.ids);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteDataSourceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteDataSourceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteDataSourceRequest {
        return DeleteDataSourceRequest.deserialize(bytes);
    }
}
export class DeleteDataSourceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): DeleteDataSourceResponse {
        const message = new DeleteDataSourceResponse({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteDataSourceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteDataSourceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteDataSourceResponse {
        return DeleteDataSourceResponse.deserialize(bytes);
    }
}
export class GetDataSourceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        token?: string;
        id?: string;
    }): GetDataSourceRequest {
        const message = new GetDataSourceRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            id?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.id.length)
            writer.writeString(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDataSourceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDataSourceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetDataSourceRequest {
        return GetDataSourceRequest.deserialize(bytes);
    }
}
export class GetDataSourceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        dataSource?: dependency_1.DataSource;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dataSource" in data && data.dataSource != undefined) {
                this.dataSource = data.dataSource;
            }
        }
    }
    get dataSource() {
        return pb_1.Message.getWrapperField(this, dependency_1.DataSource, 1) as dependency_1.DataSource;
    }
    set dataSource(value: dependency_1.DataSource) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasDataSource() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        dataSource?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>;
    }): GetDataSourceResponse {
        const message = new GetDataSourceResponse({});
        if (data.dataSource != null) {
            message.dataSource = dependency_1.DataSource.fromObject(data.dataSource);
        }
        return message;
    }
    toObject() {
        const data: {
            dataSource?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>;
        } = {};
        if (this.dataSource != null) {
            data.dataSource = this.dataSource.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasDataSource)
            writer.writeMessage(1, this.dataSource, () => this.dataSource.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDataSourceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDataSourceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.dataSource, () => message.dataSource = dependency_1.DataSource.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetDataSourceResponse {
        return GetDataSourceResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedDataSourceService {
    static definition = {
        Create: {
            path: "/stub.DataSource/Create",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateDataSourceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateDataSourceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateDataSourceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateDataSourceResponse.deserialize(new Uint8Array(bytes))
        },
        List: {
            path: "/stub.DataSource/List",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ListDataSourceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ListDataSourceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ListDataSourceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ListDataSourceResponse.deserialize(new Uint8Array(bytes))
        },
        Update: {
            path: "/stub.DataSource/Update",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdateDataSourceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdateDataSourceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UpdateDataSourceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UpdateDataSourceResponse.deserialize(new Uint8Array(bytes))
        },
        Delete: {
            path: "/stub.DataSource/Delete",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DeleteDataSourceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DeleteDataSourceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DeleteDataSourceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DeleteDataSourceResponse.deserialize(new Uint8Array(bytes))
        },
        Get: {
            path: "/stub.DataSource/Get",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetDataSourceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetDataSourceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetDataSourceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetDataSourceResponse.deserialize(new Uint8Array(bytes))
        },
        Status: {
            path: "/stub.DataSource/Status",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: StatusRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => StatusRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: StatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => StatusResponse.deserialize(new Uint8Array(bytes))
        },
        ListEntities: {
            path: "/stub.DataSource/ListEntities",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ListEntitiesRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ListEntitiesRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ListEntitiesResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ListEntitiesResponse.deserialize(new Uint8Array(bytes))
        },
        PrepareResourceFromEntity: {
            path: "/stub.DataSource/PrepareResourceFromEntity",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: PrepareResourceFromEntityRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => PrepareResourceFromEntityRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: PrepareResourceFromEntityResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => PrepareResourceFromEntityResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Create(call: grpc_1.ServerUnaryCall<CreateDataSourceRequest, CreateDataSourceResponse>, callback: grpc_1.sendUnaryData<CreateDataSourceResponse>): void;
    abstract List(call: grpc_1.ServerUnaryCall<ListDataSourceRequest, ListDataSourceResponse>, callback: grpc_1.sendUnaryData<ListDataSourceResponse>): void;
    abstract Update(call: grpc_1.ServerUnaryCall<UpdateDataSourceRequest, UpdateDataSourceResponse>, callback: grpc_1.sendUnaryData<UpdateDataSourceResponse>): void;
    abstract Delete(call: grpc_1.ServerUnaryCall<DeleteDataSourceRequest, DeleteDataSourceResponse>, callback: grpc_1.sendUnaryData<DeleteDataSourceResponse>): void;
    abstract Get(call: grpc_1.ServerUnaryCall<GetDataSourceRequest, GetDataSourceResponse>, callback: grpc_1.sendUnaryData<GetDataSourceResponse>): void;
    abstract Status(call: grpc_1.ServerUnaryCall<StatusRequest, StatusResponse>, callback: grpc_1.sendUnaryData<StatusResponse>): void;
    abstract ListEntities(call: grpc_1.ServerUnaryCall<ListEntitiesRequest, ListEntitiesResponse>, callback: grpc_1.sendUnaryData<ListEntitiesResponse>): void;
    abstract PrepareResourceFromEntity(call: grpc_1.ServerUnaryCall<PrepareResourceFromEntityRequest, PrepareResourceFromEntityResponse>, callback: grpc_1.sendUnaryData<PrepareResourceFromEntityResponse>): void;
}
export class DataSourceClient extends grpc_1.makeGenericClientConstructor(UnimplementedDataSourceService.definition, "DataSource", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    Create: GrpcUnaryServiceInterface<CreateDataSourceRequest, CreateDataSourceResponse> = (message: CreateDataSourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateDataSourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateDataSourceResponse>, callback?: grpc_1.requestCallback<CreateDataSourceResponse>): grpc_1.ClientUnaryCall => {
        return super.Create(message, metadata, options, callback);
    };
    List: GrpcUnaryServiceInterface<ListDataSourceRequest, ListDataSourceResponse> = (message: ListDataSourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListDataSourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListDataSourceResponse>, callback?: grpc_1.requestCallback<ListDataSourceResponse>): grpc_1.ClientUnaryCall => {
        return super.List(message, metadata, options, callback);
    };
    Update: GrpcUnaryServiceInterface<UpdateDataSourceRequest, UpdateDataSourceResponse> = (message: UpdateDataSourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateDataSourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateDataSourceResponse>, callback?: grpc_1.requestCallback<UpdateDataSourceResponse>): grpc_1.ClientUnaryCall => {
        return super.Update(message, metadata, options, callback);
    };
    Delete: GrpcUnaryServiceInterface<DeleteDataSourceRequest, DeleteDataSourceResponse> = (message: DeleteDataSourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteDataSourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteDataSourceResponse>, callback?: grpc_1.requestCallback<DeleteDataSourceResponse>): grpc_1.ClientUnaryCall => {
        return super.Delete(message, metadata, options, callback);
    };
    Get: GrpcUnaryServiceInterface<GetDataSourceRequest, GetDataSourceResponse> = (message: GetDataSourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetDataSourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetDataSourceResponse>, callback?: grpc_1.requestCallback<GetDataSourceResponse>): grpc_1.ClientUnaryCall => {
        return super.Get(message, metadata, options, callback);
    };
    Status: GrpcUnaryServiceInterface<StatusRequest, StatusResponse> = (message: StatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StatusResponse>, callback?: grpc_1.requestCallback<StatusResponse>): grpc_1.ClientUnaryCall => {
        return super.Status(message, metadata, options, callback);
    };
    ListEntities: GrpcUnaryServiceInterface<ListEntitiesRequest, ListEntitiesResponse> = (message: ListEntitiesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListEntitiesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListEntitiesResponse>, callback?: grpc_1.requestCallback<ListEntitiesResponse>): grpc_1.ClientUnaryCall => {
        return super.ListEntities(message, metadata, options, callback);
    };
    PrepareResourceFromEntity: GrpcUnaryServiceInterface<PrepareResourceFromEntityRequest, PrepareResourceFromEntityResponse> = (message: PrepareResourceFromEntityRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PrepareResourceFromEntityResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PrepareResourceFromEntityResponse>, callback?: grpc_1.requestCallback<PrepareResourceFromEntityResponse>): grpc_1.ClientUnaryCall => {
        return super.PrepareResourceFromEntity(message, metadata, options, callback);
    };
}
