/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: stub/resource.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../model/error";
import * as dependency_2 from "./../model/resource";
import * as dependency_3 from "./../model/resource-migration";
import * as dependency_4 from "./../google/api/annotations";
import * as dependency_5 from "./../openapiv3/annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class PrepareResourceMigrationPlanRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        prepareFromDataSource?: boolean;
        resources?: dependency_2.Resource[];
        annotations?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("prepareFromDataSource" in data && data.prepareFromDataSource != undefined) {
                this.prepareFromDataSource = data.prepareFromDataSource;
            }
            if ("resources" in data && data.resources != undefined) {
                this.resources = data.resources;
            }
            if ("annotations" in data && data.annotations != undefined) {
                this.annotations = data.annotations;
            }
        }
        if (!this.annotations)
            this.annotations = new Map();
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get prepareFromDataSource() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set prepareFromDataSource(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get resources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Resource, 3) as dependency_2.Resource[];
    }
    set resources(value: dependency_2.Resource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get annotations() {
        return pb_1.Message.getField(this, 103) as any as Map<string, string>;
    }
    set annotations(value: Map<string, string>) {
        pb_1.Message.setField(this, 103, value as any);
    }
    static fromObject(data: {
        token?: string;
        prepareFromDataSource?: boolean;
        resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
        annotations?: {
            [key: string]: string;
        };
    }): PrepareResourceMigrationPlanRequest {
        const message = new PrepareResourceMigrationPlanRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.prepareFromDataSource != null) {
            message.prepareFromDataSource = data.prepareFromDataSource;
        }
        if (data.resources != null) {
            message.resources = data.resources.map(item => dependency_2.Resource.fromObject(item));
        }
        if (typeof data.annotations == "object") {
            message.annotations = new Map(Object.entries(data.annotations));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            prepareFromDataSource?: boolean;
            resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
            annotations?: {
                [key: string]: string;
            };
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.prepareFromDataSource != null) {
            data.prepareFromDataSource = this.prepareFromDataSource;
        }
        if (this.resources != null) {
            data.resources = this.resources.map((item: dependency_2.Resource) => item.toObject());
        }
        if (this.annotations != null) {
            data.annotations = (Object.fromEntries)(this.annotations);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.prepareFromDataSource != false)
            writer.writeBool(2, this.prepareFromDataSource);
        if (this.resources.length)
            writer.writeRepeatedMessage(3, this.resources, (item: dependency_2.Resource) => item.serialize(writer));
        for (const [key, value] of this.annotations) {
            writer.writeMessage(103, this.annotations, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareResourceMigrationPlanRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareResourceMigrationPlanRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    message.prepareFromDataSource = reader.readBool();
                    break;
                case 3:
                    reader.readMessage(message.resources, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.Resource.deserialize(reader), dependency_2.Resource));
                    break;
                case 103:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PrepareResourceMigrationPlanRequest {
        return PrepareResourceMigrationPlanRequest.deserialize(bytes);
    }
}
export class PrepareResourceMigrationPlanResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        plans?: dependency_3.ResourceMigrationPlan[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("plans" in data && data.plans != undefined) {
                this.plans = data.plans;
            }
        }
    }
    get plans() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.ResourceMigrationPlan, 1) as dependency_3.ResourceMigrationPlan[];
    }
    set plans(value: dependency_3.ResourceMigrationPlan[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        plans?: ReturnType<typeof dependency_3.ResourceMigrationPlan.prototype.toObject>[];
    }): PrepareResourceMigrationPlanResponse {
        const message = new PrepareResourceMigrationPlanResponse({});
        if (data.plans != null) {
            message.plans = data.plans.map(item => dependency_3.ResourceMigrationPlan.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            plans?: ReturnType<typeof dependency_3.ResourceMigrationPlan.prototype.toObject>[];
        } = {};
        if (this.plans != null) {
            data.plans = this.plans.map((item: dependency_3.ResourceMigrationPlan) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.plans.length)
            writer.writeRepeatedMessage(1, this.plans, (item: dependency_3.ResourceMigrationPlan) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PrepareResourceMigrationPlanResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrepareResourceMigrationPlanResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.plans, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.ResourceMigrationPlan.deserialize(reader), dependency_3.ResourceMigrationPlan));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PrepareResourceMigrationPlanResponse {
        return PrepareResourceMigrationPlanResponse.deserialize(bytes);
    }
}
export class CreateResourceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        resources?: dependency_2.Resource[];
        doMigration?: boolean;
        forceMigration?: boolean;
        annotations?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("resources" in data && data.resources != undefined) {
                this.resources = data.resources;
            }
            if ("doMigration" in data && data.doMigration != undefined) {
                this.doMigration = data.doMigration;
            }
            if ("forceMigration" in data && data.forceMigration != undefined) {
                this.forceMigration = data.forceMigration;
            }
            if ("annotations" in data && data.annotations != undefined) {
                this.annotations = data.annotations;
            }
        }
        if (!this.annotations)
            this.annotations = new Map();
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get resources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Resource, 2) as dependency_2.Resource[];
    }
    set resources(value: dependency_2.Resource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get doMigration() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set doMigration(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get forceMigration() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set forceMigration(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get annotations() {
        return pb_1.Message.getField(this, 103) as any as Map<string, string>;
    }
    set annotations(value: Map<string, string>) {
        pb_1.Message.setField(this, 103, value as any);
    }
    static fromObject(data: {
        token?: string;
        resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
        doMigration?: boolean;
        forceMigration?: boolean;
        annotations?: {
            [key: string]: string;
        };
    }): CreateResourceRequest {
        const message = new CreateResourceRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.resources != null) {
            message.resources = data.resources.map(item => dependency_2.Resource.fromObject(item));
        }
        if (data.doMigration != null) {
            message.doMigration = data.doMigration;
        }
        if (data.forceMigration != null) {
            message.forceMigration = data.forceMigration;
        }
        if (typeof data.annotations == "object") {
            message.annotations = new Map(Object.entries(data.annotations));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
            doMigration?: boolean;
            forceMigration?: boolean;
            annotations?: {
                [key: string]: string;
            };
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.resources != null) {
            data.resources = this.resources.map((item: dependency_2.Resource) => item.toObject());
        }
        if (this.doMigration != null) {
            data.doMigration = this.doMigration;
        }
        if (this.forceMigration != null) {
            data.forceMigration = this.forceMigration;
        }
        if (this.annotations != null) {
            data.annotations = (Object.fromEntries)(this.annotations);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.resources.length)
            writer.writeRepeatedMessage(2, this.resources, (item: dependency_2.Resource) => item.serialize(writer));
        if (this.doMigration != false)
            writer.writeBool(3, this.doMigration);
        if (this.forceMigration != false)
            writer.writeBool(4, this.forceMigration);
        for (const [key, value] of this.annotations) {
            writer.writeMessage(103, this.annotations, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateResourceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateResourceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.resources, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.Resource.deserialize(reader), dependency_2.Resource));
                    break;
                case 3:
                    message.doMigration = reader.readBool();
                    break;
                case 4:
                    message.forceMigration = reader.readBool();
                    break;
                case 103:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateResourceRequest {
        return CreateResourceRequest.deserialize(bytes);
    }
}
export class CreateResourceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        resources?: dependency_2.Resource[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("resources" in data && data.resources != undefined) {
                this.resources = data.resources;
            }
        }
    }
    get resources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Resource, 1) as dependency_2.Resource[];
    }
    set resources(value: dependency_2.Resource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
    }): CreateResourceResponse {
        const message = new CreateResourceResponse({});
        if (data.resources != null) {
            message.resources = data.resources.map(item => dependency_2.Resource.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
        } = {};
        if (this.resources != null) {
            data.resources = this.resources.map((item: dependency_2.Resource) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.resources.length)
            writer.writeRepeatedMessage(1, this.resources, (item: dependency_2.Resource) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateResourceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateResourceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.resources, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.Resource.deserialize(reader), dependency_2.Resource));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateResourceResponse {
        return CreateResourceResponse.deserialize(bytes);
    }
}
export class UpdateResourceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        resources?: dependency_2.Resource[];
        doMigration?: boolean;
        forceMigration?: boolean;
        annotations?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("resources" in data && data.resources != undefined) {
                this.resources = data.resources;
            }
            if ("doMigration" in data && data.doMigration != undefined) {
                this.doMigration = data.doMigration;
            }
            if ("forceMigration" in data && data.forceMigration != undefined) {
                this.forceMigration = data.forceMigration;
            }
            if ("annotations" in data && data.annotations != undefined) {
                this.annotations = data.annotations;
            }
        }
        if (!this.annotations)
            this.annotations = new Map();
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get resources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Resource, 2) as dependency_2.Resource[];
    }
    set resources(value: dependency_2.Resource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get doMigration() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set doMigration(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get forceMigration() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set forceMigration(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get annotations() {
        return pb_1.Message.getField(this, 103) as any as Map<string, string>;
    }
    set annotations(value: Map<string, string>) {
        pb_1.Message.setField(this, 103, value as any);
    }
    static fromObject(data: {
        token?: string;
        resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
        doMigration?: boolean;
        forceMigration?: boolean;
        annotations?: {
            [key: string]: string;
        };
    }): UpdateResourceRequest {
        const message = new UpdateResourceRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.resources != null) {
            message.resources = data.resources.map(item => dependency_2.Resource.fromObject(item));
        }
        if (data.doMigration != null) {
            message.doMigration = data.doMigration;
        }
        if (data.forceMigration != null) {
            message.forceMigration = data.forceMigration;
        }
        if (typeof data.annotations == "object") {
            message.annotations = new Map(Object.entries(data.annotations));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
            doMigration?: boolean;
            forceMigration?: boolean;
            annotations?: {
                [key: string]: string;
            };
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.resources != null) {
            data.resources = this.resources.map((item: dependency_2.Resource) => item.toObject());
        }
        if (this.doMigration != null) {
            data.doMigration = this.doMigration;
        }
        if (this.forceMigration != null) {
            data.forceMigration = this.forceMigration;
        }
        if (this.annotations != null) {
            data.annotations = (Object.fromEntries)(this.annotations);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.resources.length)
            writer.writeRepeatedMessage(2, this.resources, (item: dependency_2.Resource) => item.serialize(writer));
        if (this.doMigration != false)
            writer.writeBool(3, this.doMigration);
        if (this.forceMigration != false)
            writer.writeBool(4, this.forceMigration);
        for (const [key, value] of this.annotations) {
            writer.writeMessage(103, this.annotations, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateResourceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateResourceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.resources, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.Resource.deserialize(reader), dependency_2.Resource));
                    break;
                case 3:
                    message.doMigration = reader.readBool();
                    break;
                case 4:
                    message.forceMigration = reader.readBool();
                    break;
                case 103:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateResourceRequest {
        return UpdateResourceRequest.deserialize(bytes);
    }
}
export class UpdateResourceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        resources?: dependency_2.Resource[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("resources" in data && data.resources != undefined) {
                this.resources = data.resources;
            }
        }
    }
    get resources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Resource, 1) as dependency_2.Resource[];
    }
    set resources(value: dependency_2.Resource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
    }): UpdateResourceResponse {
        const message = new UpdateResourceResponse({});
        if (data.resources != null) {
            message.resources = data.resources.map(item => dependency_2.Resource.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
        } = {};
        if (this.resources != null) {
            data.resources = this.resources.map((item: dependency_2.Resource) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.resources.length)
            writer.writeRepeatedMessage(1, this.resources, (item: dependency_2.Resource) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateResourceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateResourceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.resources, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.Resource.deserialize(reader), dependency_2.Resource));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateResourceResponse {
        return UpdateResourceResponse.deserialize(bytes);
    }
}
export class DeleteResourceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        ids?: string[];
        doMigration?: boolean;
        forceMigration?: boolean;
        annotations?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("ids" in data && data.ids != undefined) {
                this.ids = data.ids;
            }
            if ("doMigration" in data && data.doMigration != undefined) {
                this.doMigration = data.doMigration;
            }
            if ("forceMigration" in data && data.forceMigration != undefined) {
                this.forceMigration = data.forceMigration;
            }
            if ("annotations" in data && data.annotations != undefined) {
                this.annotations = data.annotations;
            }
        }
        if (!this.annotations)
            this.annotations = new Map();
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get ids() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
    }
    set ids(value: string[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get doMigration() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set doMigration(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get forceMigration() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set forceMigration(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get annotations() {
        return pb_1.Message.getField(this, 103) as any as Map<string, string>;
    }
    set annotations(value: Map<string, string>) {
        pb_1.Message.setField(this, 103, value as any);
    }
    static fromObject(data: {
        token?: string;
        ids?: string[];
        doMigration?: boolean;
        forceMigration?: boolean;
        annotations?: {
            [key: string]: string;
        };
    }): DeleteResourceRequest {
        const message = new DeleteResourceRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.ids != null) {
            message.ids = data.ids;
        }
        if (data.doMigration != null) {
            message.doMigration = data.doMigration;
        }
        if (data.forceMigration != null) {
            message.forceMigration = data.forceMigration;
        }
        if (typeof data.annotations == "object") {
            message.annotations = new Map(Object.entries(data.annotations));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            ids?: string[];
            doMigration?: boolean;
            forceMigration?: boolean;
            annotations?: {
                [key: string]: string;
            };
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.ids != null) {
            data.ids = this.ids;
        }
        if (this.doMigration != null) {
            data.doMigration = this.doMigration;
        }
        if (this.forceMigration != null) {
            data.forceMigration = this.forceMigration;
        }
        if (this.annotations != null) {
            data.annotations = (Object.fromEntries)(this.annotations);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.ids.length)
            writer.writeRepeatedString(3, this.ids);
        if (this.doMigration != false)
            writer.writeBool(4, this.doMigration);
        if (this.forceMigration != false)
            writer.writeBool(5, this.forceMigration);
        for (const [key, value] of this.annotations) {
            writer.writeMessage(103, this.annotations, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteResourceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteResourceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 3:
                    pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                    break;
                case 4:
                    message.doMigration = reader.readBool();
                    break;
                case 5:
                    message.forceMigration = reader.readBool();
                    break;
                case 103:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteResourceRequest {
        return DeleteResourceRequest.deserialize(bytes);
    }
}
export class DeleteResourceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): DeleteResourceResponse {
        const message = new DeleteResourceResponse({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteResourceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteResourceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteResourceResponse {
        return DeleteResourceResponse.deserialize(bytes);
    }
}
export class ListResourceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        annotations?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("annotations" in data && data.annotations != undefined) {
                this.annotations = data.annotations;
            }
        }
        if (!this.annotations)
            this.annotations = new Map();
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get annotations() {
        return pb_1.Message.getField(this, 103) as any as Map<string, string>;
    }
    set annotations(value: Map<string, string>) {
        pb_1.Message.setField(this, 103, value as any);
    }
    static fromObject(data: {
        token?: string;
        annotations?: {
            [key: string]: string;
        };
    }): ListResourceRequest {
        const message = new ListResourceRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (typeof data.annotations == "object") {
            message.annotations = new Map(Object.entries(data.annotations));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            annotations?: {
                [key: string]: string;
            };
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.annotations != null) {
            data.annotations = (Object.fromEntries)(this.annotations);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        for (const [key, value] of this.annotations) {
            writer.writeMessage(103, this.annotations, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListResourceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListResourceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 103:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListResourceRequest {
        return ListResourceRequest.deserialize(bytes);
    }
}
export class ListResourceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        resources?: dependency_2.Resource[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("resources" in data && data.resources != undefined) {
                this.resources = data.resources;
            }
        }
    }
    get resources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Resource, 1) as dependency_2.Resource[];
    }
    set resources(value: dependency_2.Resource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
    }): ListResourceResponse {
        const message = new ListResourceResponse({});
        if (data.resources != null) {
            message.resources = data.resources.map(item => dependency_2.Resource.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            resources?: ReturnType<typeof dependency_2.Resource.prototype.toObject>[];
        } = {};
        if (this.resources != null) {
            data.resources = this.resources.map((item: dependency_2.Resource) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.resources.length)
            writer.writeRepeatedMessage(1, this.resources, (item: dependency_2.Resource) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListResourceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListResourceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.resources, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.Resource.deserialize(reader), dependency_2.Resource));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListResourceResponse {
        return ListResourceResponse.deserialize(bytes);
    }
}
export class GetResourceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        id?: string;
        annotations?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("annotations" in data && data.annotations != undefined) {
                this.annotations = data.annotations;
            }
        }
        if (!this.annotations)
            this.annotations = new Map();
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get annotations() {
        return pb_1.Message.getField(this, 103) as any as Map<string, string>;
    }
    set annotations(value: Map<string, string>) {
        pb_1.Message.setField(this, 103, value as any);
    }
    static fromObject(data: {
        token?: string;
        id?: string;
        annotations?: {
            [key: string]: string;
        };
    }): GetResourceRequest {
        const message = new GetResourceRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (typeof data.annotations == "object") {
            message.annotations = new Map(Object.entries(data.annotations));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            id?: string;
            annotations?: {
                [key: string]: string;
            };
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.annotations != null) {
            data.annotations = (Object.fromEntries)(this.annotations);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.id.length)
            writer.writeString(3, this.id);
        for (const [key, value] of this.annotations) {
            writer.writeMessage(103, this.annotations, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetResourceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetResourceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 3:
                    message.id = reader.readString();
                    break;
                case 103:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetResourceRequest {
        return GetResourceRequest.deserialize(bytes);
    }
}
export class GetResourceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        resource?: dependency_2.Resource;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("resource" in data && data.resource != undefined) {
                this.resource = data.resource;
            }
        }
    }
    get resource() {
        return pb_1.Message.getWrapperField(this, dependency_2.Resource, 1) as dependency_2.Resource;
    }
    set resource(value: dependency_2.Resource) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasResource() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        resource?: ReturnType<typeof dependency_2.Resource.prototype.toObject>;
    }): GetResourceResponse {
        const message = new GetResourceResponse({});
        if (data.resource != null) {
            message.resource = dependency_2.Resource.fromObject(data.resource);
        }
        return message;
    }
    toObject() {
        const data: {
            resource?: ReturnType<typeof dependency_2.Resource.prototype.toObject>;
        } = {};
        if (this.resource != null) {
            data.resource = this.resource.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasResource)
            writer.writeMessage(1, this.resource, () => this.resource.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetResourceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetResourceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.resource, () => message.resource = dependency_2.Resource.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetResourceResponse {
        return GetResourceResponse.deserialize(bytes);
    }
}
export class GetResourceByNameRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        namespace?: string;
        name?: string;
        annotations?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("namespace" in data && data.namespace != undefined) {
                this.namespace = data.namespace;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("annotations" in data && data.annotations != undefined) {
                this.annotations = data.annotations;
            }
        }
        if (!this.annotations)
            this.annotations = new Map();
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get namespace() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set namespace(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get annotations() {
        return pb_1.Message.getField(this, 103) as any as Map<string, string>;
    }
    set annotations(value: Map<string, string>) {
        pb_1.Message.setField(this, 103, value as any);
    }
    static fromObject(data: {
        token?: string;
        namespace?: string;
        name?: string;
        annotations?: {
            [key: string]: string;
        };
    }): GetResourceByNameRequest {
        const message = new GetResourceByNameRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.namespace != null) {
            message.namespace = data.namespace;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (typeof data.annotations == "object") {
            message.annotations = new Map(Object.entries(data.annotations));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            namespace?: string;
            name?: string;
            annotations?: {
                [key: string]: string;
            };
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.namespace != null) {
            data.namespace = this.namespace;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.annotations != null) {
            data.annotations = (Object.fromEntries)(this.annotations);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.namespace.length)
            writer.writeString(2, this.namespace);
        if (this.name.length)
            writer.writeString(3, this.name);
        for (const [key, value] of this.annotations) {
            writer.writeMessage(103, this.annotations, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetResourceByNameRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetResourceByNameRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    message.namespace = reader.readString();
                    break;
                case 3:
                    message.name = reader.readString();
                    break;
                case 103:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetResourceByNameRequest {
        return GetResourceByNameRequest.deserialize(bytes);
    }
}
export class GetResourceByNameResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        resource?: dependency_2.Resource;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("resource" in data && data.resource != undefined) {
                this.resource = data.resource;
            }
        }
    }
    get resource() {
        return pb_1.Message.getWrapperField(this, dependency_2.Resource, 1) as dependency_2.Resource;
    }
    set resource(value: dependency_2.Resource) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasResource() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        resource?: ReturnType<typeof dependency_2.Resource.prototype.toObject>;
    }): GetResourceByNameResponse {
        const message = new GetResourceByNameResponse({});
        if (data.resource != null) {
            message.resource = dependency_2.Resource.fromObject(data.resource);
        }
        return message;
    }
    toObject() {
        const data: {
            resource?: ReturnType<typeof dependency_2.Resource.prototype.toObject>;
        } = {};
        if (this.resource != null) {
            data.resource = this.resource.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasResource)
            writer.writeMessage(1, this.resource, () => this.resource.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetResourceByNameResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetResourceByNameResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.resource, () => message.resource = dependency_2.Resource.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetResourceByNameResponse {
        return GetResourceByNameResponse.deserialize(bytes);
    }
}
export class GetSystemResourceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        name?: string;
        annotations?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("annotations" in data && data.annotations != undefined) {
                this.annotations = data.annotations;
            }
        }
        if (!this.annotations)
            this.annotations = new Map();
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get annotations() {
        return pb_1.Message.getField(this, 103) as any as Map<string, string>;
    }
    set annotations(value: Map<string, string>) {
        pb_1.Message.setField(this, 103, value as any);
    }
    static fromObject(data: {
        token?: string;
        name?: string;
        annotations?: {
            [key: string]: string;
        };
    }): GetSystemResourceRequest {
        const message = new GetSystemResourceRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (typeof data.annotations == "object") {
            message.annotations = new Map(Object.entries(data.annotations));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            name?: string;
            annotations?: {
                [key: string]: string;
            };
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.annotations != null) {
            data.annotations = (Object.fromEntries)(this.annotations);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.name.length)
            writer.writeString(2, this.name);
        for (const [key, value] of this.annotations) {
            writer.writeMessage(103, this.annotations, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSystemResourceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSystemResourceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 103:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetSystemResourceRequest {
        return GetSystemResourceRequest.deserialize(bytes);
    }
}
export class GetSystemResourceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        resource?: dependency_2.Resource;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("resource" in data && data.resource != undefined) {
                this.resource = data.resource;
            }
        }
    }
    get resource() {
        return pb_1.Message.getWrapperField(this, dependency_2.Resource, 1) as dependency_2.Resource;
    }
    set resource(value: dependency_2.Resource) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasResource() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        resource?: ReturnType<typeof dependency_2.Resource.prototype.toObject>;
    }): GetSystemResourceResponse {
        const message = new GetSystemResourceResponse({});
        if (data.resource != null) {
            message.resource = dependency_2.Resource.fromObject(data.resource);
        }
        return message;
    }
    toObject() {
        const data: {
            resource?: ReturnType<typeof dependency_2.Resource.prototype.toObject>;
        } = {};
        if (this.resource != null) {
            data.resource = this.resource.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasResource)
            writer.writeMessage(1, this.resource, () => this.resource.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetSystemResourceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetSystemResourceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.resource, () => message.resource = dependency_2.Resource.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetSystemResourceResponse {
        return GetSystemResourceResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedResourceService {
    static definition = {
        Create: {
            path: "/stub.Resource/Create",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateResourceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateResourceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateResourceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateResourceResponse.deserialize(new Uint8Array(bytes))
        },
        Update: {
            path: "/stub.Resource/Update",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdateResourceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdateResourceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UpdateResourceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UpdateResourceResponse.deserialize(new Uint8Array(bytes))
        },
        Delete: {
            path: "/stub.Resource/Delete",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DeleteResourceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DeleteResourceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DeleteResourceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DeleteResourceResponse.deserialize(new Uint8Array(bytes))
        },
        List: {
            path: "/stub.Resource/List",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ListResourceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ListResourceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ListResourceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ListResourceResponse.deserialize(new Uint8Array(bytes))
        },
        PrepareResourceMigrationPlan: {
            path: "/stub.Resource/PrepareResourceMigrationPlan",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: PrepareResourceMigrationPlanRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => PrepareResourceMigrationPlanRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: PrepareResourceMigrationPlanResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => PrepareResourceMigrationPlanResponse.deserialize(new Uint8Array(bytes))
        },
        Get: {
            path: "/stub.Resource/Get",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetResourceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetResourceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetResourceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetResourceResponse.deserialize(new Uint8Array(bytes))
        },
        GetByName: {
            path: "/stub.Resource/GetByName",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetResourceByNameRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetResourceByNameRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetResourceByNameResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetResourceByNameResponse.deserialize(new Uint8Array(bytes))
        },
        GetSystemResource: {
            path: "/stub.Resource/GetSystemResource",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetSystemResourceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetSystemResourceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetSystemResourceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetSystemResourceResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Create(call: grpc_1.ServerUnaryCall<CreateResourceRequest, CreateResourceResponse>, callback: grpc_1.sendUnaryData<CreateResourceResponse>): void;
    abstract Update(call: grpc_1.ServerUnaryCall<UpdateResourceRequest, UpdateResourceResponse>, callback: grpc_1.sendUnaryData<UpdateResourceResponse>): void;
    abstract Delete(call: grpc_1.ServerUnaryCall<DeleteResourceRequest, DeleteResourceResponse>, callback: grpc_1.sendUnaryData<DeleteResourceResponse>): void;
    abstract List(call: grpc_1.ServerUnaryCall<ListResourceRequest, ListResourceResponse>, callback: grpc_1.sendUnaryData<ListResourceResponse>): void;
    abstract PrepareResourceMigrationPlan(call: grpc_1.ServerUnaryCall<PrepareResourceMigrationPlanRequest, PrepareResourceMigrationPlanResponse>, callback: grpc_1.sendUnaryData<PrepareResourceMigrationPlanResponse>): void;
    abstract Get(call: grpc_1.ServerUnaryCall<GetResourceRequest, GetResourceResponse>, callback: grpc_1.sendUnaryData<GetResourceResponse>): void;
    abstract GetByName(call: grpc_1.ServerUnaryCall<GetResourceByNameRequest, GetResourceByNameResponse>, callback: grpc_1.sendUnaryData<GetResourceByNameResponse>): void;
    abstract GetSystemResource(call: grpc_1.ServerUnaryCall<GetSystemResourceRequest, GetSystemResourceResponse>, callback: grpc_1.sendUnaryData<GetSystemResourceResponse>): void;
}
export class ResourceClient extends grpc_1.makeGenericClientConstructor(UnimplementedResourceService.definition, "Resource", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    Create: GrpcUnaryServiceInterface<CreateResourceRequest, CreateResourceResponse> = (message: CreateResourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateResourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateResourceResponse>, callback?: grpc_1.requestCallback<CreateResourceResponse>): grpc_1.ClientUnaryCall => {
        return super.Create(message, metadata, options, callback);
    };
    Update: GrpcUnaryServiceInterface<UpdateResourceRequest, UpdateResourceResponse> = (message: UpdateResourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateResourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateResourceResponse>, callback?: grpc_1.requestCallback<UpdateResourceResponse>): grpc_1.ClientUnaryCall => {
        return super.Update(message, metadata, options, callback);
    };
    Delete: GrpcUnaryServiceInterface<DeleteResourceRequest, DeleteResourceResponse> = (message: DeleteResourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteResourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteResourceResponse>, callback?: grpc_1.requestCallback<DeleteResourceResponse>): grpc_1.ClientUnaryCall => {
        return super.Delete(message, metadata, options, callback);
    };
    List: GrpcUnaryServiceInterface<ListResourceRequest, ListResourceResponse> = (message: ListResourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListResourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListResourceResponse>, callback?: grpc_1.requestCallback<ListResourceResponse>): grpc_1.ClientUnaryCall => {
        return super.List(message, metadata, options, callback);
    };
    PrepareResourceMigrationPlan: GrpcUnaryServiceInterface<PrepareResourceMigrationPlanRequest, PrepareResourceMigrationPlanResponse> = (message: PrepareResourceMigrationPlanRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<PrepareResourceMigrationPlanResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<PrepareResourceMigrationPlanResponse>, callback?: grpc_1.requestCallback<PrepareResourceMigrationPlanResponse>): grpc_1.ClientUnaryCall => {
        return super.PrepareResourceMigrationPlan(message, metadata, options, callback);
    };
    Get: GrpcUnaryServiceInterface<GetResourceRequest, GetResourceResponse> = (message: GetResourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetResourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetResourceResponse>, callback?: grpc_1.requestCallback<GetResourceResponse>): grpc_1.ClientUnaryCall => {
        return super.Get(message, metadata, options, callback);
    };
    GetByName: GrpcUnaryServiceInterface<GetResourceByNameRequest, GetResourceByNameResponse> = (message: GetResourceByNameRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetResourceByNameResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetResourceByNameResponse>, callback?: grpc_1.requestCallback<GetResourceByNameResponse>): grpc_1.ClientUnaryCall => {
        return super.GetByName(message, metadata, options, callback);
    };
    GetSystemResource: GrpcUnaryServiceInterface<GetSystemResourceRequest, GetSystemResourceResponse> = (message: GetSystemResourceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetSystemResourceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetSystemResourceResponse>, callback?: grpc_1.requestCallback<GetSystemResourceResponse>): grpc_1.ClientUnaryCall => {
        return super.GetSystemResource(message, metadata, options, callback);
    };
}
