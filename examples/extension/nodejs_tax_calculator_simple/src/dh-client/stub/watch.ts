/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: stub/watch.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../model/watch";
import * as dependency_2 from "./../model/query";
import * as dependency_3 from "./../google/api/annotations";
import * as dependency_4 from "./../openapiv3/annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace stub {
    export class WatchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            query?: dependency_2.model.BooleanExpression;
            events?: dependency_1.model.EventType[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get query() {
            return pb_1.Message.getWrapperField(this, dependency_2.model.BooleanExpression, 4) as dependency_2.model.BooleanExpression;
        }
        set query(value: dependency_2.model.BooleanExpression) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get events() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as dependency_1.model.EventType[];
        }
        set events(value: dependency_1.model.EventType[]) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            query?: ReturnType<typeof dependency_2.model.BooleanExpression.prototype.toObject>;
            events?: dependency_1.model.EventType[];
        }): WatchRequest {
            const message = new WatchRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.query != null) {
                message.query = dependency_2.model.BooleanExpression.fromObject(data.query);
            }
            if (data.events != null) {
                message.events = data.events;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                query?: ReturnType<typeof dependency_2.model.BooleanExpression.prototype.toObject>;
                events?: dependency_1.model.EventType[];
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.events != null) {
                data.events = this.events;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            if (this.has_query)
                writer.writeMessage(4, this.query, () => this.query.serialize(writer));
            if (this.events.length)
                writer.writePackedEnum(5, this.events);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WatchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WatchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.query, () => message.query = dependency_2.model.BooleanExpression.deserialize(reader));
                        break;
                    case 5:
                        message.events = reader.readPackedEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WatchRequest {
            return WatchRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedWatchService {
        static definition = {
            Watch: {
                path: "/stub.Watch/Watch",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: WatchRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => WatchRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.model.WatchMessage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.model.WatchMessage.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Watch(call: grpc_1.ServerWritableStream<WatchRequest, dependency_1.model.WatchMessage>): void;
    }
    export class WatchClient extends grpc_1.makeGenericClientConstructor(UnimplementedWatchService.definition, "Watch", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Watch: GrpcStreamServiceInterface<WatchRequest, WatchRequest> = (message: WatchRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<WatchRequest> => {
            return super.Watch(message, metadata, options);
        };
    }
}
