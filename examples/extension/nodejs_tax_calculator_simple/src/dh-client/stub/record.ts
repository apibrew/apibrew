/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: stub/record.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../model/record";
import * as dependency_2 from "./../model/query";
import * as dependency_3 from "./../model/error";
import * as dependency_4 from "./../google/api/annotations";
import * as dependency_5 from "./../google/protobuf/struct";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace stub {
    export class ListRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            filters?: Map<string, string>;
            limit?: number;
            offset?: number;
            useHistory?: boolean;
            resolveReferences?: string[];
            annotations?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("filters" in data && data.filters != undefined) {
                    this.filters = data.filters;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("useHistory" in data && data.useHistory != undefined) {
                    this.useHistory = data.useHistory;
                }
                if ("resolveReferences" in data && data.resolveReferences != undefined) {
                    this.resolveReferences = data.resolveReferences;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
            }
            if (!this.filters)
                this.filters = new Map();
            if (!this.annotations)
                this.annotations = new Map();
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get filters() {
            return pb_1.Message.getField(this, 4) as any as Map<string, string>;
        }
        set filters(value: Map<string, string>) {
            pb_1.Message.setField(this, 4, value as any);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get useHistory() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set useHistory(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get resolveReferences() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set resolveReferences(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get annotations() {
            return pb_1.Message.getField(this, 103) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 103, value as any);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            filters?: {
                [key: string]: string;
            };
            limit?: number;
            offset?: number;
            useHistory?: boolean;
            resolveReferences?: string[];
            annotations?: {
                [key: string]: string;
            };
        }): ListRecordRequest {
            const message = new ListRecordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (typeof data.filters == "object") {
                message.filters = new Map(Object.entries(data.filters));
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.useHistory != null) {
                message.useHistory = data.useHistory;
            }
            if (data.resolveReferences != null) {
                message.resolveReferences = data.resolveReferences;
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                filters?: {
                    [key: string]: string;
                };
                limit?: number;
                offset?: number;
                useHistory?: boolean;
                resolveReferences?: string[];
                annotations?: {
                    [key: string]: string;
                };
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.filters != null) {
                data.filters = (Object.fromEntries)(this.filters);
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.useHistory != null) {
                data.useHistory = this.useHistory;
            }
            if (this.resolveReferences != null) {
                data.resolveReferences = this.resolveReferences;
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            for (const [key, value] of this.filters) {
                writer.writeMessage(4, this.filters, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (this.limit != 0)
                writer.writeUint32(5, this.limit);
            if (this.offset != 0)
                writer.writeUint64(6, this.offset);
            if (this.useHistory != false)
                writer.writeBool(7, this.useHistory);
            if (this.resolveReferences.length)
                writer.writeRepeatedString(8, this.resolveReferences);
            for (const [key, value] of this.annotations) {
                writer.writeMessage(103, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.filters as any, reader, reader.readString, reader.readString));
                        break;
                    case 5:
                        message.limit = reader.readUint32();
                        break;
                    case 6:
                        message.offset = reader.readUint64();
                        break;
                    case 7:
                        message.useHistory = reader.readBool();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 103:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRecordRequest {
            return ListRecordRequest.deserialize(bytes);
        }
    }
    export class ListRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total?: number;
            content?: dependency_1.model.Record[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Record, 2) as dependency_1.model.Record[];
        }
        set content(value: dependency_1.model.Record[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            total?: number;
            content?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
        }): ListRecordResponse {
            const message = new ListRecordResponse({});
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.content != null) {
                message.content = data.content.map(item => dependency_1.model.Record.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                total?: number;
                content?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
            } = {};
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.content != null) {
                data.content = this.content.map((item: dependency_1.model.Record) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total != 0)
                writer.writeUint32(1, this.total);
            if (this.content.length)
                writer.writeRepeatedMessage(2, this.content, (item: dependency_1.model.Record) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.total = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.content, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.model.Record.deserialize(reader), dependency_1.model.Record));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRecordResponse {
            return ListRecordResponse.deserialize(bytes);
        }
    }
    export class SearchRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            query?: dependency_2.model.BooleanExpression;
            limit?: number;
            offset?: number;
            useHistory?: boolean;
            resolveReferences?: string[];
            annotations?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("useHistory" in data && data.useHistory != undefined) {
                    this.useHistory = data.useHistory;
                }
                if ("resolveReferences" in data && data.resolveReferences != undefined) {
                    this.resolveReferences = data.resolveReferences;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
            }
            if (!this.annotations)
                this.annotations = new Map();
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get query() {
            return pb_1.Message.getWrapperField(this, dependency_2.model.BooleanExpression, 4) as dependency_2.model.BooleanExpression;
        }
        set query(value: dependency_2.model.BooleanExpression) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get useHistory() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set useHistory(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get resolveReferences() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set resolveReferences(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get annotations() {
            return pb_1.Message.getField(this, 103) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 103, value as any);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            query?: ReturnType<typeof dependency_2.model.BooleanExpression.prototype.toObject>;
            limit?: number;
            offset?: number;
            useHistory?: boolean;
            resolveReferences?: string[];
            annotations?: {
                [key: string]: string;
            };
        }): SearchRecordRequest {
            const message = new SearchRecordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.query != null) {
                message.query = dependency_2.model.BooleanExpression.fromObject(data.query);
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.useHistory != null) {
                message.useHistory = data.useHistory;
            }
            if (data.resolveReferences != null) {
                message.resolveReferences = data.resolveReferences;
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                query?: ReturnType<typeof dependency_2.model.BooleanExpression.prototype.toObject>;
                limit?: number;
                offset?: number;
                useHistory?: boolean;
                resolveReferences?: string[];
                annotations?: {
                    [key: string]: string;
                };
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.useHistory != null) {
                data.useHistory = this.useHistory;
            }
            if (this.resolveReferences != null) {
                data.resolveReferences = this.resolveReferences;
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            if (this.has_query)
                writer.writeMessage(4, this.query, () => this.query.serialize(writer));
            if (this.limit != 0)
                writer.writeUint32(5, this.limit);
            if (this.offset != 0)
                writer.writeUint64(6, this.offset);
            if (this.useHistory != false)
                writer.writeBool(7, this.useHistory);
            if (this.resolveReferences.length)
                writer.writeRepeatedString(8, this.resolveReferences);
            for (const [key, value] of this.annotations) {
                writer.writeMessage(103, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.query, () => message.query = dependency_2.model.BooleanExpression.deserialize(reader));
                        break;
                    case 5:
                        message.limit = reader.readUint32();
                        break;
                    case 6:
                        message.offset = reader.readUint64();
                        break;
                    case 7:
                        message.useHistory = reader.readBool();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 103:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchRecordRequest {
            return SearchRecordRequest.deserialize(bytes);
        }
    }
    export class ReadStreamRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            query?: dependency_2.model.BooleanExpression;
            limit?: number;
            offset?: number;
            useHistory?: boolean;
            resolveReferences?: string[];
            useTransaction?: boolean;
            packRecords?: boolean;
            annotations?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("useHistory" in data && data.useHistory != undefined) {
                    this.useHistory = data.useHistory;
                }
                if ("resolveReferences" in data && data.resolveReferences != undefined) {
                    this.resolveReferences = data.resolveReferences;
                }
                if ("useTransaction" in data && data.useTransaction != undefined) {
                    this.useTransaction = data.useTransaction;
                }
                if ("packRecords" in data && data.packRecords != undefined) {
                    this.packRecords = data.packRecords;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
            }
            if (!this.annotations)
                this.annotations = new Map();
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get query() {
            return pb_1.Message.getWrapperField(this, dependency_2.model.BooleanExpression, 4) as dependency_2.model.BooleanExpression;
        }
        set query(value: dependency_2.model.BooleanExpression) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get useHistory() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set useHistory(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get resolveReferences() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as string[];
        }
        set resolveReferences(value: string[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get useTransaction() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set useTransaction(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get packRecords() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set packRecords(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get annotations() {
            return pb_1.Message.getField(this, 103) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 103, value as any);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            query?: ReturnType<typeof dependency_2.model.BooleanExpression.prototype.toObject>;
            limit?: number;
            offset?: number;
            useHistory?: boolean;
            resolveReferences?: string[];
            useTransaction?: boolean;
            packRecords?: boolean;
            annotations?: {
                [key: string]: string;
            };
        }): ReadStreamRequest {
            const message = new ReadStreamRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.query != null) {
                message.query = dependency_2.model.BooleanExpression.fromObject(data.query);
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.useHistory != null) {
                message.useHistory = data.useHistory;
            }
            if (data.resolveReferences != null) {
                message.resolveReferences = data.resolveReferences;
            }
            if (data.useTransaction != null) {
                message.useTransaction = data.useTransaction;
            }
            if (data.packRecords != null) {
                message.packRecords = data.packRecords;
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                query?: ReturnType<typeof dependency_2.model.BooleanExpression.prototype.toObject>;
                limit?: number;
                offset?: number;
                useHistory?: boolean;
                resolveReferences?: string[];
                useTransaction?: boolean;
                packRecords?: boolean;
                annotations?: {
                    [key: string]: string;
                };
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.useHistory != null) {
                data.useHistory = this.useHistory;
            }
            if (this.resolveReferences != null) {
                data.resolveReferences = this.resolveReferences;
            }
            if (this.useTransaction != null) {
                data.useTransaction = this.useTransaction;
            }
            if (this.packRecords != null) {
                data.packRecords = this.packRecords;
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            if (this.has_query)
                writer.writeMessage(4, this.query, () => this.query.serialize(writer));
            if (this.limit != 0)
                writer.writeUint32(5, this.limit);
            if (this.offset != 0)
                writer.writeUint64(6, this.offset);
            if (this.useHistory != false)
                writer.writeBool(7, this.useHistory);
            if (this.resolveReferences.length)
                writer.writeRepeatedString(8, this.resolveReferences);
            if (this.useTransaction != false)
                writer.writeBool(9, this.useTransaction);
            if (this.packRecords != false)
                writer.writeBool(10, this.packRecords);
            for (const [key, value] of this.annotations) {
                writer.writeMessage(103, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadStreamRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadStreamRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.query, () => message.query = dependency_2.model.BooleanExpression.deserialize(reader));
                        break;
                    case 5:
                        message.limit = reader.readUint32();
                        break;
                    case 6:
                        message.offset = reader.readUint64();
                        break;
                    case 7:
                        message.useHistory = reader.readBool();
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readString());
                        break;
                    case 9:
                        message.useTransaction = reader.readBool();
                        break;
                    case 10:
                        message.packRecords = reader.readBool();
                        break;
                    case 103:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReadStreamRequest {
            return ReadStreamRequest.deserialize(bytes);
        }
    }
    export class WriteStreamResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean[];
            created?: boolean[];
            updated?: boolean[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as boolean[];
        }
        set success(value: boolean[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get created() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as boolean[];
        }
        set created(value: boolean[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get updated() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as boolean[];
        }
        set updated(value: boolean[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            success?: boolean[];
            created?: boolean[];
            updated?: boolean[];
        }): WriteStreamResponse {
            const message = new WriteStreamResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.created != null) {
                message.created = data.created;
            }
            if (data.updated != null) {
                message.updated = data.updated;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean[];
                created?: boolean[];
                updated?: boolean[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.created != null) {
                data.created = this.created;
            }
            if (this.updated != null) {
                data.updated = this.updated;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success.length)
                writer.writePackedBool(1, this.success);
            if (this.created.length)
                writer.writePackedBool(2, this.created);
            if (this.updated.length)
                writer.writePackedBool(3, this.updated);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteStreamResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteStreamResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readPackedBool();
                        break;
                    case 2:
                        message.created = reader.readPackedBool();
                        break;
                    case 3:
                        message.updated = reader.readPackedBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WriteStreamResponse {
            return WriteStreamResponse.deserialize(bytes);
        }
    }
    export class SearchRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            total?: number;
            content?: dependency_1.model.Record[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("total" in data && data.total != undefined) {
                    this.total = data.total;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get total() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set total(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Record, 2) as dependency_1.model.Record[];
        }
        set content(value: dependency_1.model.Record[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            total?: number;
            content?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
        }): SearchRecordResponse {
            const message = new SearchRecordResponse({});
            if (data.total != null) {
                message.total = data.total;
            }
            if (data.content != null) {
                message.content = data.content.map(item => dependency_1.model.Record.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                total?: number;
                content?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
            } = {};
            if (this.total != null) {
                data.total = this.total;
            }
            if (this.content != null) {
                data.content = this.content.map((item: dependency_1.model.Record) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total != 0)
                writer.writeUint32(1, this.total);
            if (this.content.length)
                writer.writeRepeatedMessage(2, this.content, (item: dependency_1.model.Record) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.total = reader.readUint32();
                        break;
                    case 2:
                        reader.readMessage(message.content, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.model.Record.deserialize(reader), dependency_1.model.Record));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SearchRecordResponse {
            return SearchRecordResponse.deserialize(bytes);
        }
    }
    export class CreateRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            record?: dependency_1.model.Record;
            records?: dependency_1.model.Record[];
            ignoreIfExists?: boolean;
            annotations?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("record" in data && data.record != undefined) {
                    this.record = data.record;
                }
                if ("records" in data && data.records != undefined) {
                    this.records = data.records;
                }
                if ("ignoreIfExists" in data && data.ignoreIfExists != undefined) {
                    this.ignoreIfExists = data.ignoreIfExists;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
            }
            if (!this.annotations)
                this.annotations = new Map();
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get record() {
            return pb_1.Message.getWrapperField(this, dependency_1.model.Record, 4) as dependency_1.model.Record;
        }
        set record(value: dependency_1.model.Record) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_record() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get records() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Record, 5) as dependency_1.model.Record[];
        }
        set records(value: dependency_1.model.Record[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get ignoreIfExists() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set ignoreIfExists(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get annotations() {
            return pb_1.Message.getField(this, 103) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 103, value as any);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
            records?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
            ignoreIfExists?: boolean;
            annotations?: {
                [key: string]: string;
            };
        }): CreateRecordRequest {
            const message = new CreateRecordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.record != null) {
                message.record = dependency_1.model.Record.fromObject(data.record);
            }
            if (data.records != null) {
                message.records = data.records.map(item => dependency_1.model.Record.fromObject(item));
            }
            if (data.ignoreIfExists != null) {
                message.ignoreIfExists = data.ignoreIfExists;
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
                records?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
                ignoreIfExists?: boolean;
                annotations?: {
                    [key: string]: string;
                };
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.record != null) {
                data.record = this.record.toObject();
            }
            if (this.records != null) {
                data.records = this.records.map((item: dependency_1.model.Record) => item.toObject());
            }
            if (this.ignoreIfExists != null) {
                data.ignoreIfExists = this.ignoreIfExists;
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            if (this.has_record)
                writer.writeMessage(4, this.record, () => this.record.serialize(writer));
            if (this.records.length)
                writer.writeRepeatedMessage(5, this.records, (item: dependency_1.model.Record) => item.serialize(writer));
            if (this.ignoreIfExists != false)
                writer.writeBool(6, this.ignoreIfExists);
            for (const [key, value] of this.annotations) {
                writer.writeMessage(103, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.record, () => message.record = dependency_1.model.Record.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.records, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.model.Record.deserialize(reader), dependency_1.model.Record));
                        break;
                    case 6:
                        message.ignoreIfExists = reader.readBool();
                        break;
                    case 103:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRecordRequest {
            return CreateRecordRequest.deserialize(bytes);
        }
    }
    export class CreateRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            record?: dependency_1.model.Record;
            records?: dependency_1.model.Record[];
            inserted?: boolean[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("record" in data && data.record != undefined) {
                    this.record = data.record;
                }
                if ("records" in data && data.records != undefined) {
                    this.records = data.records;
                }
                if ("inserted" in data && data.inserted != undefined) {
                    this.inserted = data.inserted;
                }
            }
        }
        get record() {
            return pb_1.Message.getWrapperField(this, dependency_1.model.Record, 1) as dependency_1.model.Record;
        }
        set record(value: dependency_1.model.Record) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_record() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get records() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Record, 2) as dependency_1.model.Record[];
        }
        set records(value: dependency_1.model.Record[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get inserted() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as boolean[];
        }
        set inserted(value: boolean[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
            records?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
            inserted?: boolean[];
        }): CreateRecordResponse {
            const message = new CreateRecordResponse({});
            if (data.record != null) {
                message.record = dependency_1.model.Record.fromObject(data.record);
            }
            if (data.records != null) {
                message.records = data.records.map(item => dependency_1.model.Record.fromObject(item));
            }
            if (data.inserted != null) {
                message.inserted = data.inserted;
            }
            return message;
        }
        toObject() {
            const data: {
                record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
                records?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
                inserted?: boolean[];
            } = {};
            if (this.record != null) {
                data.record = this.record.toObject();
            }
            if (this.records != null) {
                data.records = this.records.map((item: dependency_1.model.Record) => item.toObject());
            }
            if (this.inserted != null) {
                data.inserted = this.inserted;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_record)
                writer.writeMessage(1, this.record, () => this.record.serialize(writer));
            if (this.records.length)
                writer.writeRepeatedMessage(2, this.records, (item: dependency_1.model.Record) => item.serialize(writer));
            if (this.inserted.length)
                writer.writePackedBool(4, this.inserted);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.record, () => message.record = dependency_1.model.Record.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.records, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.model.Record.deserialize(reader), dependency_1.model.Record));
                        break;
                    case 4:
                        message.inserted = reader.readPackedBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRecordResponse {
            return CreateRecordResponse.deserialize(bytes);
        }
    }
    export class UpdateRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            record?: dependency_1.model.Record;
            records?: dependency_1.model.Record[];
            checkVersion?: boolean;
            annotations?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("record" in data && data.record != undefined) {
                    this.record = data.record;
                }
                if ("records" in data && data.records != undefined) {
                    this.records = data.records;
                }
                if ("checkVersion" in data && data.checkVersion != undefined) {
                    this.checkVersion = data.checkVersion;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
            }
            if (!this.annotations)
                this.annotations = new Map();
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get record() {
            return pb_1.Message.getWrapperField(this, dependency_1.model.Record, 4) as dependency_1.model.Record;
        }
        set record(value: dependency_1.model.Record) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_record() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get records() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Record, 5) as dependency_1.model.Record[];
        }
        set records(value: dependency_1.model.Record[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get checkVersion() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set checkVersion(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get annotations() {
            return pb_1.Message.getField(this, 103) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 103, value as any);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
            records?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
            checkVersion?: boolean;
            annotations?: {
                [key: string]: string;
            };
        }): UpdateRecordRequest {
            const message = new UpdateRecordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.record != null) {
                message.record = dependency_1.model.Record.fromObject(data.record);
            }
            if (data.records != null) {
                message.records = data.records.map(item => dependency_1.model.Record.fromObject(item));
            }
            if (data.checkVersion != null) {
                message.checkVersion = data.checkVersion;
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
                records?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
                checkVersion?: boolean;
                annotations?: {
                    [key: string]: string;
                };
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.record != null) {
                data.record = this.record.toObject();
            }
            if (this.records != null) {
                data.records = this.records.map((item: dependency_1.model.Record) => item.toObject());
            }
            if (this.checkVersion != null) {
                data.checkVersion = this.checkVersion;
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            if (this.has_record)
                writer.writeMessage(4, this.record, () => this.record.serialize(writer));
            if (this.records.length)
                writer.writeRepeatedMessage(5, this.records, (item: dependency_1.model.Record) => item.serialize(writer));
            if (this.checkVersion != false)
                writer.writeBool(6, this.checkVersion);
            for (const [key, value] of this.annotations) {
                writer.writeMessage(103, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.record, () => message.record = dependency_1.model.Record.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.records, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.model.Record.deserialize(reader), dependency_1.model.Record));
                        break;
                    case 6:
                        message.checkVersion = reader.readBool();
                        break;
                    case 103:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRecordRequest {
            return UpdateRecordRequest.deserialize(bytes);
        }
    }
    export class UpdateRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            record?: dependency_1.model.Record;
            records?: dependency_1.model.Record[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("record" in data && data.record != undefined) {
                    this.record = data.record;
                }
                if ("records" in data && data.records != undefined) {
                    this.records = data.records;
                }
            }
        }
        get record() {
            return pb_1.Message.getWrapperField(this, dependency_1.model.Record, 1) as dependency_1.model.Record;
        }
        set record(value: dependency_1.model.Record) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_record() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get records() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Record, 2) as dependency_1.model.Record[];
        }
        set records(value: dependency_1.model.Record[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
            records?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
        }): UpdateRecordResponse {
            const message = new UpdateRecordResponse({});
            if (data.record != null) {
                message.record = dependency_1.model.Record.fromObject(data.record);
            }
            if (data.records != null) {
                message.records = data.records.map(item => dependency_1.model.Record.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
                records?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
            } = {};
            if (this.record != null) {
                data.record = this.record.toObject();
            }
            if (this.records != null) {
                data.records = this.records.map((item: dependency_1.model.Record) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_record)
                writer.writeMessage(1, this.record, () => this.record.serialize(writer));
            if (this.records.length)
                writer.writeRepeatedMessage(2, this.records, (item: dependency_1.model.Record) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.record, () => message.record = dependency_1.model.Record.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.records, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.model.Record.deserialize(reader), dependency_1.model.Record));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateRecordResponse {
            return UpdateRecordResponse.deserialize(bytes);
        }
    }
    export class UpdateMultiRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            query?: dependency_2.model.BooleanExpression;
            properties?: Map<string, dependency_5.google.protobuf.Value>;
            annotations?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("query" in data && data.query != undefined) {
                    this.query = data.query;
                }
                if ("properties" in data && data.properties != undefined) {
                    this.properties = data.properties;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
            }
            if (!this.properties)
                this.properties = new Map();
            if (!this.annotations)
                this.annotations = new Map();
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get query() {
            return pb_1.Message.getWrapperField(this, dependency_2.model.BooleanExpression, 4) as dependency_2.model.BooleanExpression;
        }
        set query(value: dependency_2.model.BooleanExpression) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_query() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get properties() {
            return pb_1.Message.getField(this, 5) as any as Map<string, dependency_5.google.protobuf.Value>;
        }
        set properties(value: Map<string, dependency_5.google.protobuf.Value>) {
            pb_1.Message.setField(this, 5, value as any);
        }
        get annotations() {
            return pb_1.Message.getField(this, 103) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 103, value as any);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            query?: ReturnType<typeof dependency_2.model.BooleanExpression.prototype.toObject>;
            properties?: {
                [key: string]: ReturnType<typeof dependency_5.google.protobuf.Value.prototype.toObject>;
            };
            annotations?: {
                [key: string]: string;
            };
        }): UpdateMultiRecordRequest {
            const message = new UpdateMultiRecordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.query != null) {
                message.query = dependency_2.model.BooleanExpression.fromObject(data.query);
            }
            if (typeof data.properties == "object") {
                message.properties = new Map(Object.entries(data.properties).map(([key, value]) => [key, dependency_5.google.protobuf.Value.fromObject(value)]));
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                query?: ReturnType<typeof dependency_2.model.BooleanExpression.prototype.toObject>;
                properties?: {
                    [key: string]: ReturnType<typeof dependency_5.google.protobuf.Value.prototype.toObject>;
                };
                annotations?: {
                    [key: string]: string;
                };
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.query != null) {
                data.query = this.query.toObject();
            }
            if (this.properties != null) {
                data.properties = (Object.fromEntries)((Array.from)(this.properties).map(([key, value]) => [key, value.toObject()]));
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            if (this.has_query)
                writer.writeMessage(4, this.query, () => this.query.serialize(writer));
            for (const [key, value] of this.properties) {
                writer.writeMessage(5, this.properties, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            for (const [key, value] of this.annotations) {
                writer.writeMessage(103, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateMultiRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateMultiRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.query, () => message.query = dependency_2.model.BooleanExpression.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.properties as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_5.google.protobuf.Value.deserialize(reader));
                            return value;
                        }));
                        break;
                    case 103:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateMultiRecordRequest {
            return UpdateMultiRecordRequest.deserialize(bytes);
        }
    }
    export class UpdateMultiRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            record?: dependency_1.model.Record;
            records?: dependency_1.model.Record[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("record" in data && data.record != undefined) {
                    this.record = data.record;
                }
                if ("records" in data && data.records != undefined) {
                    this.records = data.records;
                }
            }
        }
        get record() {
            return pb_1.Message.getWrapperField(this, dependency_1.model.Record, 1) as dependency_1.model.Record;
        }
        set record(value: dependency_1.model.Record) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_record() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get records() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Record, 2) as dependency_1.model.Record[];
        }
        set records(value: dependency_1.model.Record[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
            records?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
        }): UpdateMultiRecordResponse {
            const message = new UpdateMultiRecordResponse({});
            if (data.record != null) {
                message.record = dependency_1.model.Record.fromObject(data.record);
            }
            if (data.records != null) {
                message.records = data.records.map(item => dependency_1.model.Record.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
                records?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>[];
            } = {};
            if (this.record != null) {
                data.record = this.record.toObject();
            }
            if (this.records != null) {
                data.records = this.records.map((item: dependency_1.model.Record) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_record)
                writer.writeMessage(1, this.record, () => this.record.serialize(writer));
            if (this.records.length)
                writer.writeRepeatedMessage(2, this.records, (item: dependency_1.model.Record) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateMultiRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateMultiRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.record, () => message.record = dependency_1.model.Record.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.records, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.model.Record.deserialize(reader), dependency_1.model.Record));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateMultiRecordResponse {
            return UpdateMultiRecordResponse.deserialize(bytes);
        }
    }
    export class DeleteRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            id?: string;
            ids?: string[];
            annotations?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
            }
            if (!this.annotations)
                this.annotations = new Map();
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set ids(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get annotations() {
            return pb_1.Message.getField(this, 103) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 103, value as any);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            id?: string;
            ids?: string[];
            annotations?: {
                [key: string]: string;
            };
        }): DeleteRecordRequest {
            const message = new DeleteRecordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.ids != null) {
                message.ids = data.ids;
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                id?: string;
                ids?: string[];
                annotations?: {
                    [key: string]: string;
                };
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.ids != null) {
                data.ids = this.ids;
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            if (this.id.length)
                writer.writeString(4, this.id);
            if (this.ids.length)
                writer.writeRepeatedString(5, this.ids);
            for (const [key, value] of this.annotations) {
                writer.writeMessage(103, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readString();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 103:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRecordRequest {
            return DeleteRecordRequest.deserialize(bytes);
        }
    }
    export class DeleteRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): DeleteRecordResponse {
            const message = new DeleteRecordResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRecordResponse {
            return DeleteRecordResponse.deserialize(bytes);
        }
    }
    export class GetRecordRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            namespace?: string;
            resource?: string;
            id?: string;
            annotations?: Map<string, string>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("annotations" in data && data.annotations != undefined) {
                    this.annotations = data.annotations;
                }
            }
            if (!this.annotations)
                this.annotations = new Map();
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get annotations() {
            return pb_1.Message.getField(this, 103) as any as Map<string, string>;
        }
        set annotations(value: Map<string, string>) {
            pb_1.Message.setField(this, 103, value as any);
        }
        static fromObject(data: {
            token?: string;
            namespace?: string;
            resource?: string;
            id?: string;
            annotations?: {
                [key: string]: string;
            };
        }): GetRecordRequest {
            const message = new GetRecordRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            if (typeof data.annotations == "object") {
                message.annotations = new Map(Object.entries(data.annotations));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                namespace?: string;
                resource?: string;
                id?: string;
                annotations?: {
                    [key: string]: string;
                };
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.annotations != null) {
                data.annotations = (Object.fromEntries)(this.annotations);
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.namespace.length)
                writer.writeString(2, this.namespace);
            if (this.resource.length)
                writer.writeString(3, this.resource);
            if (this.id.length)
                writer.writeString(4, this.id);
            for (const [key, value] of this.annotations) {
                writer.writeMessage(103, this.annotations, () => {
                    writer.writeString(1, key);
                    writer.writeString(2, value);
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRecordRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRecordRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.namespace = reader.readString();
                        break;
                    case 3:
                        message.resource = reader.readString();
                        break;
                    case 4:
                        message.id = reader.readString();
                        break;
                    case 103:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.annotations as any, reader, reader.readString, reader.readString));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRecordRequest {
            return GetRecordRequest.deserialize(bytes);
        }
    }
    export class GetRecordResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            record?: dependency_1.model.Record;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("record" in data && data.record != undefined) {
                    this.record = data.record;
                }
            }
        }
        get record() {
            return pb_1.Message.getWrapperField(this, dependency_1.model.Record, 1) as dependency_1.model.Record;
        }
        set record(value: dependency_1.model.Record) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_record() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
        }): GetRecordResponse {
            const message = new GetRecordResponse({});
            if (data.record != null) {
                message.record = dependency_1.model.Record.fromObject(data.record);
            }
            return message;
        }
        toObject() {
            const data: {
                record?: ReturnType<typeof dependency_1.model.Record.prototype.toObject>;
            } = {};
            if (this.record != null) {
                data.record = this.record.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_record)
                writer.writeMessage(1, this.record, () => this.record.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRecordResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRecordResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.record, () => message.record = dependency_1.model.Record.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRecordResponse {
            return GetRecordResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedRecordService {
        static definition = {
            Create: {
                path: "/stub.Record/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateRecordResponse.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/stub.Record/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateRecordResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateMulti: {
                path: "/stub.Record/UpdateMulti",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateMultiRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateMultiRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateMultiRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateMultiRecordResponse.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/stub.Record/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteRecordResponse.deserialize(new Uint8Array(bytes))
            },
            List: {
                path: "/stub.Record/List",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListRecordResponse.deserialize(new Uint8Array(bytes))
            },
            Search: {
                path: "/stub.Record/Search",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SearchRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SearchRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SearchRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SearchRecordResponse.deserialize(new Uint8Array(bytes))
            },
            ReadStream: {
                path: "/stub.Record/ReadStream",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: ReadStreamRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ReadStreamRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.model.Record) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.model.Record.deserialize(new Uint8Array(bytes))
            },
            WriteStream: {
                path: "/stub.Record/WriteStream",
                requestStream: true,
                responseStream: false,
                requestSerialize: (message: dependency_1.model.Record) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.model.Record.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: WriteStreamResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => WriteStreamResponse.deserialize(new Uint8Array(bytes))
            },
            Get: {
                path: "/stub.Record/Get",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRecordRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRecordRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRecordResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRecordResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Create(call: grpc_1.ServerUnaryCall<CreateRecordRequest, CreateRecordResponse>, callback: grpc_1.sendUnaryData<CreateRecordResponse>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<UpdateRecordRequest, UpdateRecordResponse>, callback: grpc_1.sendUnaryData<UpdateRecordResponse>): void;
        abstract UpdateMulti(call: grpc_1.ServerUnaryCall<UpdateMultiRecordRequest, UpdateMultiRecordResponse>, callback: grpc_1.sendUnaryData<UpdateMultiRecordResponse>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<DeleteRecordRequest, DeleteRecordResponse>, callback: grpc_1.sendUnaryData<DeleteRecordResponse>): void;
        abstract List(call: grpc_1.ServerUnaryCall<ListRecordRequest, ListRecordResponse>, callback: grpc_1.sendUnaryData<ListRecordResponse>): void;
        abstract Search(call: grpc_1.ServerUnaryCall<SearchRecordRequest, SearchRecordResponse>, callback: grpc_1.sendUnaryData<SearchRecordResponse>): void;
        abstract ReadStream(call: grpc_1.ServerWritableStream<ReadStreamRequest, dependency_1.model.Record>): void;
        abstract WriteStream(call: grpc_1.ServerReadableStream<dependency_1.model.Record, WriteStreamResponse>, callback: grpc_1.sendUnaryData<WriteStreamResponse>): void;
        abstract Get(call: grpc_1.ServerUnaryCall<GetRecordRequest, GetRecordResponse>, callback: grpc_1.sendUnaryData<GetRecordResponse>): void;
    }
    export class RecordClient extends grpc_1.makeGenericClientConstructor(UnimplementedRecordService.definition, "Record", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Create: GrpcUnaryServiceInterface<CreateRecordRequest, CreateRecordResponse> = (message: CreateRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateRecordResponse>, callback?: grpc_1.requestCallback<CreateRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        Update: GrpcUnaryServiceInterface<UpdateRecordRequest, UpdateRecordResponse> = (message: UpdateRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateRecordResponse>, callback?: grpc_1.requestCallback<UpdateRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.Update(message, metadata, options, callback);
        };
        UpdateMulti: GrpcUnaryServiceInterface<UpdateMultiRecordRequest, UpdateMultiRecordResponse> = (message: UpdateMultiRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateMultiRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateMultiRecordResponse>, callback?: grpc_1.requestCallback<UpdateMultiRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateMulti(message, metadata, options, callback);
        };
        Delete: GrpcUnaryServiceInterface<DeleteRecordRequest, DeleteRecordResponse> = (message: DeleteRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteRecordResponse>, callback?: grpc_1.requestCallback<DeleteRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.Delete(message, metadata, options, callback);
        };
        List: GrpcUnaryServiceInterface<ListRecordRequest, ListRecordResponse> = (message: ListRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListRecordResponse>, callback?: grpc_1.requestCallback<ListRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.List(message, metadata, options, callback);
        };
        Search: GrpcUnaryServiceInterface<SearchRecordRequest, SearchRecordResponse> = (message: SearchRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SearchRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SearchRecordResponse>, callback?: grpc_1.requestCallback<SearchRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.Search(message, metadata, options, callback);
        };
        ReadStream: GrpcStreamServiceInterface<ReadStreamRequest, ReadStreamRequest> = (message: ReadStreamRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<ReadStreamRequest> => {
            return super.ReadStream(message, metadata, options);
        };
        WriteStream: GrpWritableServiceInterface<dependency_1.model.Record, WriteStreamResponse> = (metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<WriteStreamResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<WriteStreamResponse>, callback?: grpc_1.requestCallback<WriteStreamResponse>): grpc_1.ClientWritableStream<dependency_1.model.Record> => {
            return super.WriteStream(metadata, options, callback);
        };
        Get: GrpcUnaryServiceInterface<GetRecordRequest, GetRecordResponse> = (message: GetRecordRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRecordResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRecordResponse>, callback?: grpc_1.requestCallback<GetRecordResponse>): grpc_1.ClientUnaryCall => {
            return super.Get(message, metadata, options, callback);
        };
    }
}
