/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: stub/namespace.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../model/namespace";
import * as dependency_2 from "./../model/error";
import * as dependency_3 from "./../google/api/annotations";
import * as dependency_4 from "./../openapiv3/annotations";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace stub {
    export class ListNamespaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            token?: string;
        }): ListNamespaceRequest {
            const message = new ListNamespaceRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListNamespaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListNamespaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListNamespaceRequest {
            return ListNamespaceRequest.deserialize(bytes);
        }
    }
    export class ListNamespaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            content?: dependency_1.model.Namespace[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
            }
        }
        get content() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Namespace, 2) as dependency_1.model.Namespace[];
        }
        set content(value: dependency_1.model.Namespace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            content?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
        }): ListNamespaceResponse {
            const message = new ListNamespaceResponse({});
            if (data.content != null) {
                message.content = data.content.map(item => dependency_1.model.Namespace.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                content?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
            } = {};
            if (this.content != null) {
                data.content = this.content.map((item: dependency_1.model.Namespace) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.content.length)
                writer.writeRepeatedMessage(2, this.content, (item: dependency_1.model.Namespace) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListNamespaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListNamespaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.content, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.model.Namespace.deserialize(reader), dependency_1.model.Namespace));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListNamespaceResponse {
            return ListNamespaceResponse.deserialize(bytes);
        }
    }
    export class CreateNamespaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            Namespaces?: dependency_1.model.Namespace[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("Namespaces" in data && data.Namespaces != undefined) {
                    this.Namespaces = data.Namespaces;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Namespaces() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Namespace, 2) as dependency_1.model.Namespace[];
        }
        set Namespaces(value: dependency_1.model.Namespace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            Namespaces?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
        }): CreateNamespaceRequest {
            const message = new CreateNamespaceRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.Namespaces != null) {
                message.Namespaces = data.Namespaces.map(item => dependency_1.model.Namespace.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                Namespaces?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.Namespaces != null) {
                data.Namespaces = this.Namespaces.map((item: dependency_1.model.Namespace) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.Namespaces.length)
                writer.writeRepeatedMessage(2, this.Namespaces, (item: dependency_1.model.Namespace) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateNamespaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateNamespaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.Namespaces, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.model.Namespace.deserialize(reader), dependency_1.model.Namespace));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateNamespaceRequest {
            return CreateNamespaceRequest.deserialize(bytes);
        }
    }
    export class CreateNamespaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Namespaces?: dependency_1.model.Namespace[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Namespaces" in data && data.Namespaces != undefined) {
                    this.Namespaces = data.Namespaces;
                }
            }
        }
        get Namespaces() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Namespace, 1) as dependency_1.model.Namespace[];
        }
        set Namespaces(value: dependency_1.model.Namespace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            Namespaces?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
        }): CreateNamespaceResponse {
            const message = new CreateNamespaceResponse({});
            if (data.Namespaces != null) {
                message.Namespaces = data.Namespaces.map(item => dependency_1.model.Namespace.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                Namespaces?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
            } = {};
            if (this.Namespaces != null) {
                data.Namespaces = this.Namespaces.map((item: dependency_1.model.Namespace) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Namespaces.length)
                writer.writeRepeatedMessage(1, this.Namespaces, (item: dependency_1.model.Namespace) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateNamespaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateNamespaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Namespaces, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.model.Namespace.deserialize(reader), dependency_1.model.Namespace));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateNamespaceResponse {
            return CreateNamespaceResponse.deserialize(bytes);
        }
    }
    export class UpdateNamespaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            Namespaces?: dependency_1.model.Namespace[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("Namespaces" in data && data.Namespaces != undefined) {
                    this.Namespaces = data.Namespaces;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Namespaces() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Namespace, 2) as dependency_1.model.Namespace[];
        }
        set Namespaces(value: dependency_1.model.Namespace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            Namespaces?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
        }): UpdateNamespaceRequest {
            const message = new UpdateNamespaceRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.Namespaces != null) {
                message.Namespaces = data.Namespaces.map(item => dependency_1.model.Namespace.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                Namespaces?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.Namespaces != null) {
                data.Namespaces = this.Namespaces.map((item: dependency_1.model.Namespace) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.Namespaces.length)
                writer.writeRepeatedMessage(2, this.Namespaces, (item: dependency_1.model.Namespace) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateNamespaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateNamespaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.Namespaces, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.model.Namespace.deserialize(reader), dependency_1.model.Namespace));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateNamespaceRequest {
            return UpdateNamespaceRequest.deserialize(bytes);
        }
    }
    export class UpdateNamespaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Namespaces?: dependency_1.model.Namespace[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Namespaces" in data && data.Namespaces != undefined) {
                    this.Namespaces = data.Namespaces;
                }
            }
        }
        get Namespaces() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Namespace, 1) as dependency_1.model.Namespace[];
        }
        set Namespaces(value: dependency_1.model.Namespace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            Namespaces?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
        }): UpdateNamespaceResponse {
            const message = new UpdateNamespaceResponse({});
            if (data.Namespaces != null) {
                message.Namespaces = data.Namespaces.map(item => dependency_1.model.Namespace.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                Namespaces?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
            } = {};
            if (this.Namespaces != null) {
                data.Namespaces = this.Namespaces.map((item: dependency_1.model.Namespace) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Namespaces.length)
                writer.writeRepeatedMessage(1, this.Namespaces, (item: dependency_1.model.Namespace) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateNamespaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateNamespaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Namespaces, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.model.Namespace.deserialize(reader), dependency_1.model.Namespace));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateNamespaceResponse {
            return UpdateNamespaceResponse.deserialize(bytes);
        }
    }
    export class DeleteNamespaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            ids?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("ids" in data && data.ids != undefined) {
                    this.ids = data.ids;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set ids(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            ids?: string[];
        }): DeleteNamespaceRequest {
            const message = new DeleteNamespaceRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.ids != null) {
                message.ids = data.ids;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                ids?: string[];
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.ids != null) {
                data.ids = this.ids;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.ids.length)
                writer.writeRepeatedString(2, this.ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteNamespaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteNamespaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteNamespaceRequest {
            return DeleteNamespaceRequest.deserialize(bytes);
        }
    }
    export class DeleteNamespaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Namespaces?: dependency_1.model.Namespace[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Namespaces" in data && data.Namespaces != undefined) {
                    this.Namespaces = data.Namespaces;
                }
            }
        }
        get Namespaces() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.model.Namespace, 1) as dependency_1.model.Namespace[];
        }
        set Namespaces(value: dependency_1.model.Namespace[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            Namespaces?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
        }): DeleteNamespaceResponse {
            const message = new DeleteNamespaceResponse({});
            if (data.Namespaces != null) {
                message.Namespaces = data.Namespaces.map(item => dependency_1.model.Namespace.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                Namespaces?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>[];
            } = {};
            if (this.Namespaces != null) {
                data.Namespaces = this.Namespaces.map((item: dependency_1.model.Namespace) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Namespaces.length)
                writer.writeRepeatedMessage(1, this.Namespaces, (item: dependency_1.model.Namespace) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteNamespaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteNamespaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Namespaces, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.model.Namespace.deserialize(reader), dependency_1.model.Namespace));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteNamespaceResponse {
            return DeleteNamespaceResponse.deserialize(bytes);
        }
    }
    export class GetNamespaceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            token?: string;
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            token?: string;
            id?: string;
        }): GetNamespaceRequest {
            const message = new GetNamespaceRequest({});
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                token?: string;
                id?: string;
            } = {};
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.token.length)
                writer.writeString(1, this.token);
            if (this.id.length)
                writer.writeString(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNamespaceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNamespaceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.token = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNamespaceRequest {
            return GetNamespaceRequest.deserialize(bytes);
        }
    }
    export class GetNamespaceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Namespace?: dependency_1.model.Namespace;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Namespace" in data && data.Namespace != undefined) {
                    this.Namespace = data.Namespace;
                }
            }
        }
        get Namespace() {
            return pb_1.Message.getWrapperField(this, dependency_1.model.Namespace, 1) as dependency_1.model.Namespace;
        }
        set Namespace(value: dependency_1.model.Namespace) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_Namespace() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            Namespace?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>;
        }): GetNamespaceResponse {
            const message = new GetNamespaceResponse({});
            if (data.Namespace != null) {
                message.Namespace = dependency_1.model.Namespace.fromObject(data.Namespace);
            }
            return message;
        }
        toObject() {
            const data: {
                Namespace?: ReturnType<typeof dependency_1.model.Namespace.prototype.toObject>;
            } = {};
            if (this.Namespace != null) {
                data.Namespace = this.Namespace.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_Namespace)
                writer.writeMessage(1, this.Namespace, () => this.Namespace.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetNamespaceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetNamespaceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.Namespace, () => message.Namespace = dependency_1.model.Namespace.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetNamespaceResponse {
            return GetNamespaceResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedNamespaceService {
        static definition = {
            Create: {
                path: "/stub.Namespace/Create",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateNamespaceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateNamespaceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateNamespaceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateNamespaceResponse.deserialize(new Uint8Array(bytes))
            },
            List: {
                path: "/stub.Namespace/List",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListNamespaceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListNamespaceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListNamespaceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListNamespaceResponse.deserialize(new Uint8Array(bytes))
            },
            Update: {
                path: "/stub.Namespace/Update",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateNamespaceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateNamespaceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UpdateNamespaceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UpdateNamespaceResponse.deserialize(new Uint8Array(bytes))
            },
            Delete: {
                path: "/stub.Namespace/Delete",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteNamespaceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteNamespaceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteNamespaceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteNamespaceResponse.deserialize(new Uint8Array(bytes))
            },
            Get: {
                path: "/stub.Namespace/Get",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetNamespaceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetNamespaceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetNamespaceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetNamespaceResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Create(call: grpc_1.ServerUnaryCall<CreateNamespaceRequest, CreateNamespaceResponse>, callback: grpc_1.sendUnaryData<CreateNamespaceResponse>): void;
        abstract List(call: grpc_1.ServerUnaryCall<ListNamespaceRequest, ListNamespaceResponse>, callback: grpc_1.sendUnaryData<ListNamespaceResponse>): void;
        abstract Update(call: grpc_1.ServerUnaryCall<UpdateNamespaceRequest, UpdateNamespaceResponse>, callback: grpc_1.sendUnaryData<UpdateNamespaceResponse>): void;
        abstract Delete(call: grpc_1.ServerUnaryCall<DeleteNamespaceRequest, DeleteNamespaceResponse>, callback: grpc_1.sendUnaryData<DeleteNamespaceResponse>): void;
        abstract Get(call: grpc_1.ServerUnaryCall<GetNamespaceRequest, GetNamespaceResponse>, callback: grpc_1.sendUnaryData<GetNamespaceResponse>): void;
    }
    export class NamespaceClient extends grpc_1.makeGenericClientConstructor(UnimplementedNamespaceService.definition, "Namespace", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Create: GrpcUnaryServiceInterface<CreateNamespaceRequest, CreateNamespaceResponse> = (message: CreateNamespaceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateNamespaceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateNamespaceResponse>, callback?: grpc_1.requestCallback<CreateNamespaceResponse>): grpc_1.ClientUnaryCall => {
            return super.Create(message, metadata, options, callback);
        };
        List: GrpcUnaryServiceInterface<ListNamespaceRequest, ListNamespaceResponse> = (message: ListNamespaceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListNamespaceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListNamespaceResponse>, callback?: grpc_1.requestCallback<ListNamespaceResponse>): grpc_1.ClientUnaryCall => {
            return super.List(message, metadata, options, callback);
        };
        Update: GrpcUnaryServiceInterface<UpdateNamespaceRequest, UpdateNamespaceResponse> = (message: UpdateNamespaceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateNamespaceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateNamespaceResponse>, callback?: grpc_1.requestCallback<UpdateNamespaceResponse>): grpc_1.ClientUnaryCall => {
            return super.Update(message, metadata, options, callback);
        };
        Delete: GrpcUnaryServiceInterface<DeleteNamespaceRequest, DeleteNamespaceResponse> = (message: DeleteNamespaceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteNamespaceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteNamespaceResponse>, callback?: grpc_1.requestCallback<DeleteNamespaceResponse>): grpc_1.ClientUnaryCall => {
            return super.Delete(message, metadata, options, callback);
        };
        Get: GrpcUnaryServiceInterface<GetNamespaceRequest, GetNamespaceResponse> = (message: GetNamespaceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetNamespaceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetNamespaceResponse>, callback?: grpc_1.requestCallback<GetNamespaceResponse>): grpc_1.ClientUnaryCall => {
            return super.Get(message, metadata, options, callback);
        };
    }
}
