/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: model/external.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./annotations";
import * as pb_1 from "google-protobuf";
export namespace model {
    export class FunctionCall extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            host?: string;
            functionName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("host" in data && data.host != undefined) {
                    this.host = data.host;
                }
                if ("functionName" in data && data.functionName != undefined) {
                    this.functionName = data.functionName;
                }
            }
        }
        get host() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set host(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get functionName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set functionName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            host?: string;
            functionName?: string;
        }): FunctionCall {
            const message = new FunctionCall({});
            if (data.host != null) {
                message.host = data.host;
            }
            if (data.functionName != null) {
                message.functionName = data.functionName;
            }
            return message;
        }
        toObject() {
            const data: {
                host?: string;
                functionName?: string;
            } = {};
            if (this.host != null) {
                data.host = this.host;
            }
            if (this.functionName != null) {
                data.functionName = this.functionName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.host.length)
                writer.writeString(1, this.host);
            if (this.functionName.length)
                writer.writeString(2, this.functionName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FunctionCall {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FunctionCall();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.host = reader.readString();
                        break;
                    case 2:
                        message.functionName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FunctionCall {
            return FunctionCall.deserialize(bytes);
        }
    }
    export class HttpCall extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            uri?: string;
            method?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("method" in data && data.method != undefined) {
                    this.method = data.method;
                }
            }
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get method() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set method(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            uri?: string;
            method?: string;
        }): HttpCall {
            const message = new HttpCall({});
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.method != null) {
                message.method = data.method;
            }
            return message;
        }
        toObject() {
            const data: {
                uri?: string;
                method?: string;
            } = {};
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.method != null) {
                data.method = this.method;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.uri.length)
                writer.writeString(1, this.uri);
            if (this.method.length)
                writer.writeString(2, this.method);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HttpCall {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HttpCall();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uri = reader.readString();
                        break;
                    case 2:
                        message.method = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HttpCall {
            return HttpCall.deserialize(bytes);
        }
    }
    export class ExternalCall extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            functionCall?: FunctionCall;
            httpCall?: never;
        } | {
            functionCall?: never;
            httpCall?: HttpCall;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("functionCall" in data && data.functionCall != undefined) {
                    this.functionCall = data.functionCall;
                }
                if ("httpCall" in data && data.httpCall != undefined) {
                    this.httpCall = data.httpCall;
                }
            }
        }
        get functionCall() {
            return pb_1.Message.getWrapperField(this, FunctionCall, 1) as FunctionCall;
        }
        set functionCall(value: FunctionCall) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_functionCall() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get httpCall() {
            return pb_1.Message.getWrapperField(this, HttpCall, 2) as HttpCall;
        }
        set httpCall(value: HttpCall) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_httpCall() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get kind() {
            const cases: {
                [index: number]: "none" | "functionCall" | "httpCall";
            } = {
                0: "none",
                1: "functionCall",
                2: "httpCall"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            functionCall?: ReturnType<typeof FunctionCall.prototype.toObject>;
            httpCall?: ReturnType<typeof HttpCall.prototype.toObject>;
        }): ExternalCall {
            const message = new ExternalCall({});
            if (data.functionCall != null) {
                message.functionCall = FunctionCall.fromObject(data.functionCall);
            }
            if (data.httpCall != null) {
                message.httpCall = HttpCall.fromObject(data.httpCall);
            }
            return message;
        }
        toObject() {
            const data: {
                functionCall?: ReturnType<typeof FunctionCall.prototype.toObject>;
                httpCall?: ReturnType<typeof HttpCall.prototype.toObject>;
            } = {};
            if (this.functionCall != null) {
                data.functionCall = this.functionCall.toObject();
            }
            if (this.httpCall != null) {
                data.httpCall = this.httpCall.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_functionCall)
                writer.writeMessage(1, this.functionCall, () => this.functionCall.serialize(writer));
            if (this.has_httpCall)
                writer.writeMessage(2, this.httpCall, () => this.httpCall.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExternalCall {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExternalCall();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.functionCall, () => message.functionCall = FunctionCall.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.httpCall, () => message.httpCall = HttpCall.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ExternalCall {
            return ExternalCall.deserialize(bytes);
        }
    }
}
