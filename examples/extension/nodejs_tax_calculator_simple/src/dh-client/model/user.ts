/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: model/user.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/struct";
import * as dependency_2 from "./audit";
import * as dependency_3 from "./common";
import * as dependency_4 from "./security";
import * as dependency_5 from "./annotations";
import * as pb_1 from "google-protobuf";
export class User extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        username?: string;
        password?: string;
        securityContext?: dependency_4.SecurityContext;
        details?: dependency_1.Struct;
        signKey?: string;
        auditData?: dependency_2.AuditData;
        version?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("securityContext" in data && data.securityContext != undefined) {
                this.securityContext = data.securityContext;
            }
            if ("details" in data && data.details != undefined) {
                this.details = data.details;
            }
            if ("signKey" in data && data.signKey != undefined) {
                this.signKey = data.signKey;
            }
            if ("auditData" in data && data.auditData != undefined) {
                this.auditData = data.auditData;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get securityContext() {
        return pb_1.Message.getWrapperField(this, dependency_4.SecurityContext, 5) as dependency_4.SecurityContext;
    }
    set securityContext(value: dependency_4.SecurityContext) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasSecurityContext() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get details() {
        return pb_1.Message.getWrapperField(this, dependency_1.Struct, 6) as dependency_1.Struct;
    }
    set details(value: dependency_1.Struct) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasDetails() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get signKey() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set signKey(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get auditData() {
        return pb_1.Message.getWrapperField(this, dependency_2.AuditData, 101) as dependency_2.AuditData;
    }
    set auditData(value: dependency_2.AuditData) {
        pb_1.Message.setWrapperField(this, 101, value);
    }
    get hasAuditData() {
        return pb_1.Message.getField(this, 101) != null;
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 102, 0) as number;
    }
    set version(value: number) {
        pb_1.Message.setField(this, 102, value);
    }
    static fromObject(data: {
        id?: string;
        username?: string;
        password?: string;
        securityContext?: ReturnType<typeof dependency_4.SecurityContext.prototype.toObject>;
        details?: ReturnType<typeof dependency_1.Struct.prototype.toObject>;
        signKey?: string;
        auditData?: ReturnType<typeof dependency_2.AuditData.prototype.toObject>;
        version?: number;
    }): User {
        const message = new User({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.securityContext != null) {
            message.securityContext = dependency_4.SecurityContext.fromObject(data.securityContext);
        }
        if (data.details != null) {
            message.details = dependency_1.Struct.fromObject(data.details);
        }
        if (data.signKey != null) {
            message.signKey = data.signKey;
        }
        if (data.auditData != null) {
            message.auditData = dependency_2.AuditData.fromObject(data.auditData);
        }
        if (data.version != null) {
            message.version = data.version;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            username?: string;
            password?: string;
            securityContext?: ReturnType<typeof dependency_4.SecurityContext.prototype.toObject>;
            details?: ReturnType<typeof dependency_1.Struct.prototype.toObject>;
            signKey?: string;
            auditData?: ReturnType<typeof dependency_2.AuditData.prototype.toObject>;
            version?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.securityContext != null) {
            data.securityContext = this.securityContext.toObject();
        }
        if (this.details != null) {
            data.details = this.details.toObject();
        }
        if (this.signKey != null) {
            data.signKey = this.signKey;
        }
        if (this.auditData != null) {
            data.auditData = this.auditData.toObject();
        }
        if (this.version != null) {
            data.version = this.version;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.username.length)
            writer.writeString(3, this.username);
        if (this.password.length)
            writer.writeString(4, this.password);
        if (this.hasSecurityContext)
            writer.writeMessage(5, this.securityContext, () => this.securityContext.serialize(writer));
        if (this.hasDetails)
            writer.writeMessage(6, this.details, () => this.details.serialize(writer));
        if (this.signKey.length)
            writer.writeString(7, this.signKey);
        if (this.hasAuditData)
            writer.writeMessage(101, this.auditData, () => this.auditData.serialize(writer));
        if (this.version != 0)
            writer.writeUint32(102, this.version);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 3:
                    message.username = reader.readString();
                    break;
                case 4:
                    message.password = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.securityContext, () => message.securityContext = dependency_4.SecurityContext.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.details, () => message.details = dependency_1.Struct.deserialize(reader));
                    break;
                case 7:
                    message.signKey = reader.readString();
                    break;
                case 101:
                    reader.readMessage(message.auditData, () => message.auditData = dependency_2.AuditData.deserialize(reader));
                    break;
                case 102:
                    message.version = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): User {
        return User.deserialize(bytes);
    }
}
