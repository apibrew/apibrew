/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: model/resource-migration.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./annotations";
import * as dependency_2 from "./resource";
import * as dependency_3 from "./../google/protobuf/struct";
import * as dependency_4 from "./../google/protobuf/descriptor";
import * as pb_1 from "google-protobuf";
export namespace model {
    export class ResourceMigrationCreateResource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ResourceMigrationCreateResource {
            const message = new ResourceMigrationCreateResource({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceMigrationCreateResource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceMigrationCreateResource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceMigrationCreateResource {
            return ResourceMigrationCreateResource.deserialize(bytes);
        }
    }
    export class ResourceMigrationDeleteResource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ResourceMigrationDeleteResource {
            const message = new ResourceMigrationDeleteResource({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceMigrationDeleteResource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceMigrationDeleteResource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceMigrationDeleteResource {
            return ResourceMigrationDeleteResource.deserialize(bytes);
        }
    }
    export class ResourceMigrationUpdateResource extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            changedFields?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("changedFields" in data && data.changedFields != undefined) {
                    this.changedFields = data.changedFields;
                }
            }
        }
        get changedFields() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set changedFields(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            changedFields?: string[];
        }): ResourceMigrationUpdateResource {
            const message = new ResourceMigrationUpdateResource({});
            if (data.changedFields != null) {
                message.changedFields = data.changedFields;
            }
            return message;
        }
        toObject() {
            const data: {
                changedFields?: string[];
            } = {};
            if (this.changedFields != null) {
                data.changedFields = this.changedFields;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.changedFields.length)
                writer.writeRepeatedString(1, this.changedFields);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceMigrationUpdateResource {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceMigrationUpdateResource();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceMigrationUpdateResource {
            return ResourceMigrationUpdateResource.deserialize(bytes);
        }
    }
    export class ResourceMigrationCreateProperty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            property?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("property" in data && data.property != undefined) {
                    this.property = data.property;
                }
            }
        }
        get property() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set property(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            property?: string;
        }): ResourceMigrationCreateProperty {
            const message = new ResourceMigrationCreateProperty({});
            if (data.property != null) {
                message.property = data.property;
            }
            return message;
        }
        toObject() {
            const data: {
                property?: string;
            } = {};
            if (this.property != null) {
                data.property = this.property;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.property.length)
                writer.writeString(1, this.property);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceMigrationCreateProperty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceMigrationCreateProperty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.property = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceMigrationCreateProperty {
            return ResourceMigrationCreateProperty.deserialize(bytes);
        }
    }
    export class ResourceMigrationDeleteProperty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            existingProperty?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("existingProperty" in data && data.existingProperty != undefined) {
                    this.existingProperty = data.existingProperty;
                }
            }
        }
        get existingProperty() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set existingProperty(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            existingProperty?: string;
        }): ResourceMigrationDeleteProperty {
            const message = new ResourceMigrationDeleteProperty({});
            if (data.existingProperty != null) {
                message.existingProperty = data.existingProperty;
            }
            return message;
        }
        toObject() {
            const data: {
                existingProperty?: string;
            } = {};
            if (this.existingProperty != null) {
                data.existingProperty = this.existingProperty;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.existingProperty.length)
                writer.writeString(1, this.existingProperty);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceMigrationDeleteProperty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceMigrationDeleteProperty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.existingProperty = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceMigrationDeleteProperty {
            return ResourceMigrationDeleteProperty.deserialize(bytes);
        }
    }
    export class ResourceMigrationUpdateProperty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            existingProperty?: string;
            property?: string;
            changedFields?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("existingProperty" in data && data.existingProperty != undefined) {
                    this.existingProperty = data.existingProperty;
                }
                if ("property" in data && data.property != undefined) {
                    this.property = data.property;
                }
                if ("changedFields" in data && data.changedFields != undefined) {
                    this.changedFields = data.changedFields;
                }
            }
        }
        get existingProperty() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set existingProperty(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get property() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set property(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get changedFields() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set changedFields(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            existingProperty?: string;
            property?: string;
            changedFields?: string[];
        }): ResourceMigrationUpdateProperty {
            const message = new ResourceMigrationUpdateProperty({});
            if (data.existingProperty != null) {
                message.existingProperty = data.existingProperty;
            }
            if (data.property != null) {
                message.property = data.property;
            }
            if (data.changedFields != null) {
                message.changedFields = data.changedFields;
            }
            return message;
        }
        toObject() {
            const data: {
                existingProperty?: string;
                property?: string;
                changedFields?: string[];
            } = {};
            if (this.existingProperty != null) {
                data.existingProperty = this.existingProperty;
            }
            if (this.property != null) {
                data.property = this.property;
            }
            if (this.changedFields != null) {
                data.changedFields = this.changedFields;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.existingProperty.length)
                writer.writeString(1, this.existingProperty);
            if (this.property.length)
                writer.writeString(2, this.property);
            if (this.changedFields.length)
                writer.writeRepeatedString(3, this.changedFields);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceMigrationUpdateProperty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceMigrationUpdateProperty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.existingProperty = reader.readString();
                        break;
                    case 2:
                        message.property = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceMigrationUpdateProperty {
            return ResourceMigrationUpdateProperty.deserialize(bytes);
        }
    }
    export class ResourceMigrationCreateIndex extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            index?: number;
        }): ResourceMigrationCreateIndex {
            const message = new ResourceMigrationCreateIndex({});
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                index?: number;
            } = {};
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index != 0)
                writer.writeUint32(1, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceMigrationCreateIndex {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceMigrationCreateIndex();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.index = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceMigrationCreateIndex {
            return ResourceMigrationCreateIndex.deserialize(bytes);
        }
    }
    export class ResourceMigrationDeleteIndex extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            existingIndex?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("existingIndex" in data && data.existingIndex != undefined) {
                    this.existingIndex = data.existingIndex;
                }
            }
        }
        get existingIndex() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set existingIndex(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            existingIndex?: number;
        }): ResourceMigrationDeleteIndex {
            const message = new ResourceMigrationDeleteIndex({});
            if (data.existingIndex != null) {
                message.existingIndex = data.existingIndex;
            }
            return message;
        }
        toObject() {
            const data: {
                existingIndex?: number;
            } = {};
            if (this.existingIndex != null) {
                data.existingIndex = this.existingIndex;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.existingIndex != 0)
                writer.writeUint32(1, this.existingIndex);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceMigrationDeleteIndex {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceMigrationDeleteIndex();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.existingIndex = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceMigrationDeleteIndex {
            return ResourceMigrationDeleteIndex.deserialize(bytes);
        }
    }
    export class ResourceMigrationStep extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8]];
        constructor(data?: any[] | ({} & (({
            createResource?: ResourceMigrationCreateResource;
            deleteResource?: never;
            updateResource?: never;
            createProperty?: never;
            deleteProperty?: never;
            updateProperty?: never;
            createIndex?: never;
            deleteIndex?: never;
        } | {
            createResource?: never;
            deleteResource?: ResourceMigrationDeleteResource;
            updateResource?: never;
            createProperty?: never;
            deleteProperty?: never;
            updateProperty?: never;
            createIndex?: never;
            deleteIndex?: never;
        } | {
            createResource?: never;
            deleteResource?: never;
            updateResource?: ResourceMigrationUpdateResource;
            createProperty?: never;
            deleteProperty?: never;
            updateProperty?: never;
            createIndex?: never;
            deleteIndex?: never;
        } | {
            createResource?: never;
            deleteResource?: never;
            updateResource?: never;
            createProperty?: ResourceMigrationCreateProperty;
            deleteProperty?: never;
            updateProperty?: never;
            createIndex?: never;
            deleteIndex?: never;
        } | {
            createResource?: never;
            deleteResource?: never;
            updateResource?: never;
            createProperty?: never;
            deleteProperty?: ResourceMigrationDeleteProperty;
            updateProperty?: never;
            createIndex?: never;
            deleteIndex?: never;
        } | {
            createResource?: never;
            deleteResource?: never;
            updateResource?: never;
            createProperty?: never;
            deleteProperty?: never;
            updateProperty?: ResourceMigrationUpdateProperty;
            createIndex?: never;
            deleteIndex?: never;
        } | {
            createResource?: never;
            deleteResource?: never;
            updateResource?: never;
            createProperty?: never;
            deleteProperty?: never;
            updateProperty?: never;
            createIndex?: ResourceMigrationCreateIndex;
            deleteIndex?: never;
        } | {
            createResource?: never;
            deleteResource?: never;
            updateResource?: never;
            createProperty?: never;
            deleteProperty?: never;
            updateProperty?: never;
            createIndex?: never;
            deleteIndex?: ResourceMigrationDeleteIndex;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("createResource" in data && data.createResource != undefined) {
                    this.createResource = data.createResource;
                }
                if ("deleteResource" in data && data.deleteResource != undefined) {
                    this.deleteResource = data.deleteResource;
                }
                if ("updateResource" in data && data.updateResource != undefined) {
                    this.updateResource = data.updateResource;
                }
                if ("createProperty" in data && data.createProperty != undefined) {
                    this.createProperty = data.createProperty;
                }
                if ("deleteProperty" in data && data.deleteProperty != undefined) {
                    this.deleteProperty = data.deleteProperty;
                }
                if ("updateProperty" in data && data.updateProperty != undefined) {
                    this.updateProperty = data.updateProperty;
                }
                if ("createIndex" in data && data.createIndex != undefined) {
                    this.createIndex = data.createIndex;
                }
                if ("deleteIndex" in data && data.deleteIndex != undefined) {
                    this.deleteIndex = data.deleteIndex;
                }
            }
        }
        get createResource() {
            return pb_1.Message.getWrapperField(this, ResourceMigrationCreateResource, 1) as ResourceMigrationCreateResource;
        }
        set createResource(value: ResourceMigrationCreateResource) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_createResource() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get deleteResource() {
            return pb_1.Message.getWrapperField(this, ResourceMigrationDeleteResource, 2) as ResourceMigrationDeleteResource;
        }
        set deleteResource(value: ResourceMigrationDeleteResource) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_deleteResource() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get updateResource() {
            return pb_1.Message.getWrapperField(this, ResourceMigrationUpdateResource, 3) as ResourceMigrationUpdateResource;
        }
        set updateResource(value: ResourceMigrationUpdateResource) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_updateResource() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get createProperty() {
            return pb_1.Message.getWrapperField(this, ResourceMigrationCreateProperty, 4) as ResourceMigrationCreateProperty;
        }
        set createProperty(value: ResourceMigrationCreateProperty) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_createProperty() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get deleteProperty() {
            return pb_1.Message.getWrapperField(this, ResourceMigrationDeleteProperty, 5) as ResourceMigrationDeleteProperty;
        }
        set deleteProperty(value: ResourceMigrationDeleteProperty) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_deleteProperty() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get updateProperty() {
            return pb_1.Message.getWrapperField(this, ResourceMigrationUpdateProperty, 6) as ResourceMigrationUpdateProperty;
        }
        set updateProperty(value: ResourceMigrationUpdateProperty) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_updateProperty() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get createIndex() {
            return pb_1.Message.getWrapperField(this, ResourceMigrationCreateIndex, 7) as ResourceMigrationCreateIndex;
        }
        set createIndex(value: ResourceMigrationCreateIndex) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_createIndex() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get deleteIndex() {
            return pb_1.Message.getWrapperField(this, ResourceMigrationDeleteIndex, 8) as ResourceMigrationDeleteIndex;
        }
        set deleteIndex(value: ResourceMigrationDeleteIndex) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_deleteIndex() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get kind() {
            const cases: {
                [index: number]: "none" | "createResource" | "deleteResource" | "updateResource" | "createProperty" | "deleteProperty" | "updateProperty" | "createIndex" | "deleteIndex";
            } = {
                0: "none",
                1: "createResource",
                2: "deleteResource",
                3: "updateResource",
                4: "createProperty",
                5: "deleteProperty",
                6: "updateProperty",
                7: "createIndex",
                8: "deleteIndex"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8])];
        }
        static fromObject(data: {
            createResource?: ReturnType<typeof ResourceMigrationCreateResource.prototype.toObject>;
            deleteResource?: ReturnType<typeof ResourceMigrationDeleteResource.prototype.toObject>;
            updateResource?: ReturnType<typeof ResourceMigrationUpdateResource.prototype.toObject>;
            createProperty?: ReturnType<typeof ResourceMigrationCreateProperty.prototype.toObject>;
            deleteProperty?: ReturnType<typeof ResourceMigrationDeleteProperty.prototype.toObject>;
            updateProperty?: ReturnType<typeof ResourceMigrationUpdateProperty.prototype.toObject>;
            createIndex?: ReturnType<typeof ResourceMigrationCreateIndex.prototype.toObject>;
            deleteIndex?: ReturnType<typeof ResourceMigrationDeleteIndex.prototype.toObject>;
        }): ResourceMigrationStep {
            const message = new ResourceMigrationStep({});
            if (data.createResource != null) {
                message.createResource = ResourceMigrationCreateResource.fromObject(data.createResource);
            }
            if (data.deleteResource != null) {
                message.deleteResource = ResourceMigrationDeleteResource.fromObject(data.deleteResource);
            }
            if (data.updateResource != null) {
                message.updateResource = ResourceMigrationUpdateResource.fromObject(data.updateResource);
            }
            if (data.createProperty != null) {
                message.createProperty = ResourceMigrationCreateProperty.fromObject(data.createProperty);
            }
            if (data.deleteProperty != null) {
                message.deleteProperty = ResourceMigrationDeleteProperty.fromObject(data.deleteProperty);
            }
            if (data.updateProperty != null) {
                message.updateProperty = ResourceMigrationUpdateProperty.fromObject(data.updateProperty);
            }
            if (data.createIndex != null) {
                message.createIndex = ResourceMigrationCreateIndex.fromObject(data.createIndex);
            }
            if (data.deleteIndex != null) {
                message.deleteIndex = ResourceMigrationDeleteIndex.fromObject(data.deleteIndex);
            }
            return message;
        }
        toObject() {
            const data: {
                createResource?: ReturnType<typeof ResourceMigrationCreateResource.prototype.toObject>;
                deleteResource?: ReturnType<typeof ResourceMigrationDeleteResource.prototype.toObject>;
                updateResource?: ReturnType<typeof ResourceMigrationUpdateResource.prototype.toObject>;
                createProperty?: ReturnType<typeof ResourceMigrationCreateProperty.prototype.toObject>;
                deleteProperty?: ReturnType<typeof ResourceMigrationDeleteProperty.prototype.toObject>;
                updateProperty?: ReturnType<typeof ResourceMigrationUpdateProperty.prototype.toObject>;
                createIndex?: ReturnType<typeof ResourceMigrationCreateIndex.prototype.toObject>;
                deleteIndex?: ReturnType<typeof ResourceMigrationDeleteIndex.prototype.toObject>;
            } = {};
            if (this.createResource != null) {
                data.createResource = this.createResource.toObject();
            }
            if (this.deleteResource != null) {
                data.deleteResource = this.deleteResource.toObject();
            }
            if (this.updateResource != null) {
                data.updateResource = this.updateResource.toObject();
            }
            if (this.createProperty != null) {
                data.createProperty = this.createProperty.toObject();
            }
            if (this.deleteProperty != null) {
                data.deleteProperty = this.deleteProperty.toObject();
            }
            if (this.updateProperty != null) {
                data.updateProperty = this.updateProperty.toObject();
            }
            if (this.createIndex != null) {
                data.createIndex = this.createIndex.toObject();
            }
            if (this.deleteIndex != null) {
                data.deleteIndex = this.deleteIndex.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_createResource)
                writer.writeMessage(1, this.createResource, () => this.createResource.serialize(writer));
            if (this.has_deleteResource)
                writer.writeMessage(2, this.deleteResource, () => this.deleteResource.serialize(writer));
            if (this.has_updateResource)
                writer.writeMessage(3, this.updateResource, () => this.updateResource.serialize(writer));
            if (this.has_createProperty)
                writer.writeMessage(4, this.createProperty, () => this.createProperty.serialize(writer));
            if (this.has_deleteProperty)
                writer.writeMessage(5, this.deleteProperty, () => this.deleteProperty.serialize(writer));
            if (this.has_updateProperty)
                writer.writeMessage(6, this.updateProperty, () => this.updateProperty.serialize(writer));
            if (this.has_createIndex)
                writer.writeMessage(7, this.createIndex, () => this.createIndex.serialize(writer));
            if (this.has_deleteIndex)
                writer.writeMessage(8, this.deleteIndex, () => this.deleteIndex.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceMigrationStep {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceMigrationStep();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.createResource, () => message.createResource = ResourceMigrationCreateResource.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.deleteResource, () => message.deleteResource = ResourceMigrationDeleteResource.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.updateResource, () => message.updateResource = ResourceMigrationUpdateResource.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.createProperty, () => message.createProperty = ResourceMigrationCreateProperty.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.deleteProperty, () => message.deleteProperty = ResourceMigrationDeleteProperty.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.updateProperty, () => message.updateProperty = ResourceMigrationUpdateProperty.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.createIndex, () => message.createIndex = ResourceMigrationCreateIndex.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.deleteIndex, () => message.deleteIndex = ResourceMigrationDeleteIndex.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceMigrationStep {
            return ResourceMigrationStep.deserialize(bytes);
        }
    }
    export class ResourceMigrationPlan extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            existingResource?: dependency_2.model.Resource;
            currentResource?: dependency_2.model.Resource;
            steps?: ResourceMigrationStep[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("existingResource" in data && data.existingResource != undefined) {
                    this.existingResource = data.existingResource;
                }
                if ("currentResource" in data && data.currentResource != undefined) {
                    this.currentResource = data.currentResource;
                }
                if ("steps" in data && data.steps != undefined) {
                    this.steps = data.steps;
                }
            }
        }
        get existingResource() {
            return pb_1.Message.getWrapperField(this, dependency_2.model.Resource, 1) as dependency_2.model.Resource;
        }
        set existingResource(value: dependency_2.model.Resource) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_existingResource() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get currentResource() {
            return pb_1.Message.getWrapperField(this, dependency_2.model.Resource, 2) as dependency_2.model.Resource;
        }
        set currentResource(value: dependency_2.model.Resource) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_currentResource() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get steps() {
            return pb_1.Message.getRepeatedWrapperField(this, ResourceMigrationStep, 3) as ResourceMigrationStep[];
        }
        set steps(value: ResourceMigrationStep[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            existingResource?: ReturnType<typeof dependency_2.model.Resource.prototype.toObject>;
            currentResource?: ReturnType<typeof dependency_2.model.Resource.prototype.toObject>;
            steps?: ReturnType<typeof ResourceMigrationStep.prototype.toObject>[];
        }): ResourceMigrationPlan {
            const message = new ResourceMigrationPlan({});
            if (data.existingResource != null) {
                message.existingResource = dependency_2.model.Resource.fromObject(data.existingResource);
            }
            if (data.currentResource != null) {
                message.currentResource = dependency_2.model.Resource.fromObject(data.currentResource);
            }
            if (data.steps != null) {
                message.steps = data.steps.map(item => ResourceMigrationStep.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                existingResource?: ReturnType<typeof dependency_2.model.Resource.prototype.toObject>;
                currentResource?: ReturnType<typeof dependency_2.model.Resource.prototype.toObject>;
                steps?: ReturnType<typeof ResourceMigrationStep.prototype.toObject>[];
            } = {};
            if (this.existingResource != null) {
                data.existingResource = this.existingResource.toObject();
            }
            if (this.currentResource != null) {
                data.currentResource = this.currentResource.toObject();
            }
            if (this.steps != null) {
                data.steps = this.steps.map((item: ResourceMigrationStep) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_existingResource)
                writer.writeMessage(1, this.existingResource, () => this.existingResource.serialize(writer));
            if (this.has_currentResource)
                writer.writeMessage(2, this.currentResource, () => this.currentResource.serialize(writer));
            if (this.steps.length)
                writer.writeRepeatedMessage(3, this.steps, (item: ResourceMigrationStep) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceMigrationPlan {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceMigrationPlan();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.existingResource, () => message.existingResource = dependency_2.model.Resource.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.currentResource, () => message.currentResource = dependency_2.model.Resource.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.steps, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ResourceMigrationStep.deserialize(reader), ResourceMigrationStep));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceMigrationPlan {
            return ResourceMigrationPlan.deserialize(bytes);
        }
    }
}
