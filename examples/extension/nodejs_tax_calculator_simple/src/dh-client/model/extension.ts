/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: model/extension.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./audit";
import * as dependency_2 from "./common";
import * as dependency_3 from "./external";
import * as dependency_4 from "./annotations";
import * as pb_1 from "google-protobuf";
export namespace model {
    export class Extension extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            description?: string;
            namespace?: string;
            resource?: string;
            before?: Extension.Before;
            instead?: Extension.Instead;
            after?: Extension.After;
            auditData?: dependency_1.model.AuditData;
            version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("namespace" in data && data.namespace != undefined) {
                    this.namespace = data.namespace;
                }
                if ("resource" in data && data.resource != undefined) {
                    this.resource = data.resource;
                }
                if ("before" in data && data.before != undefined) {
                    this.before = data.before;
                }
                if ("instead" in data && data.instead != undefined) {
                    this.instead = data.instead;
                }
                if ("after" in data && data.after != undefined) {
                    this.after = data.after;
                }
                if ("auditData" in data && data.auditData != undefined) {
                    this.auditData = data.auditData;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get namespace() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set namespace(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get resource() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set resource(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get before() {
            return pb_1.Message.getWrapperField(this, Extension.Before, 7) as Extension.Before;
        }
        set before(value: Extension.Before) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_before() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get instead() {
            return pb_1.Message.getWrapperField(this, Extension.Instead, 8) as Extension.Instead;
        }
        set instead(value: Extension.Instead) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_instead() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get after() {
            return pb_1.Message.getWrapperField(this, Extension.After, 9) as Extension.After;
        }
        set after(value: Extension.After) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_after() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get auditData() {
            return pb_1.Message.getWrapperField(this, dependency_1.model.AuditData, 101) as dependency_1.model.AuditData;
        }
        set auditData(value: dependency_1.model.AuditData) {
            pb_1.Message.setWrapperField(this, 101, value);
        }
        get has_auditData() {
            return pb_1.Message.getField(this, 101) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 102, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 102, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            description?: string;
            namespace?: string;
            resource?: string;
            before?: ReturnType<typeof Extension.Before.prototype.toObject>;
            instead?: ReturnType<typeof Extension.Instead.prototype.toObject>;
            after?: ReturnType<typeof Extension.After.prototype.toObject>;
            auditData?: ReturnType<typeof dependency_1.model.AuditData.prototype.toObject>;
            version?: number;
        }): Extension {
            const message = new Extension({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.namespace != null) {
                message.namespace = data.namespace;
            }
            if (data.resource != null) {
                message.resource = data.resource;
            }
            if (data.before != null) {
                message.before = Extension.Before.fromObject(data.before);
            }
            if (data.instead != null) {
                message.instead = Extension.Instead.fromObject(data.instead);
            }
            if (data.after != null) {
                message.after = Extension.After.fromObject(data.after);
            }
            if (data.auditData != null) {
                message.auditData = dependency_1.model.AuditData.fromObject(data.auditData);
            }
            if (data.version != null) {
                message.version = data.version;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                description?: string;
                namespace?: string;
                resource?: string;
                before?: ReturnType<typeof Extension.Before.prototype.toObject>;
                instead?: ReturnType<typeof Extension.Instead.prototype.toObject>;
                after?: ReturnType<typeof Extension.After.prototype.toObject>;
                auditData?: ReturnType<typeof dependency_1.model.AuditData.prototype.toObject>;
                version?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.namespace != null) {
                data.namespace = this.namespace;
            }
            if (this.resource != null) {
                data.resource = this.resource;
            }
            if (this.before != null) {
                data.before = this.before.toObject();
            }
            if (this.instead != null) {
                data.instead = this.instead.toObject();
            }
            if (this.after != null) {
                data.after = this.after.toObject();
            }
            if (this.auditData != null) {
                data.auditData = this.auditData.toObject();
            }
            if (this.version != null) {
                data.version = this.version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.namespace.length)
                writer.writeString(5, this.namespace);
            if (this.resource.length)
                writer.writeString(6, this.resource);
            if (this.has_before)
                writer.writeMessage(7, this.before, () => this.before.serialize(writer));
            if (this.has_instead)
                writer.writeMessage(8, this.instead, () => this.instead.serialize(writer));
            if (this.has_after)
                writer.writeMessage(9, this.after, () => this.after.serialize(writer));
            if (this.has_auditData)
                writer.writeMessage(101, this.auditData, () => this.auditData.serialize(writer));
            if (this.version != 0)
                writer.writeUint32(102, this.version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Extension {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Extension();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 5:
                        message.namespace = reader.readString();
                        break;
                    case 6:
                        message.resource = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.before, () => message.before = Extension.Before.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.instead, () => message.instead = Extension.Instead.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.after, () => message.after = Extension.After.deserialize(reader));
                        break;
                    case 101:
                        reader.readMessage(message.auditData, () => message.auditData = dependency_1.model.AuditData.deserialize(reader));
                        break;
                    case 102:
                        message.version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Extension {
            return Extension.deserialize(bytes);
        }
    }
    export namespace Extension {
        export class After extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                all?: dependency_3.model.ExternalCall;
                create?: dependency_3.model.ExternalCall;
                update?: dependency_3.model.ExternalCall;
                delete?: dependency_3.model.ExternalCall;
                get?: dependency_3.model.ExternalCall;
                list?: dependency_3.model.ExternalCall;
                sync?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("all" in data && data.all != undefined) {
                        this.all = data.all;
                    }
                    if ("create" in data && data.create != undefined) {
                        this.create = data.create;
                    }
                    if ("update" in data && data.update != undefined) {
                        this.update = data.update;
                    }
                    if ("delete" in data && data.delete != undefined) {
                        this.delete = data.delete;
                    }
                    if ("get" in data && data.get != undefined) {
                        this.get = data.get;
                    }
                    if ("list" in data && data.list != undefined) {
                        this.list = data.list;
                    }
                    if ("sync" in data && data.sync != undefined) {
                        this.sync = data.sync;
                    }
                }
            }
            get all() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 1) as dependency_3.model.ExternalCall;
            }
            set all(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_all() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get create() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 2) as dependency_3.model.ExternalCall;
            }
            set create(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_create() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get update() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 3) as dependency_3.model.ExternalCall;
            }
            set update(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_update() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get delete() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 4) as dependency_3.model.ExternalCall;
            }
            set delete(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_delete() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get get() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 5) as dependency_3.model.ExternalCall;
            }
            set get(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_get() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get list() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 6) as dependency_3.model.ExternalCall;
            }
            set list(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_list() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get sync() {
                return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
            }
            set sync(value: boolean) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                all?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                create?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                update?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                delete?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                get?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                list?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                sync?: boolean;
            }): After {
                const message = new After({});
                if (data.all != null) {
                    message.all = dependency_3.model.ExternalCall.fromObject(data.all);
                }
                if (data.create != null) {
                    message.create = dependency_3.model.ExternalCall.fromObject(data.create);
                }
                if (data.update != null) {
                    message.update = dependency_3.model.ExternalCall.fromObject(data.update);
                }
                if (data.delete != null) {
                    message.delete = dependency_3.model.ExternalCall.fromObject(data.delete);
                }
                if (data.get != null) {
                    message.get = dependency_3.model.ExternalCall.fromObject(data.get);
                }
                if (data.list != null) {
                    message.list = dependency_3.model.ExternalCall.fromObject(data.list);
                }
                if (data.sync != null) {
                    message.sync = data.sync;
                }
                return message;
            }
            toObject() {
                const data: {
                    all?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    create?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    update?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    delete?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    get?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    list?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    sync?: boolean;
                } = {};
                if (this.all != null) {
                    data.all = this.all.toObject();
                }
                if (this.create != null) {
                    data.create = this.create.toObject();
                }
                if (this.update != null) {
                    data.update = this.update.toObject();
                }
                if (this.delete != null) {
                    data.delete = this.delete.toObject();
                }
                if (this.get != null) {
                    data.get = this.get.toObject();
                }
                if (this.list != null) {
                    data.list = this.list.toObject();
                }
                if (this.sync != null) {
                    data.sync = this.sync;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_all)
                    writer.writeMessage(1, this.all, () => this.all.serialize(writer));
                if (this.has_create)
                    writer.writeMessage(2, this.create, () => this.create.serialize(writer));
                if (this.has_update)
                    writer.writeMessage(3, this.update, () => this.update.serialize(writer));
                if (this.has_delete)
                    writer.writeMessage(4, this.delete, () => this.delete.serialize(writer));
                if (this.has_get)
                    writer.writeMessage(5, this.get, () => this.get.serialize(writer));
                if (this.has_list)
                    writer.writeMessage(6, this.list, () => this.list.serialize(writer));
                if (this.sync != false)
                    writer.writeBool(7, this.sync);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): After {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new After();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.all, () => message.all = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.create, () => message.create = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.update, () => message.update = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.delete, () => message.delete = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 5:
                            reader.readMessage(message.get, () => message.get = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 6:
                            reader.readMessage(message.list, () => message.list = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 7:
                            message.sync = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): After {
                return After.deserialize(bytes);
            }
        }
        export class Before extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                all?: dependency_3.model.ExternalCall;
                create?: dependency_3.model.ExternalCall;
                update?: dependency_3.model.ExternalCall;
                delete?: dependency_3.model.ExternalCall;
                get?: dependency_3.model.ExternalCall;
                list?: dependency_3.model.ExternalCall;
                sync?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("all" in data && data.all != undefined) {
                        this.all = data.all;
                    }
                    if ("create" in data && data.create != undefined) {
                        this.create = data.create;
                    }
                    if ("update" in data && data.update != undefined) {
                        this.update = data.update;
                    }
                    if ("delete" in data && data.delete != undefined) {
                        this.delete = data.delete;
                    }
                    if ("get" in data && data.get != undefined) {
                        this.get = data.get;
                    }
                    if ("list" in data && data.list != undefined) {
                        this.list = data.list;
                    }
                    if ("sync" in data && data.sync != undefined) {
                        this.sync = data.sync;
                    }
                }
            }
            get all() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 1) as dependency_3.model.ExternalCall;
            }
            set all(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_all() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get create() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 2) as dependency_3.model.ExternalCall;
            }
            set create(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_create() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get update() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 3) as dependency_3.model.ExternalCall;
            }
            set update(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_update() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get delete() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 4) as dependency_3.model.ExternalCall;
            }
            set delete(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_delete() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get get() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 5) as dependency_3.model.ExternalCall;
            }
            set get(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_get() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get list() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 6) as dependency_3.model.ExternalCall;
            }
            set list(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_list() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get sync() {
                return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
            }
            set sync(value: boolean) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                all?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                create?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                update?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                delete?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                get?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                list?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                sync?: boolean;
            }): Before {
                const message = new Before({});
                if (data.all != null) {
                    message.all = dependency_3.model.ExternalCall.fromObject(data.all);
                }
                if (data.create != null) {
                    message.create = dependency_3.model.ExternalCall.fromObject(data.create);
                }
                if (data.update != null) {
                    message.update = dependency_3.model.ExternalCall.fromObject(data.update);
                }
                if (data.delete != null) {
                    message.delete = dependency_3.model.ExternalCall.fromObject(data.delete);
                }
                if (data.get != null) {
                    message.get = dependency_3.model.ExternalCall.fromObject(data.get);
                }
                if (data.list != null) {
                    message.list = dependency_3.model.ExternalCall.fromObject(data.list);
                }
                if (data.sync != null) {
                    message.sync = data.sync;
                }
                return message;
            }
            toObject() {
                const data: {
                    all?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    create?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    update?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    delete?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    get?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    list?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    sync?: boolean;
                } = {};
                if (this.all != null) {
                    data.all = this.all.toObject();
                }
                if (this.create != null) {
                    data.create = this.create.toObject();
                }
                if (this.update != null) {
                    data.update = this.update.toObject();
                }
                if (this.delete != null) {
                    data.delete = this.delete.toObject();
                }
                if (this.get != null) {
                    data.get = this.get.toObject();
                }
                if (this.list != null) {
                    data.list = this.list.toObject();
                }
                if (this.sync != null) {
                    data.sync = this.sync;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_all)
                    writer.writeMessage(1, this.all, () => this.all.serialize(writer));
                if (this.has_create)
                    writer.writeMessage(2, this.create, () => this.create.serialize(writer));
                if (this.has_update)
                    writer.writeMessage(3, this.update, () => this.update.serialize(writer));
                if (this.has_delete)
                    writer.writeMessage(4, this.delete, () => this.delete.serialize(writer));
                if (this.has_get)
                    writer.writeMessage(5, this.get, () => this.get.serialize(writer));
                if (this.has_list)
                    writer.writeMessage(6, this.list, () => this.list.serialize(writer));
                if (this.sync != false)
                    writer.writeBool(7, this.sync);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Before {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Before();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.all, () => message.all = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.create, () => message.create = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.update, () => message.update = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.delete, () => message.delete = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 5:
                            reader.readMessage(message.get, () => message.get = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 6:
                            reader.readMessage(message.list, () => message.list = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 7:
                            message.sync = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Before {
                return Before.deserialize(bytes);
            }
        }
        export class Instead extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                all?: dependency_3.model.ExternalCall;
                create?: dependency_3.model.ExternalCall;
                update?: dependency_3.model.ExternalCall;
                delete?: dependency_3.model.ExternalCall;
                get?: dependency_3.model.ExternalCall;
                list?: dependency_3.model.ExternalCall;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("all" in data && data.all != undefined) {
                        this.all = data.all;
                    }
                    if ("create" in data && data.create != undefined) {
                        this.create = data.create;
                    }
                    if ("update" in data && data.update != undefined) {
                        this.update = data.update;
                    }
                    if ("delete" in data && data.delete != undefined) {
                        this.delete = data.delete;
                    }
                    if ("get" in data && data.get != undefined) {
                        this.get = data.get;
                    }
                    if ("list" in data && data.list != undefined) {
                        this.list = data.list;
                    }
                }
            }
            get all() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 1) as dependency_3.model.ExternalCall;
            }
            set all(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_all() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get create() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 2) as dependency_3.model.ExternalCall;
            }
            set create(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_create() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get update() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 3) as dependency_3.model.ExternalCall;
            }
            set update(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 3, value);
            }
            get has_update() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get delete() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 4) as dependency_3.model.ExternalCall;
            }
            set delete(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_delete() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get get() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 5) as dependency_3.model.ExternalCall;
            }
            set get(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 5, value);
            }
            get has_get() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get list() {
                return pb_1.Message.getWrapperField(this, dependency_3.model.ExternalCall, 6) as dependency_3.model.ExternalCall;
            }
            set list(value: dependency_3.model.ExternalCall) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_list() {
                return pb_1.Message.getField(this, 6) != null;
            }
            static fromObject(data: {
                all?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                create?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                update?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                delete?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                get?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                list?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
            }): Instead {
                const message = new Instead({});
                if (data.all != null) {
                    message.all = dependency_3.model.ExternalCall.fromObject(data.all);
                }
                if (data.create != null) {
                    message.create = dependency_3.model.ExternalCall.fromObject(data.create);
                }
                if (data.update != null) {
                    message.update = dependency_3.model.ExternalCall.fromObject(data.update);
                }
                if (data.delete != null) {
                    message.delete = dependency_3.model.ExternalCall.fromObject(data.delete);
                }
                if (data.get != null) {
                    message.get = dependency_3.model.ExternalCall.fromObject(data.get);
                }
                if (data.list != null) {
                    message.list = dependency_3.model.ExternalCall.fromObject(data.list);
                }
                return message;
            }
            toObject() {
                const data: {
                    all?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    create?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    update?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    delete?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    get?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                    list?: ReturnType<typeof dependency_3.model.ExternalCall.prototype.toObject>;
                } = {};
                if (this.all != null) {
                    data.all = this.all.toObject();
                }
                if (this.create != null) {
                    data.create = this.create.toObject();
                }
                if (this.update != null) {
                    data.update = this.update.toObject();
                }
                if (this.delete != null) {
                    data.delete = this.delete.toObject();
                }
                if (this.get != null) {
                    data.get = this.get.toObject();
                }
                if (this.list != null) {
                    data.list = this.list.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_all)
                    writer.writeMessage(1, this.all, () => this.all.serialize(writer));
                if (this.has_create)
                    writer.writeMessage(2, this.create, () => this.create.serialize(writer));
                if (this.has_update)
                    writer.writeMessage(3, this.update, () => this.update.serialize(writer));
                if (this.has_delete)
                    writer.writeMessage(4, this.delete, () => this.delete.serialize(writer));
                if (this.has_get)
                    writer.writeMessage(5, this.get, () => this.get.serialize(writer));
                if (this.has_list)
                    writer.writeMessage(6, this.list, () => this.list.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Instead {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Instead();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.all, () => message.all = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.create, () => message.create = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.update, () => message.update = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.delete, () => message.delete = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 5:
                            reader.readMessage(message.get, () => message.get = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        case 6:
                            reader.readMessage(message.list, () => message.list = dependency_3.model.ExternalCall.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Instead {
                return Instead.deserialize(bytes);
            }
        }
    }
}
