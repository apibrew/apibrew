/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: model/init.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./data-source";
import * as dependency_2 from "./user";
import * as dependency_3 from "./resource";
import * as dependency_4 from "./record";
import * as dependency_5 from "./namespace";
import * as pb_1 from "google-protobuf";
export class AppConfig extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        host?: string;
        port?: number;
        jwtPrivateKey?: string;
        jwtPublicKey?: string;
        disableAuthentication?: boolean;
        disableCache?: boolean;
        pluginsPath?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("host" in data && data.host != undefined) {
                this.host = data.host;
            }
            if ("port" in data && data.port != undefined) {
                this.port = data.port;
            }
            if ("jwtPrivateKey" in data && data.jwtPrivateKey != undefined) {
                this.jwtPrivateKey = data.jwtPrivateKey;
            }
            if ("jwtPublicKey" in data && data.jwtPublicKey != undefined) {
                this.jwtPublicKey = data.jwtPublicKey;
            }
            if ("disableAuthentication" in data && data.disableAuthentication != undefined) {
                this.disableAuthentication = data.disableAuthentication;
            }
            if ("disableCache" in data && data.disableCache != undefined) {
                this.disableCache = data.disableCache;
            }
            if ("pluginsPath" in data && data.pluginsPath != undefined) {
                this.pluginsPath = data.pluginsPath;
            }
        }
    }
    get host() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set host(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get port() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set port(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get jwtPrivateKey() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set jwtPrivateKey(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get jwtPublicKey() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set jwtPublicKey(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get disableAuthentication() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set disableAuthentication(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get disableCache() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set disableCache(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get pluginsPath() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set pluginsPath(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        host?: string;
        port?: number;
        jwtPrivateKey?: string;
        jwtPublicKey?: string;
        disableAuthentication?: boolean;
        disableCache?: boolean;
        pluginsPath?: string;
    }): AppConfig {
        const message = new AppConfig({});
        if (data.host != null) {
            message.host = data.host;
        }
        if (data.port != null) {
            message.port = data.port;
        }
        if (data.jwtPrivateKey != null) {
            message.jwtPrivateKey = data.jwtPrivateKey;
        }
        if (data.jwtPublicKey != null) {
            message.jwtPublicKey = data.jwtPublicKey;
        }
        if (data.disableAuthentication != null) {
            message.disableAuthentication = data.disableAuthentication;
        }
        if (data.disableCache != null) {
            message.disableCache = data.disableCache;
        }
        if (data.pluginsPath != null) {
            message.pluginsPath = data.pluginsPath;
        }
        return message;
    }
    toObject() {
        const data: {
            host?: string;
            port?: number;
            jwtPrivateKey?: string;
            jwtPublicKey?: string;
            disableAuthentication?: boolean;
            disableCache?: boolean;
            pluginsPath?: string;
        } = {};
        if (this.host != null) {
            data.host = this.host;
        }
        if (this.port != null) {
            data.port = this.port;
        }
        if (this.jwtPrivateKey != null) {
            data.jwtPrivateKey = this.jwtPrivateKey;
        }
        if (this.jwtPublicKey != null) {
            data.jwtPublicKey = this.jwtPublicKey;
        }
        if (this.disableAuthentication != null) {
            data.disableAuthentication = this.disableAuthentication;
        }
        if (this.disableCache != null) {
            data.disableCache = this.disableCache;
        }
        if (this.pluginsPath != null) {
            data.pluginsPath = this.pluginsPath;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.host.length)
            writer.writeString(1, this.host);
        if (this.port != 0)
            writer.writeInt32(2, this.port);
        if (this.jwtPrivateKey.length)
            writer.writeString(3, this.jwtPrivateKey);
        if (this.jwtPublicKey.length)
            writer.writeString(4, this.jwtPublicKey);
        if (this.disableAuthentication != false)
            writer.writeBool(5, this.disableAuthentication);
        if (this.disableCache != false)
            writer.writeBool(6, this.disableCache);
        if (this.pluginsPath.length)
            writer.writeString(7, this.pluginsPath);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppConfig {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppConfig();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.host = reader.readString();
                    break;
                case 2:
                    message.port = reader.readInt32();
                    break;
                case 3:
                    message.jwtPrivateKey = reader.readString();
                    break;
                case 4:
                    message.jwtPublicKey = reader.readString();
                    break;
                case 5:
                    message.disableAuthentication = reader.readBool();
                    break;
                case 6:
                    message.disableCache = reader.readBool();
                    break;
                case 7:
                    message.pluginsPath = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AppConfig {
        return AppConfig.deserialize(bytes);
    }
}
export class InitData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        config?: AppConfig;
        systemDataSource?: dependency_1.DataSource;
        systemNamespace?: dependency_5.Namespace;
        initDataSources?: dependency_1.DataSource[];
        initNamespaces?: dependency_5.Namespace[];
        initUsers?: dependency_2.User[];
        initResources?: dependency_3.Resource[];
        initRecords?: dependency_4.Record[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 6, 7, 8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("config" in data && data.config != undefined) {
                this.config = data.config;
            }
            if ("systemDataSource" in data && data.systemDataSource != undefined) {
                this.systemDataSource = data.systemDataSource;
            }
            if ("systemNamespace" in data && data.systemNamespace != undefined) {
                this.systemNamespace = data.systemNamespace;
            }
            if ("initDataSources" in data && data.initDataSources != undefined) {
                this.initDataSources = data.initDataSources;
            }
            if ("initNamespaces" in data && data.initNamespaces != undefined) {
                this.initNamespaces = data.initNamespaces;
            }
            if ("initUsers" in data && data.initUsers != undefined) {
                this.initUsers = data.initUsers;
            }
            if ("initResources" in data && data.initResources != undefined) {
                this.initResources = data.initResources;
            }
            if ("initRecords" in data && data.initRecords != undefined) {
                this.initRecords = data.initRecords;
            }
        }
    }
    get config() {
        return pb_1.Message.getWrapperField(this, AppConfig, 1) as AppConfig;
    }
    set config(value: AppConfig) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasConfig() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get systemDataSource() {
        return pb_1.Message.getWrapperField(this, dependency_1.DataSource, 2) as dependency_1.DataSource;
    }
    set systemDataSource(value: dependency_1.DataSource) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasSystemDataSource() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get systemNamespace() {
        return pb_1.Message.getWrapperField(this, dependency_5.Namespace, 3) as dependency_5.Namespace;
    }
    set systemNamespace(value: dependency_5.Namespace) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasSystemNamespace() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get initDataSources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.DataSource, 4) as dependency_1.DataSource[];
    }
    set initDataSources(value: dependency_1.DataSource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get initNamespaces() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_5.Namespace, 5) as dependency_5.Namespace[];
    }
    set initNamespaces(value: dependency_5.Namespace[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get initUsers() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.User, 6) as dependency_2.User[];
    }
    set initUsers(value: dependency_2.User[]) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get initResources() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Resource, 7) as dependency_3.Resource[];
    }
    set initResources(value: dependency_3.Resource[]) {
        pb_1.Message.setRepeatedWrapperField(this, 7, value);
    }
    get initRecords() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_4.Record, 8) as dependency_4.Record[];
    }
    set initRecords(value: dependency_4.Record[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    static fromObject(data: {
        config?: ReturnType<typeof AppConfig.prototype.toObject>;
        systemDataSource?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>;
        systemNamespace?: ReturnType<typeof dependency_5.Namespace.prototype.toObject>;
        initDataSources?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
        initNamespaces?: ReturnType<typeof dependency_5.Namespace.prototype.toObject>[];
        initUsers?: ReturnType<typeof dependency_2.User.prototype.toObject>[];
        initResources?: ReturnType<typeof dependency_3.Resource.prototype.toObject>[];
        initRecords?: ReturnType<typeof dependency_4.Record.prototype.toObject>[];
    }): InitData {
        const message = new InitData({});
        if (data.config != null) {
            message.config = AppConfig.fromObject(data.config);
        }
        if (data.systemDataSource != null) {
            message.systemDataSource = dependency_1.DataSource.fromObject(data.systemDataSource);
        }
        if (data.systemNamespace != null) {
            message.systemNamespace = dependency_5.Namespace.fromObject(data.systemNamespace);
        }
        if (data.initDataSources != null) {
            message.initDataSources = data.initDataSources.map(item => dependency_1.DataSource.fromObject(item));
        }
        if (data.initNamespaces != null) {
            message.initNamespaces = data.initNamespaces.map(item => dependency_5.Namespace.fromObject(item));
        }
        if (data.initUsers != null) {
            message.initUsers = data.initUsers.map(item => dependency_2.User.fromObject(item));
        }
        if (data.initResources != null) {
            message.initResources = data.initResources.map(item => dependency_3.Resource.fromObject(item));
        }
        if (data.initRecords != null) {
            message.initRecords = data.initRecords.map(item => dependency_4.Record.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            config?: ReturnType<typeof AppConfig.prototype.toObject>;
            systemDataSource?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>;
            systemNamespace?: ReturnType<typeof dependency_5.Namespace.prototype.toObject>;
            initDataSources?: ReturnType<typeof dependency_1.DataSource.prototype.toObject>[];
            initNamespaces?: ReturnType<typeof dependency_5.Namespace.prototype.toObject>[];
            initUsers?: ReturnType<typeof dependency_2.User.prototype.toObject>[];
            initResources?: ReturnType<typeof dependency_3.Resource.prototype.toObject>[];
            initRecords?: ReturnType<typeof dependency_4.Record.prototype.toObject>[];
        } = {};
        if (this.config != null) {
            data.config = this.config.toObject();
        }
        if (this.systemDataSource != null) {
            data.systemDataSource = this.systemDataSource.toObject();
        }
        if (this.systemNamespace != null) {
            data.systemNamespace = this.systemNamespace.toObject();
        }
        if (this.initDataSources != null) {
            data.initDataSources = this.initDataSources.map((item: dependency_1.DataSource) => item.toObject());
        }
        if (this.initNamespaces != null) {
            data.initNamespaces = this.initNamespaces.map((item: dependency_5.Namespace) => item.toObject());
        }
        if (this.initUsers != null) {
            data.initUsers = this.initUsers.map((item: dependency_2.User) => item.toObject());
        }
        if (this.initResources != null) {
            data.initResources = this.initResources.map((item: dependency_3.Resource) => item.toObject());
        }
        if (this.initRecords != null) {
            data.initRecords = this.initRecords.map((item: dependency_4.Record) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasConfig)
            writer.writeMessage(1, this.config, () => this.config.serialize(writer));
        if (this.hasSystemDataSource)
            writer.writeMessage(2, this.systemDataSource, () => this.systemDataSource.serialize(writer));
        if (this.hasSystemNamespace)
            writer.writeMessage(3, this.systemNamespace, () => this.systemNamespace.serialize(writer));
        if (this.initDataSources.length)
            writer.writeRepeatedMessage(4, this.initDataSources, (item: dependency_1.DataSource) => item.serialize(writer));
        if (this.initNamespaces.length)
            writer.writeRepeatedMessage(5, this.initNamespaces, (item: dependency_5.Namespace) => item.serialize(writer));
        if (this.initUsers.length)
            writer.writeRepeatedMessage(6, this.initUsers, (item: dependency_2.User) => item.serialize(writer));
        if (this.initResources.length)
            writer.writeRepeatedMessage(7, this.initResources, (item: dependency_3.Resource) => item.serialize(writer));
        if (this.initRecords.length)
            writer.writeRepeatedMessage(8, this.initRecords, (item: dependency_4.Record) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.config, () => message.config = AppConfig.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.systemDataSource, () => message.systemDataSource = dependency_1.DataSource.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.systemNamespace, () => message.systemNamespace = dependency_5.Namespace.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.initDataSources, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.DataSource.deserialize(reader), dependency_1.DataSource));
                    break;
                case 5:
                    reader.readMessage(message.initNamespaces, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_5.Namespace.deserialize(reader), dependency_5.Namespace));
                    break;
                case 6:
                    reader.readMessage(message.initUsers, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_2.User.deserialize(reader), dependency_2.User));
                    break;
                case 7:
                    reader.readMessage(message.initResources, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_3.Resource.deserialize(reader), dependency_3.Resource));
                    break;
                case 8:
                    reader.readMessage(message.initRecords, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_4.Record.deserialize(reader), dependency_4.Record));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InitData {
        return InitData.deserialize(bytes);
    }
}
