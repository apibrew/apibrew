/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: model/audit.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export class AuditData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        createdOn?: dependency_1.Timestamp;
        updatedOn?: dependency_1.Timestamp;
        createdBy?: string;
        updatedBy?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("createdOn" in data && data.createdOn != undefined) {
                this.createdOn = data.createdOn;
            }
            if ("updatedOn" in data && data.updatedOn != undefined) {
                this.updatedOn = data.updatedOn;
            }
            if ("createdBy" in data && data.createdBy != undefined) {
                this.createdBy = data.createdBy;
            }
            if ("updatedBy" in data && data.updatedBy != undefined) {
                this.updatedBy = data.updatedBy;
            }
        }
    }
    get createdOn() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 1) as dependency_1.Timestamp;
    }
    set createdOn(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasCreatedOn() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get updatedOn() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 2) as dependency_1.Timestamp;
    }
    set updatedOn(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasUpdatedOn() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get createdBy() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set createdBy(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get updatedBy() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set updatedBy(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        createdOn?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updatedOn?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        createdBy?: string;
        updatedBy?: string;
    }): AuditData {
        const message = new AuditData({});
        if (data.createdOn != null) {
            message.createdOn = dependency_1.Timestamp.fromObject(data.createdOn);
        }
        if (data.updatedOn != null) {
            message.updatedOn = dependency_1.Timestamp.fromObject(data.updatedOn);
        }
        if (data.createdBy != null) {
            message.createdBy = data.createdBy;
        }
        if (data.updatedBy != null) {
            message.updatedBy = data.updatedBy;
        }
        return message;
    }
    toObject() {
        const data: {
            createdOn?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updatedOn?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            createdBy?: string;
            updatedBy?: string;
        } = {};
        if (this.createdOn != null) {
            data.createdOn = this.createdOn.toObject();
        }
        if (this.updatedOn != null) {
            data.updatedOn = this.updatedOn.toObject();
        }
        if (this.createdBy != null) {
            data.createdBy = this.createdBy;
        }
        if (this.updatedBy != null) {
            data.updatedBy = this.updatedBy;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasCreatedOn)
            writer.writeMessage(1, this.createdOn, () => this.createdOn.serialize(writer));
        if (this.hasUpdatedOn)
            writer.writeMessage(2, this.updatedOn, () => this.updatedOn.serialize(writer));
        if (this.createdBy.length)
            writer.writeString(3, this.createdBy);
        if (this.updatedBy.length)
            writer.writeString(4, this.updatedBy);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuditData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuditData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.createdOn, () => message.createdOn = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.updatedOn, () => message.updatedOn = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 3:
                    message.createdBy = reader.readString();
                    break;
                case 4:
                    message.updatedBy = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AuditData {
        return AuditData.deserialize(bytes);
    }
}
