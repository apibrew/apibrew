/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: ext/function.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../model/record";
import * as dependency_2 from "./../model/resource";
import * as dependency_3 from "./../model/query";
import * as dependency_4 from "./../model/error";
import * as dependency_5 from "./../google/api/annotations";
import * as dependency_6 from "./../google/protobuf/any";
import * as dependency_7 from "./../google/protobuf/struct";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class FunctionCallRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        request?: Map<string, dependency_6.Any>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("request" in data && data.request != undefined) {
                this.request = data.request;
            }
        }
        if (!this.request)
            this.request = new Map();
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get request() {
        return pb_1.Message.getField(this, 2) as any as Map<string, dependency_6.Any>;
    }
    set request(value: Map<string, dependency_6.Any>) {
        pb_1.Message.setField(this, 2, value as any);
    }
    static fromObject(data: {
        name?: string;
        request?: {
            [key: string]: ReturnType<typeof dependency_6.Any.prototype.toObject>;
        };
    }): FunctionCallRequest {
        const message = new FunctionCallRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (typeof data.request == "object") {
            message.request = new Map(Object.entries(data.request).map(([key, value]) => [key, dependency_6.Any.fromObject(value)]));
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            request?: {
                [key: string]: ReturnType<typeof dependency_6.Any.prototype.toObject>;
            };
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.request != null) {
            data.request = (Object.fromEntries)((Array.from)(this.request).map(([key, value]) => [key, value.toObject()]));
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        for (const [key, value] of this.request) {
            writer.writeMessage(2, this.request, () => {
                writer.writeString(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FunctionCallRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FunctionCallRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.request as any, reader, reader.readString, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_6.Any.deserialize(reader));
                        return value;
                    }));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FunctionCallRequest {
        return FunctionCallRequest.deserialize(bytes);
    }
}
export class FunctionCallResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        response?: Map<string, dependency_6.Any>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("response" in data && data.response != undefined) {
                this.response = data.response;
            }
        }
        if (!this.response)
            this.response = new Map();
    }
    get response() {
        return pb_1.Message.getField(this, 1) as any as Map<string, dependency_6.Any>;
    }
    set response(value: Map<string, dependency_6.Any>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    static fromObject(data: {
        response?: {
            [key: string]: ReturnType<typeof dependency_6.Any.prototype.toObject>;
        };
    }): FunctionCallResponse {
        const message = new FunctionCallResponse({});
        if (typeof data.response == "object") {
            message.response = new Map(Object.entries(data.response).map(([key, value]) => [key, dependency_6.Any.fromObject(value)]));
        }
        return message;
    }
    toObject() {
        const data: {
            response?: {
                [key: string]: ReturnType<typeof dependency_6.Any.prototype.toObject>;
            };
        } = {};
        if (this.response != null) {
            data.response = (Object.fromEntries)((Array.from)(this.response).map(([key, value]) => [key, value.toObject()]));
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.response) {
            writer.writeMessage(1, this.response, () => {
                writer.writeString(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FunctionCallResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FunctionCallResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.response as any, reader, reader.readString, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_6.Any.deserialize(reader));
                        return value;
                    }));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FunctionCallResponse {
        return FunctionCallResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedFunctionService {
    static definition = {
        FunctionCall: {
            path: "/ext.Function/FunctionCall",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: FunctionCallRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => FunctionCallRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: FunctionCallResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => FunctionCallResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract FunctionCall(call: grpc_1.ServerUnaryCall<FunctionCallRequest, FunctionCallResponse>, callback: grpc_1.sendUnaryData<FunctionCallResponse>): void;
}
export class FunctionClient extends grpc_1.makeGenericClientConstructor(UnimplementedFunctionService.definition, "Function", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    FunctionCall: GrpcUnaryServiceInterface<FunctionCallRequest, FunctionCallResponse> = (message: FunctionCallRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<FunctionCallResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<FunctionCallResponse>, callback?: grpc_1.requestCallback<FunctionCallResponse>): grpc_1.ClientUnaryCall => {
        return super.FunctionCall(message, metadata, options, callback);
    };
}
