// source: model/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
goog.exportSymbol('proto.model.BooleanExpression', null, global);
goog.exportSymbol('proto.model.BooleanExpression.ExpressionCase', null, global);
goog.exportSymbol('proto.model.CompoundBooleanExpression', null, global);
goog.exportSymbol('proto.model.Expression', null, global);
goog.exportSymbol('proto.model.Expression.ExpressionCase', null, global);
goog.exportSymbol('proto.model.PairExpression', null, global);
goog.exportSymbol('proto.model.RefValue', null, global);
goog.exportSymbol('proto.model.RegexMatchExpression', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.CompoundBooleanExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.CompoundBooleanExpression.repeatedFields_, null);
};
goog.inherits(proto.model.CompoundBooleanExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.CompoundBooleanExpression.displayName = 'proto.model.CompoundBooleanExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.RefValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.RefValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.RefValue.displayName = 'proto.model.RefValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Expression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.model.Expression.oneofGroups_);
};
goog.inherits(proto.model.Expression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.Expression.displayName = 'proto.model.Expression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.PairExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.PairExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.PairExpression.displayName = 'proto.model.PairExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.RegexMatchExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.RegexMatchExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.RegexMatchExpression.displayName = 'proto.model.RegexMatchExpression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.BooleanExpression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.model.BooleanExpression.oneofGroups_);
};
goog.inherits(proto.model.BooleanExpression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.BooleanExpression.displayName = 'proto.model.BooleanExpression';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.CompoundBooleanExpression.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.CompoundBooleanExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.model.CompoundBooleanExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.CompoundBooleanExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.CompoundBooleanExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    expressionsList: jspb.Message.toObjectList(msg.getExpressionsList(),
    proto.model.BooleanExpression.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.CompoundBooleanExpression}
 */
proto.model.CompoundBooleanExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.CompoundBooleanExpression;
  return proto.model.CompoundBooleanExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.CompoundBooleanExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.CompoundBooleanExpression}
 */
proto.model.CompoundBooleanExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.BooleanExpression;
      reader.readMessage(value,proto.model.BooleanExpression.deserializeBinaryFromReader);
      msg.addExpressions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.CompoundBooleanExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.CompoundBooleanExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.CompoundBooleanExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.CompoundBooleanExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpressionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.BooleanExpression.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BooleanExpression expressions = 1;
 * @return {!Array<!proto.model.BooleanExpression>}
 */
proto.model.CompoundBooleanExpression.prototype.getExpressionsList = function() {
  return /** @type{!Array<!proto.model.BooleanExpression>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.BooleanExpression, 1));
};


/**
 * @param {!Array<!proto.model.BooleanExpression>} value
 * @return {!proto.model.CompoundBooleanExpression} returns this
*/
proto.model.CompoundBooleanExpression.prototype.setExpressionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.BooleanExpression=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.BooleanExpression}
 */
proto.model.CompoundBooleanExpression.prototype.addExpressions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.BooleanExpression, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.model.CompoundBooleanExpression} returns this
 */
proto.model.CompoundBooleanExpression.prototype.clearExpressionsList = function() {
  return this.setExpressionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.RefValue.prototype.toObject = function(opt_includeInstance) {
  return proto.model.RefValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.RefValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RefValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    resource: jspb.Message.getFieldWithDefault(msg, 2, ""),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, proto.google.protobuf.Value.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.RefValue}
 */
proto.model.RefValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.RefValue;
  return proto.model.RefValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.RefValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.RefValue}
 */
proto.model.RefValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResource(value);
      break;
    case 3:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.google.protobuf.Value.deserializeBinaryFromReader, "", new proto.google.protobuf.Value());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.RefValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.RefValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.RefValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RefValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.google.protobuf.Value.serializeBinaryToWriter);
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.model.RefValue.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.RefValue} returns this
 */
proto.model.RefValue.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string resource = 2;
 * @return {string}
 */
proto.model.RefValue.prototype.getResource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.RefValue} returns this
 */
proto.model.RefValue.prototype.setResource = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, google.protobuf.Value> properties = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.google.protobuf.Value>}
 */
proto.model.RefValue.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.google.protobuf.Value>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.google.protobuf.Value));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.model.RefValue} returns this
 */
proto.model.RefValue.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.model.Expression.oneofGroups_ = [[1,3,4]];

/**
 * @enum {number}
 */
proto.model.Expression.ExpressionCase = {
  EXPRESSION_NOT_SET: 0,
  PROPERTY: 1,
  VALUE: 3,
  REFVALUE: 4
};

/**
 * @return {proto.model.Expression.ExpressionCase}
 */
proto.model.Expression.prototype.getExpressionCase = function() {
  return /** @type {proto.model.Expression.ExpressionCase} */(jspb.Message.computeOneofCase(this, proto.model.Expression.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Expression.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Expression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Expression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Expression.toObject = function(includeInstance, msg) {
  var f, obj = {
    property: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && google_protobuf_struct_pb.Value.toObject(includeInstance, f),
    refvalue: (f = msg.getRefvalue()) && proto.model.RefValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Expression}
 */
proto.model.Expression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Expression;
  return proto.model.Expression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Expression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Expression}
 */
proto.model.Expression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProperty(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Value;
      reader.readMessage(value,google_protobuf_struct_pb.Value.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 4:
      var value = new proto.model.RefValue;
      reader.readMessage(value,proto.model.RefValue.deserializeBinaryFromReader);
      msg.setRefvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Expression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Expression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Expression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Expression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Value.serializeBinaryToWriter
    );
  }
  f = message.getRefvalue();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.model.RefValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string property = 1;
 * @return {string}
 */
proto.model.Expression.prototype.getProperty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.Expression} returns this
 */
proto.model.Expression.prototype.setProperty = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.model.Expression.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.model.Expression} returns this
 */
proto.model.Expression.prototype.clearProperty = function() {
  return jspb.Message.setOneofField(this, 1, proto.model.Expression.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Expression.prototype.hasProperty = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Value value = 3;
 * @return {?proto.google.protobuf.Value}
 */
proto.model.Expression.prototype.getValue = function() {
  return /** @type{?proto.google.protobuf.Value} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Value, 3));
};


/**
 * @param {?proto.google.protobuf.Value|undefined} value
 * @return {!proto.model.Expression} returns this
*/
proto.model.Expression.prototype.setValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.model.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.Expression} returns this
 */
proto.model.Expression.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Expression.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RefValue refValue = 4;
 * @return {?proto.model.RefValue}
 */
proto.model.Expression.prototype.getRefvalue = function() {
  return /** @type{?proto.model.RefValue} */ (
    jspb.Message.getWrapperField(this, proto.model.RefValue, 4));
};


/**
 * @param {?proto.model.RefValue|undefined} value
 * @return {!proto.model.Expression} returns this
*/
proto.model.Expression.prototype.setRefvalue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.model.Expression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.Expression} returns this
 */
proto.model.Expression.prototype.clearRefvalue = function() {
  return this.setRefvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Expression.prototype.hasRefvalue = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.PairExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.model.PairExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.PairExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PairExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    left: (f = msg.getLeft()) && proto.model.Expression.toObject(includeInstance, f),
    right: (f = msg.getRight()) && proto.model.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.PairExpression}
 */
proto.model.PairExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.PairExpression;
  return proto.model.PairExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.PairExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.PairExpression}
 */
proto.model.PairExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.Expression;
      reader.readMessage(value,proto.model.Expression.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 2:
      var value = new proto.model.Expression;
      reader.readMessage(value,proto.model.Expression.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.PairExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.PairExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.PairExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PairExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.Expression.serializeBinaryToWriter
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.model.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expression left = 1;
 * @return {?proto.model.Expression}
 */
proto.model.PairExpression.prototype.getLeft = function() {
  return /** @type{?proto.model.Expression} */ (
    jspb.Message.getWrapperField(this, proto.model.Expression, 1));
};


/**
 * @param {?proto.model.Expression|undefined} value
 * @return {!proto.model.PairExpression} returns this
*/
proto.model.PairExpression.prototype.setLeft = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.PairExpression} returns this
 */
proto.model.PairExpression.prototype.clearLeft = function() {
  return this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.PairExpression.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Expression right = 2;
 * @return {?proto.model.Expression}
 */
proto.model.PairExpression.prototype.getRight = function() {
  return /** @type{?proto.model.Expression} */ (
    jspb.Message.getWrapperField(this, proto.model.Expression, 2));
};


/**
 * @param {?proto.model.Expression|undefined} value
 * @return {!proto.model.PairExpression} returns this
*/
proto.model.PairExpression.prototype.setRight = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.PairExpression} returns this
 */
proto.model.PairExpression.prototype.clearRight = function() {
  return this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.PairExpression.prototype.hasRight = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.RegexMatchExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.model.RegexMatchExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.RegexMatchExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RegexMatchExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    pattern: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expression: (f = msg.getExpression()) && proto.model.Expression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.RegexMatchExpression}
 */
proto.model.RegexMatchExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.RegexMatchExpression;
  return proto.model.RegexMatchExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.RegexMatchExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.RegexMatchExpression}
 */
proto.model.RegexMatchExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    case 2:
      var value = new proto.model.Expression;
      reader.readMessage(value,proto.model.Expression.deserializeBinaryFromReader);
      msg.setExpression(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.RegexMatchExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.RegexMatchExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.RegexMatchExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RegexMatchExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPattern();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpression();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.model.Expression.serializeBinaryToWriter
    );
  }
};


/**
 * optional string pattern = 1;
 * @return {string}
 */
proto.model.RegexMatchExpression.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.RegexMatchExpression} returns this
 */
proto.model.RegexMatchExpression.prototype.setPattern = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Expression expression = 2;
 * @return {?proto.model.Expression}
 */
proto.model.RegexMatchExpression.prototype.getExpression = function() {
  return /** @type{?proto.model.Expression} */ (
    jspb.Message.getWrapperField(this, proto.model.Expression, 2));
};


/**
 * @param {?proto.model.Expression|undefined} value
 * @return {!proto.model.RegexMatchExpression} returns this
*/
proto.model.RegexMatchExpression.prototype.setExpression = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.RegexMatchExpression} returns this
 */
proto.model.RegexMatchExpression.prototype.clearExpression = function() {
  return this.setExpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.RegexMatchExpression.prototype.hasExpression = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.model.BooleanExpression.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.model.BooleanExpression.ExpressionCase = {
  EXPRESSION_NOT_SET: 0,
  AND: 1,
  OR: 2,
  NOT: 3,
  EQUAL: 4,
  LESSTHAN: 5,
  GREATERTHAN: 6,
  LESSTHANOREQUAL: 7,
  GREATERTHANOREQUAL: 8,
  IN: 9,
  ISNULL: 10,
  REGEXMATCH: 11
};

/**
 * @return {proto.model.BooleanExpression.ExpressionCase}
 */
proto.model.BooleanExpression.prototype.getExpressionCase = function() {
  return /** @type {proto.model.BooleanExpression.ExpressionCase} */(jspb.Message.computeOneofCase(this, proto.model.BooleanExpression.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.BooleanExpression.prototype.toObject = function(opt_includeInstance) {
  return proto.model.BooleanExpression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.BooleanExpression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.BooleanExpression.toObject = function(includeInstance, msg) {
  var f, obj = {
    and: (f = msg.getAnd()) && proto.model.CompoundBooleanExpression.toObject(includeInstance, f),
    or: (f = msg.getOr()) && proto.model.CompoundBooleanExpression.toObject(includeInstance, f),
    not: (f = msg.getNot()) && proto.model.BooleanExpression.toObject(includeInstance, f),
    equal: (f = msg.getEqual()) && proto.model.PairExpression.toObject(includeInstance, f),
    lessthan: (f = msg.getLessthan()) && proto.model.PairExpression.toObject(includeInstance, f),
    greaterthan: (f = msg.getGreaterthan()) && proto.model.PairExpression.toObject(includeInstance, f),
    lessthanorequal: (f = msg.getLessthanorequal()) && proto.model.PairExpression.toObject(includeInstance, f),
    greaterthanorequal: (f = msg.getGreaterthanorequal()) && proto.model.PairExpression.toObject(includeInstance, f),
    pb_in: (f = msg.getIn()) && proto.model.PairExpression.toObject(includeInstance, f),
    isnull: (f = msg.getIsnull()) && proto.model.Expression.toObject(includeInstance, f),
    regexmatch: (f = msg.getRegexmatch()) && proto.model.RegexMatchExpression.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.BooleanExpression}
 */
proto.model.BooleanExpression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.BooleanExpression;
  return proto.model.BooleanExpression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.BooleanExpression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.BooleanExpression}
 */
proto.model.BooleanExpression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.CompoundBooleanExpression;
      reader.readMessage(value,proto.model.CompoundBooleanExpression.deserializeBinaryFromReader);
      msg.setAnd(value);
      break;
    case 2:
      var value = new proto.model.CompoundBooleanExpression;
      reader.readMessage(value,proto.model.CompoundBooleanExpression.deserializeBinaryFromReader);
      msg.setOr(value);
      break;
    case 3:
      var value = new proto.model.BooleanExpression;
      reader.readMessage(value,proto.model.BooleanExpression.deserializeBinaryFromReader);
      msg.setNot(value);
      break;
    case 4:
      var value = new proto.model.PairExpression;
      reader.readMessage(value,proto.model.PairExpression.deserializeBinaryFromReader);
      msg.setEqual(value);
      break;
    case 5:
      var value = new proto.model.PairExpression;
      reader.readMessage(value,proto.model.PairExpression.deserializeBinaryFromReader);
      msg.setLessthan(value);
      break;
    case 6:
      var value = new proto.model.PairExpression;
      reader.readMessage(value,proto.model.PairExpression.deserializeBinaryFromReader);
      msg.setGreaterthan(value);
      break;
    case 7:
      var value = new proto.model.PairExpression;
      reader.readMessage(value,proto.model.PairExpression.deserializeBinaryFromReader);
      msg.setLessthanorequal(value);
      break;
    case 8:
      var value = new proto.model.PairExpression;
      reader.readMessage(value,proto.model.PairExpression.deserializeBinaryFromReader);
      msg.setGreaterthanorequal(value);
      break;
    case 9:
      var value = new proto.model.PairExpression;
      reader.readMessage(value,proto.model.PairExpression.deserializeBinaryFromReader);
      msg.setIn(value);
      break;
    case 10:
      var value = new proto.model.Expression;
      reader.readMessage(value,proto.model.Expression.deserializeBinaryFromReader);
      msg.setIsnull(value);
      break;
    case 11:
      var value = new proto.model.RegexMatchExpression;
      reader.readMessage(value,proto.model.RegexMatchExpression.deserializeBinaryFromReader);
      msg.setRegexmatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.BooleanExpression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.BooleanExpression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.BooleanExpression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.BooleanExpression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnd();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.CompoundBooleanExpression.serializeBinaryToWriter
    );
  }
  f = message.getOr();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.model.CompoundBooleanExpression.serializeBinaryToWriter
    );
  }
  f = message.getNot();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.model.BooleanExpression.serializeBinaryToWriter
    );
  }
  f = message.getEqual();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.model.PairExpression.serializeBinaryToWriter
    );
  }
  f = message.getLessthan();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.model.PairExpression.serializeBinaryToWriter
    );
  }
  f = message.getGreaterthan();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.model.PairExpression.serializeBinaryToWriter
    );
  }
  f = message.getLessthanorequal();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.model.PairExpression.serializeBinaryToWriter
    );
  }
  f = message.getGreaterthanorequal();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.model.PairExpression.serializeBinaryToWriter
    );
  }
  f = message.getIn();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.model.PairExpression.serializeBinaryToWriter
    );
  }
  f = message.getIsnull();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.model.Expression.serializeBinaryToWriter
    );
  }
  f = message.getRegexmatch();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.model.RegexMatchExpression.serializeBinaryToWriter
    );
  }
};


/**
 * optional CompoundBooleanExpression and = 1;
 * @return {?proto.model.CompoundBooleanExpression}
 */
proto.model.BooleanExpression.prototype.getAnd = function() {
  return /** @type{?proto.model.CompoundBooleanExpression} */ (
    jspb.Message.getWrapperField(this, proto.model.CompoundBooleanExpression, 1));
};


/**
 * @param {?proto.model.CompoundBooleanExpression|undefined} value
 * @return {!proto.model.BooleanExpression} returns this
*/
proto.model.BooleanExpression.prototype.setAnd = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.model.BooleanExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.BooleanExpression} returns this
 */
proto.model.BooleanExpression.prototype.clearAnd = function() {
  return this.setAnd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BooleanExpression.prototype.hasAnd = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CompoundBooleanExpression or = 2;
 * @return {?proto.model.CompoundBooleanExpression}
 */
proto.model.BooleanExpression.prototype.getOr = function() {
  return /** @type{?proto.model.CompoundBooleanExpression} */ (
    jspb.Message.getWrapperField(this, proto.model.CompoundBooleanExpression, 2));
};


/**
 * @param {?proto.model.CompoundBooleanExpression|undefined} value
 * @return {!proto.model.BooleanExpression} returns this
*/
proto.model.BooleanExpression.prototype.setOr = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.model.BooleanExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.BooleanExpression} returns this
 */
proto.model.BooleanExpression.prototype.clearOr = function() {
  return this.setOr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BooleanExpression.prototype.hasOr = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BooleanExpression not = 3;
 * @return {?proto.model.BooleanExpression}
 */
proto.model.BooleanExpression.prototype.getNot = function() {
  return /** @type{?proto.model.BooleanExpression} */ (
    jspb.Message.getWrapperField(this, proto.model.BooleanExpression, 3));
};


/**
 * @param {?proto.model.BooleanExpression|undefined} value
 * @return {!proto.model.BooleanExpression} returns this
*/
proto.model.BooleanExpression.prototype.setNot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.model.BooleanExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.BooleanExpression} returns this
 */
proto.model.BooleanExpression.prototype.clearNot = function() {
  return this.setNot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BooleanExpression.prototype.hasNot = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PairExpression equal = 4;
 * @return {?proto.model.PairExpression}
 */
proto.model.BooleanExpression.prototype.getEqual = function() {
  return /** @type{?proto.model.PairExpression} */ (
    jspb.Message.getWrapperField(this, proto.model.PairExpression, 4));
};


/**
 * @param {?proto.model.PairExpression|undefined} value
 * @return {!proto.model.BooleanExpression} returns this
*/
proto.model.BooleanExpression.prototype.setEqual = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.model.BooleanExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.BooleanExpression} returns this
 */
proto.model.BooleanExpression.prototype.clearEqual = function() {
  return this.setEqual(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BooleanExpression.prototype.hasEqual = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PairExpression lessThan = 5;
 * @return {?proto.model.PairExpression}
 */
proto.model.BooleanExpression.prototype.getLessthan = function() {
  return /** @type{?proto.model.PairExpression} */ (
    jspb.Message.getWrapperField(this, proto.model.PairExpression, 5));
};


/**
 * @param {?proto.model.PairExpression|undefined} value
 * @return {!proto.model.BooleanExpression} returns this
*/
proto.model.BooleanExpression.prototype.setLessthan = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.model.BooleanExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.BooleanExpression} returns this
 */
proto.model.BooleanExpression.prototype.clearLessthan = function() {
  return this.setLessthan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BooleanExpression.prototype.hasLessthan = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional PairExpression greaterThan = 6;
 * @return {?proto.model.PairExpression}
 */
proto.model.BooleanExpression.prototype.getGreaterthan = function() {
  return /** @type{?proto.model.PairExpression} */ (
    jspb.Message.getWrapperField(this, proto.model.PairExpression, 6));
};


/**
 * @param {?proto.model.PairExpression|undefined} value
 * @return {!proto.model.BooleanExpression} returns this
*/
proto.model.BooleanExpression.prototype.setGreaterthan = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.model.BooleanExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.BooleanExpression} returns this
 */
proto.model.BooleanExpression.prototype.clearGreaterthan = function() {
  return this.setGreaterthan(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BooleanExpression.prototype.hasGreaterthan = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PairExpression lessThanOrEqual = 7;
 * @return {?proto.model.PairExpression}
 */
proto.model.BooleanExpression.prototype.getLessthanorequal = function() {
  return /** @type{?proto.model.PairExpression} */ (
    jspb.Message.getWrapperField(this, proto.model.PairExpression, 7));
};


/**
 * @param {?proto.model.PairExpression|undefined} value
 * @return {!proto.model.BooleanExpression} returns this
*/
proto.model.BooleanExpression.prototype.setLessthanorequal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.model.BooleanExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.BooleanExpression} returns this
 */
proto.model.BooleanExpression.prototype.clearLessthanorequal = function() {
  return this.setLessthanorequal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BooleanExpression.prototype.hasLessthanorequal = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PairExpression greaterThanOrEqual = 8;
 * @return {?proto.model.PairExpression}
 */
proto.model.BooleanExpression.prototype.getGreaterthanorequal = function() {
  return /** @type{?proto.model.PairExpression} */ (
    jspb.Message.getWrapperField(this, proto.model.PairExpression, 8));
};


/**
 * @param {?proto.model.PairExpression|undefined} value
 * @return {!proto.model.BooleanExpression} returns this
*/
proto.model.BooleanExpression.prototype.setGreaterthanorequal = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.model.BooleanExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.BooleanExpression} returns this
 */
proto.model.BooleanExpression.prototype.clearGreaterthanorequal = function() {
  return this.setGreaterthanorequal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BooleanExpression.prototype.hasGreaterthanorequal = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PairExpression in = 9;
 * @return {?proto.model.PairExpression}
 */
proto.model.BooleanExpression.prototype.getIn = function() {
  return /** @type{?proto.model.PairExpression} */ (
    jspb.Message.getWrapperField(this, proto.model.PairExpression, 9));
};


/**
 * @param {?proto.model.PairExpression|undefined} value
 * @return {!proto.model.BooleanExpression} returns this
*/
proto.model.BooleanExpression.prototype.setIn = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.model.BooleanExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.BooleanExpression} returns this
 */
proto.model.BooleanExpression.prototype.clearIn = function() {
  return this.setIn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BooleanExpression.prototype.hasIn = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Expression isNull = 10;
 * @return {?proto.model.Expression}
 */
proto.model.BooleanExpression.prototype.getIsnull = function() {
  return /** @type{?proto.model.Expression} */ (
    jspb.Message.getWrapperField(this, proto.model.Expression, 10));
};


/**
 * @param {?proto.model.Expression|undefined} value
 * @return {!proto.model.BooleanExpression} returns this
*/
proto.model.BooleanExpression.prototype.setIsnull = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.model.BooleanExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.BooleanExpression} returns this
 */
proto.model.BooleanExpression.prototype.clearIsnull = function() {
  return this.setIsnull(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BooleanExpression.prototype.hasIsnull = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional RegexMatchExpression regexMatch = 11;
 * @return {?proto.model.RegexMatchExpression}
 */
proto.model.BooleanExpression.prototype.getRegexmatch = function() {
  return /** @type{?proto.model.RegexMatchExpression} */ (
    jspb.Message.getWrapperField(this, proto.model.RegexMatchExpression, 11));
};


/**
 * @param {?proto.model.RegexMatchExpression|undefined} value
 * @return {!proto.model.BooleanExpression} returns this
*/
proto.model.BooleanExpression.prototype.setRegexmatch = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.model.BooleanExpression.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.BooleanExpression} returns this
 */
proto.model.BooleanExpression.prototype.clearRegexmatch = function() {
  return this.setRegexmatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BooleanExpression.prototype.hasRegexmatch = function() {
  return jspb.Message.getField(this, 11) != null;
};


goog.object.extend(exports, proto.model);
