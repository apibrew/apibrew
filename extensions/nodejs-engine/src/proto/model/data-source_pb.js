// source: model/data-source.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var model_audit_pb = require('../model/audit_pb.js');
goog.object.extend(proto, model_audit_pb);
var model_common_pb = require('../model/common_pb.js');
goog.object.extend(proto, model_common_pb);
var model_annotations_pb = require('../model/annotations_pb.js');
goog.object.extend(proto, model_annotations_pb);
goog.exportSymbol('proto.model.DataSource', null, global);
goog.exportSymbol('proto.model.DataSource.ParamsCase', null, global);
goog.exportSymbol('proto.model.DataSourceBackendType', null, global);
goog.exportSymbol('proto.model.DataSourceCatalog', null, global);
goog.exportSymbol('proto.model.DataSourceEntity', null, global);
goog.exportSymbol('proto.model.MongoParams', null, global);
goog.exportSymbol('proto.model.MysqlParams', null, global);
goog.exportSymbol('proto.model.PostgresqlParams', null, global);
goog.exportSymbol('proto.model.RedisParams', null, global);
goog.exportSymbol('proto.model.VirtualParams', null, global);
goog.exportSymbol('proto.model.VirtualParams.Mode', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.PostgresqlParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.PostgresqlParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.PostgresqlParams.displayName = 'proto.model.PostgresqlParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.MysqlParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.MysqlParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.MysqlParams.displayName = 'proto.model.MysqlParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.RedisParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.RedisParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.RedisParams.displayName = 'proto.model.RedisParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.MongoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.MongoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.MongoParams.displayName = 'proto.model.MongoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.VirtualParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.VirtualParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.VirtualParams.displayName = 'proto.model.VirtualParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.DataSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.model.DataSource.oneofGroups_);
};
goog.inherits(proto.model.DataSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.DataSource.displayName = 'proto.model.DataSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.DataSourceEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.DataSourceEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.DataSourceEntity.displayName = 'proto.model.DataSourceEntity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.DataSourceCatalog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.DataSourceCatalog.repeatedFields_, null);
};
goog.inherits(proto.model.DataSourceCatalog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.DataSourceCatalog.displayName = 'proto.model.DataSourceCatalog';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.PostgresqlParams.prototype.toObject = function(opt_includeInstance) {
  return proto.model.PostgresqlParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.PostgresqlParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PostgresqlParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    host: jspb.Message.getFieldWithDefault(msg, 3, ""),
    port: jspb.Message.getFieldWithDefault(msg, 4, 0),
    dbname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    defaultschema: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.PostgresqlParams}
 */
proto.model.PostgresqlParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.PostgresqlParams;
  return proto.model.PostgresqlParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.PostgresqlParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.PostgresqlParams}
 */
proto.model.PostgresqlParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultschema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.PostgresqlParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.PostgresqlParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.PostgresqlParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PostgresqlParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDefaultschema();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.model.PostgresqlParams.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.PostgresqlParams} returns this
 */
proto.model.PostgresqlParams.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.model.PostgresqlParams.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.PostgresqlParams} returns this
 */
proto.model.PostgresqlParams.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string host = 3;
 * @return {string}
 */
proto.model.PostgresqlParams.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.PostgresqlParams} returns this
 */
proto.model.PostgresqlParams.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 port = 4;
 * @return {number}
 */
proto.model.PostgresqlParams.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.PostgresqlParams} returns this
 */
proto.model.PostgresqlParams.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string dbName = 5;
 * @return {string}
 */
proto.model.PostgresqlParams.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.PostgresqlParams} returns this
 */
proto.model.PostgresqlParams.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string defaultSchema = 6;
 * @return {string}
 */
proto.model.PostgresqlParams.prototype.getDefaultschema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.PostgresqlParams} returns this
 */
proto.model.PostgresqlParams.prototype.setDefaultschema = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.MysqlParams.prototype.toObject = function(opt_includeInstance) {
  return proto.model.MysqlParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.MysqlParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MysqlParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    host: jspb.Message.getFieldWithDefault(msg, 3, ""),
    port: jspb.Message.getFieldWithDefault(msg, 4, 0),
    dbname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    defaultschema: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.MysqlParams}
 */
proto.model.MysqlParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.MysqlParams;
  return proto.model.MysqlParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.MysqlParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.MysqlParams}
 */
proto.model.MysqlParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultschema(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.MysqlParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.MysqlParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.MysqlParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MysqlParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDefaultschema();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.model.MysqlParams.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.MysqlParams} returns this
 */
proto.model.MysqlParams.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.model.MysqlParams.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.MysqlParams} returns this
 */
proto.model.MysqlParams.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string host = 3;
 * @return {string}
 */
proto.model.MysqlParams.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.MysqlParams} returns this
 */
proto.model.MysqlParams.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 port = 4;
 * @return {number}
 */
proto.model.MysqlParams.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.MysqlParams} returns this
 */
proto.model.MysqlParams.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string dbName = 5;
 * @return {string}
 */
proto.model.MysqlParams.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.MysqlParams} returns this
 */
proto.model.MysqlParams.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string defaultSchema = 6;
 * @return {string}
 */
proto.model.MysqlParams.prototype.getDefaultschema = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.MysqlParams} returns this
 */
proto.model.MysqlParams.prototype.setDefaultschema = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.RedisParams.prototype.toObject = function(opt_includeInstance) {
  return proto.model.RedisParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.RedisParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RedisParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, ""),
    db: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.RedisParams}
 */
proto.model.RedisParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.RedisParams;
  return proto.model.RedisParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.RedisParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.RedisParams}
 */
proto.model.RedisParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.RedisParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.RedisParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.RedisParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RedisParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDb();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string addr = 1;
 * @return {string}
 */
proto.model.RedisParams.prototype.getAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.RedisParams} returns this
 */
proto.model.RedisParams.prototype.setAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.model.RedisParams.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.RedisParams} returns this
 */
proto.model.RedisParams.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 db = 3;
 * @return {number}
 */
proto.model.RedisParams.prototype.getDb = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.RedisParams} returns this
 */
proto.model.RedisParams.prototype.setDb = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.MongoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.model.MongoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.MongoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MongoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    uri: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dbname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.MongoParams}
 */
proto.model.MongoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.MongoParams;
  return proto.model.MongoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.MongoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.MongoParams}
 */
proto.model.MongoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDbname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.MongoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.MongoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.MongoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MongoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDbname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string uri = 1;
 * @return {string}
 */
proto.model.MongoParams.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.MongoParams} returns this
 */
proto.model.MongoParams.prototype.setUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dbName = 2;
 * @return {string}
 */
proto.model.MongoParams.prototype.getDbname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.MongoParams} returns this
 */
proto.model.MongoParams.prototype.setDbname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.VirtualParams.prototype.toObject = function(opt_includeInstance) {
  return proto.model.VirtualParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.VirtualParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.VirtualParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.VirtualParams}
 */
proto.model.VirtualParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.VirtualParams;
  return proto.model.VirtualParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.VirtualParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.VirtualParams}
 */
proto.model.VirtualParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.model.VirtualParams.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.VirtualParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.VirtualParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.VirtualParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.VirtualParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.model.VirtualParams.Mode = {
  DISCARD: 0,
  ERROR: 1
};

/**
 * optional Mode mode = 1;
 * @return {!proto.model.VirtualParams.Mode}
 */
proto.model.VirtualParams.prototype.getMode = function() {
  return /** @type {!proto.model.VirtualParams.Mode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.model.VirtualParams.Mode} value
 * @return {!proto.model.VirtualParams} returns this
 */
proto.model.VirtualParams.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.model.DataSource.oneofGroups_ = [[7,8,9,10,11]];

/**
 * @enum {number}
 */
proto.model.DataSource.ParamsCase = {
  PARAMS_NOT_SET: 0,
  POSTGRESQLPARAMS: 7,
  MYSQLPARAMS: 8,
  VIRTUALPARAMS: 9,
  REDISPARAMS: 10,
  MONGOPARAMS: 11
};

/**
 * @return {proto.model.DataSource.ParamsCase}
 */
proto.model.DataSource.prototype.getParamsCase = function() {
  return /** @type {proto.model.DataSource.ParamsCase} */(jspb.Message.computeOneofCase(this, proto.model.DataSource.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.DataSource.prototype.toObject = function(opt_includeInstance) {
  return proto.model.DataSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.DataSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.DataSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    backend: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    description: jspb.Message.getFieldWithDefault(msg, 6, ""),
    postgresqlparams: (f = msg.getPostgresqlparams()) && proto.model.PostgresqlParams.toObject(includeInstance, f),
    mysqlparams: (f = msg.getMysqlparams()) && proto.model.MysqlParams.toObject(includeInstance, f),
    virtualparams: (f = msg.getVirtualparams()) && proto.model.VirtualParams.toObject(includeInstance, f),
    redisparams: (f = msg.getRedisparams()) && proto.model.RedisParams.toObject(includeInstance, f),
    mongoparams: (f = msg.getMongoparams()) && proto.model.MongoParams.toObject(includeInstance, f),
    auditdata: (f = msg.getAuditdata()) && model_audit_pb.AuditData.toObject(includeInstance, f),
    version: jspb.Message.getFieldWithDefault(msg, 102, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.DataSource}
 */
proto.model.DataSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.DataSource;
  return proto.model.DataSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.DataSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.DataSource}
 */
proto.model.DataSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.model.DataSourceBackendType} */ (reader.readEnum());
      msg.setBackend(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 7:
      var value = new proto.model.PostgresqlParams;
      reader.readMessage(value,proto.model.PostgresqlParams.deserializeBinaryFromReader);
      msg.setPostgresqlparams(value);
      break;
    case 8:
      var value = new proto.model.MysqlParams;
      reader.readMessage(value,proto.model.MysqlParams.deserializeBinaryFromReader);
      msg.setMysqlparams(value);
      break;
    case 9:
      var value = new proto.model.VirtualParams;
      reader.readMessage(value,proto.model.VirtualParams.deserializeBinaryFromReader);
      msg.setVirtualparams(value);
      break;
    case 10:
      var value = new proto.model.RedisParams;
      reader.readMessage(value,proto.model.RedisParams.deserializeBinaryFromReader);
      msg.setRedisparams(value);
      break;
    case 11:
      var value = new proto.model.MongoParams;
      reader.readMessage(value,proto.model.MongoParams.deserializeBinaryFromReader);
      msg.setMongoparams(value);
      break;
    case 101:
      var value = new model_audit_pb.AuditData;
      reader.readMessage(value,model_audit_pb.AuditData.deserializeBinaryFromReader);
      msg.setAuditdata(value);
      break;
    case 102:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.DataSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.DataSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.DataSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.DataSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBackend();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPostgresqlparams();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.model.PostgresqlParams.serializeBinaryToWriter
    );
  }
  f = message.getMysqlparams();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.model.MysqlParams.serializeBinaryToWriter
    );
  }
  f = message.getVirtualparams();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.model.VirtualParams.serializeBinaryToWriter
    );
  }
  f = message.getRedisparams();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.model.RedisParams.serializeBinaryToWriter
    );
  }
  f = message.getMongoparams();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.model.MongoParams.serializeBinaryToWriter
    );
  }
  f = message.getAuditdata();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      model_audit_pb.AuditData.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      102,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.model.DataSource.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.DataSource} returns this
 */
proto.model.DataSource.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional DataSourceBackendType backend = 2;
 * @return {!proto.model.DataSourceBackendType}
 */
proto.model.DataSource.prototype.getBackend = function() {
  return /** @type {!proto.model.DataSourceBackendType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.model.DataSourceBackendType} value
 * @return {!proto.model.DataSource} returns this
 */
proto.model.DataSource.prototype.setBackend = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.model.DataSource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.DataSource} returns this
 */
proto.model.DataSource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string description = 6;
 * @return {string}
 */
proto.model.DataSource.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.DataSource} returns this
 */
proto.model.DataSource.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional PostgresqlParams postgresqlParams = 7;
 * @return {?proto.model.PostgresqlParams}
 */
proto.model.DataSource.prototype.getPostgresqlparams = function() {
  return /** @type{?proto.model.PostgresqlParams} */ (
    jspb.Message.getWrapperField(this, proto.model.PostgresqlParams, 7));
};


/**
 * @param {?proto.model.PostgresqlParams|undefined} value
 * @return {!proto.model.DataSource} returns this
*/
proto.model.DataSource.prototype.setPostgresqlparams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.model.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.DataSource} returns this
 */
proto.model.DataSource.prototype.clearPostgresqlparams = function() {
  return this.setPostgresqlparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.DataSource.prototype.hasPostgresqlparams = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional MysqlParams mysqlParams = 8;
 * @return {?proto.model.MysqlParams}
 */
proto.model.DataSource.prototype.getMysqlparams = function() {
  return /** @type{?proto.model.MysqlParams} */ (
    jspb.Message.getWrapperField(this, proto.model.MysqlParams, 8));
};


/**
 * @param {?proto.model.MysqlParams|undefined} value
 * @return {!proto.model.DataSource} returns this
*/
proto.model.DataSource.prototype.setMysqlparams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.model.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.DataSource} returns this
 */
proto.model.DataSource.prototype.clearMysqlparams = function() {
  return this.setMysqlparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.DataSource.prototype.hasMysqlparams = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional VirtualParams virtualParams = 9;
 * @return {?proto.model.VirtualParams}
 */
proto.model.DataSource.prototype.getVirtualparams = function() {
  return /** @type{?proto.model.VirtualParams} */ (
    jspb.Message.getWrapperField(this, proto.model.VirtualParams, 9));
};


/**
 * @param {?proto.model.VirtualParams|undefined} value
 * @return {!proto.model.DataSource} returns this
*/
proto.model.DataSource.prototype.setVirtualparams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.model.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.DataSource} returns this
 */
proto.model.DataSource.prototype.clearVirtualparams = function() {
  return this.setVirtualparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.DataSource.prototype.hasVirtualparams = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional RedisParams redisParams = 10;
 * @return {?proto.model.RedisParams}
 */
proto.model.DataSource.prototype.getRedisparams = function() {
  return /** @type{?proto.model.RedisParams} */ (
    jspb.Message.getWrapperField(this, proto.model.RedisParams, 10));
};


/**
 * @param {?proto.model.RedisParams|undefined} value
 * @return {!proto.model.DataSource} returns this
*/
proto.model.DataSource.prototype.setRedisparams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.model.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.DataSource} returns this
 */
proto.model.DataSource.prototype.clearRedisparams = function() {
  return this.setRedisparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.DataSource.prototype.hasRedisparams = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional MongoParams mongoParams = 11;
 * @return {?proto.model.MongoParams}
 */
proto.model.DataSource.prototype.getMongoparams = function() {
  return /** @type{?proto.model.MongoParams} */ (
    jspb.Message.getWrapperField(this, proto.model.MongoParams, 11));
};


/**
 * @param {?proto.model.MongoParams|undefined} value
 * @return {!proto.model.DataSource} returns this
*/
proto.model.DataSource.prototype.setMongoparams = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.model.DataSource.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.DataSource} returns this
 */
proto.model.DataSource.prototype.clearMongoparams = function() {
  return this.setMongoparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.DataSource.prototype.hasMongoparams = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional AuditData auditData = 101;
 * @return {?proto.model.AuditData}
 */
proto.model.DataSource.prototype.getAuditdata = function() {
  return /** @type{?proto.model.AuditData} */ (
    jspb.Message.getWrapperField(this, model_audit_pb.AuditData, 101));
};


/**
 * @param {?proto.model.AuditData|undefined} value
 * @return {!proto.model.DataSource} returns this
*/
proto.model.DataSource.prototype.setAuditdata = function(value) {
  return jspb.Message.setWrapperField(this, 101, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.DataSource} returns this
 */
proto.model.DataSource.prototype.clearAuditdata = function() {
  return this.setAuditdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.DataSource.prototype.hasAuditdata = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional uint32 version = 102;
 * @return {number}
 */
proto.model.DataSource.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 102, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.DataSource} returns this
 */
proto.model.DataSource.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 102, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.DataSourceEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.model.DataSourceEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.DataSourceEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.DataSourceEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    readonly: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.DataSourceEntity}
 */
proto.model.DataSourceEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.DataSourceEntity;
  return proto.model.DataSourceEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.DataSourceEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.DataSourceEntity}
 */
proto.model.DataSourceEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.DataSourceEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.DataSourceEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.DataSourceEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.DataSourceEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReadonly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.model.DataSourceEntity.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.DataSourceEntity} returns this
 */
proto.model.DataSourceEntity.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool readOnly = 2;
 * @return {boolean}
 */
proto.model.DataSourceEntity.prototype.getReadonly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.model.DataSourceEntity} returns this
 */
proto.model.DataSourceEntity.prototype.setReadonly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.DataSourceCatalog.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.DataSourceCatalog.prototype.toObject = function(opt_includeInstance) {
  return proto.model.DataSourceCatalog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.DataSourceCatalog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.DataSourceCatalog.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.model.DataSourceEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.DataSourceCatalog}
 */
proto.model.DataSourceCatalog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.DataSourceCatalog;
  return proto.model.DataSourceCatalog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.DataSourceCatalog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.DataSourceCatalog}
 */
proto.model.DataSourceCatalog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.model.DataSourceEntity;
      reader.readMessage(value,proto.model.DataSourceEntity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.DataSourceCatalog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.DataSourceCatalog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.DataSourceCatalog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.DataSourceCatalog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.model.DataSourceEntity.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.model.DataSourceCatalog.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.DataSourceCatalog} returns this
 */
proto.model.DataSourceCatalog.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated DataSourceEntity entities = 2;
 * @return {!Array<!proto.model.DataSourceEntity>}
 */
proto.model.DataSourceCatalog.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.model.DataSourceEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.DataSourceEntity, 2));
};


/**
 * @param {!Array<!proto.model.DataSourceEntity>} value
 * @return {!proto.model.DataSourceCatalog} returns this
*/
proto.model.DataSourceCatalog.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.DataSourceEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.DataSourceEntity}
 */
proto.model.DataSourceCatalog.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.DataSourceEntity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.model.DataSourceCatalog} returns this
 */
proto.model.DataSourceCatalog.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * @enum {number}
 */
proto.model.DataSourceBackendType = {
  POSTGRESQL: 0,
  VIRTUAL: 1,
  MYSQL: 2,
  ORACLE: 3,
  MONGODB: 4,
  REDIS: 5
};

goog.object.extend(exports, proto.model);
