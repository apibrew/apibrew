// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file ext/function.proto (package ext, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Event } from "../model/event_pb";

/**
 * @generated from message ext.FunctionCallRequest
 */
export class FunctionCallRequest extends Message<FunctionCallRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: model.Event event = 2;
   */
  event?: Event;

  constructor(data?: PartialMessage<FunctionCallRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ext.FunctionCallRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event", kind: "message", T: Event },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionCallRequest {
    return new FunctionCallRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionCallRequest {
    return new FunctionCallRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionCallRequest {
    return new FunctionCallRequest().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionCallRequest | PlainMessage<FunctionCallRequest> | undefined, b: FunctionCallRequest | PlainMessage<FunctionCallRequest> | undefined): boolean {
    return proto3.util.equals(FunctionCallRequest, a, b);
  }
}

/**
 * @generated from message ext.FunctionCallResponse
 */
export class FunctionCallResponse extends Message<FunctionCallResponse> {
  /**
   *
   * This event is only used/required if it is a sync event.
   *
   * @generated from field: model.Event event = 1;
   */
  event?: Event;

  constructor(data?: PartialMessage<FunctionCallResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ext.FunctionCallResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "message", T: Event },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionCallResponse {
    return new FunctionCallResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionCallResponse {
    return new FunctionCallResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionCallResponse {
    return new FunctionCallResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionCallResponse | PlainMessage<FunctionCallResponse> | undefined, b: FunctionCallResponse | PlainMessage<FunctionCallResponse> | undefined): boolean {
    return proto3.util.equals(FunctionCallResponse, a, b);
  }
}

