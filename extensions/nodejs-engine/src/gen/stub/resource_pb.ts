// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file stub/resource.proto (package stub, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Resource } from "../model/resource_pb";
import { ResourceMigrationPlan } from "../model/resource-migration_pb";

/**
 * @generated from message stub.PrepareResourceMigrationPlanRequest
 */
export class PrepareResourceMigrationPlanRequest extends Message<PrepareResourceMigrationPlanRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: bool prepareFromDataSource = 2;
   */
  prepareFromDataSource = false;

  /**
   * @generated from field: repeated model.Resource resources = 3;
   */
  resources: Resource[] = [];

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<PrepareResourceMigrationPlanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.PrepareResourceMigrationPlanRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "prepareFromDataSource", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "resources", kind: "message", T: Resource, repeated: true },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrepareResourceMigrationPlanRequest {
    return new PrepareResourceMigrationPlanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrepareResourceMigrationPlanRequest {
    return new PrepareResourceMigrationPlanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrepareResourceMigrationPlanRequest {
    return new PrepareResourceMigrationPlanRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PrepareResourceMigrationPlanRequest | PlainMessage<PrepareResourceMigrationPlanRequest> | undefined, b: PrepareResourceMigrationPlanRequest | PlainMessage<PrepareResourceMigrationPlanRequest> | undefined): boolean {
    return proto3.util.equals(PrepareResourceMigrationPlanRequest, a, b);
  }
}

/**
 * @generated from message stub.PrepareResourceMigrationPlanResponse
 */
export class PrepareResourceMigrationPlanResponse extends Message<PrepareResourceMigrationPlanResponse> {
  /**
   * @generated from field: repeated model.ResourceMigrationPlan plans = 1;
   */
  plans: ResourceMigrationPlan[] = [];

  constructor(data?: PartialMessage<PrepareResourceMigrationPlanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.PrepareResourceMigrationPlanResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "plans", kind: "message", T: ResourceMigrationPlan, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrepareResourceMigrationPlanResponse {
    return new PrepareResourceMigrationPlanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrepareResourceMigrationPlanResponse {
    return new PrepareResourceMigrationPlanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrepareResourceMigrationPlanResponse {
    return new PrepareResourceMigrationPlanResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PrepareResourceMigrationPlanResponse | PlainMessage<PrepareResourceMigrationPlanResponse> | undefined, b: PrepareResourceMigrationPlanResponse | PlainMessage<PrepareResourceMigrationPlanResponse> | undefined): boolean {
    return proto3.util.equals(PrepareResourceMigrationPlanResponse, a, b);
  }
}

/**
 * @generated from message stub.CreateResourceRequest
 */
export class CreateResourceRequest extends Message<CreateResourceRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated model.Resource resources = 2;
   */
  resources: Resource[] = [];

  /**
   *
   * if true, it will try to migrate the resource to the data source, if it is false, resource will be only created, backend will not be affected.
   *
   * @generated from field: bool doMigration = 3;
   */
  doMigration = false;

  /**
   *
   * if true, it will force the migration, if it is false, it will not migrate if there is a conflict.
   * Force migration will also do following things:
   * - if column/index is deleted from resource, it will delete it from backend
   *
   * @generated from field: bool forceMigration = 4;
   */
  forceMigration = false;

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CreateResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.CreateResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resources", kind: "message", T: Resource, repeated: true },
    { no: 3, name: "doMigration", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "forceMigration", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateResourceRequest {
    return new CreateResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateResourceRequest {
    return new CreateResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateResourceRequest {
    return new CreateResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateResourceRequest | PlainMessage<CreateResourceRequest> | undefined, b: CreateResourceRequest | PlainMessage<CreateResourceRequest> | undefined): boolean {
    return proto3.util.equals(CreateResourceRequest, a, b);
  }
}

/**
 * @generated from message stub.CreateResourceResponse
 */
export class CreateResourceResponse extends Message<CreateResourceResponse> {
  /**
   * @generated from field: repeated model.Resource resources = 1;
   */
  resources: Resource[] = [];

  constructor(data?: PartialMessage<CreateResourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.CreateResourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resources", kind: "message", T: Resource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateResourceResponse {
    return new CreateResourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateResourceResponse {
    return new CreateResourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateResourceResponse {
    return new CreateResourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateResourceResponse | PlainMessage<CreateResourceResponse> | undefined, b: CreateResourceResponse | PlainMessage<CreateResourceResponse> | undefined): boolean {
    return proto3.util.equals(CreateResourceResponse, a, b);
  }
}

/**
 * @generated from message stub.UpdateResourceRequest
 */
export class UpdateResourceRequest extends Message<UpdateResourceRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated model.Resource resources = 2;
   */
  resources: Resource[] = [];

  /**
   *
   * See the comments on CreateResourceRequest.doMigration
   *
   * @generated from field: bool doMigration = 3;
   */
  doMigration = false;

  /**
   *
   * See the comments on CreateResourceRequest.forceMigration
   *
   * @generated from field: bool forceMigration = 4;
   */
  forceMigration = false;

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<UpdateResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.UpdateResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resources", kind: "message", T: Resource, repeated: true },
    { no: 3, name: "doMigration", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "forceMigration", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResourceRequest {
    return new UpdateResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResourceRequest {
    return new UpdateResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResourceRequest {
    return new UpdateResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResourceRequest | PlainMessage<UpdateResourceRequest> | undefined, b: UpdateResourceRequest | PlainMessage<UpdateResourceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateResourceRequest, a, b);
  }
}

/**
 * @generated from message stub.UpdateResourceResponse
 */
export class UpdateResourceResponse extends Message<UpdateResourceResponse> {
  /**
   * @generated from field: repeated model.Resource resources = 1;
   */
  resources: Resource[] = [];

  constructor(data?: PartialMessage<UpdateResourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.UpdateResourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resources", kind: "message", T: Resource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResourceResponse {
    return new UpdateResourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResourceResponse {
    return new UpdateResourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResourceResponse {
    return new UpdateResourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResourceResponse | PlainMessage<UpdateResourceResponse> | undefined, b: UpdateResourceResponse | PlainMessage<UpdateResourceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateResourceResponse, a, b);
  }
}

/**
 * @generated from message stub.DeleteResourceRequest
 */
export class DeleteResourceRequest extends Message<DeleteResourceRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated string ids = 3;
   */
  ids: string[] = [];

  /**
   *
   * See the comments on CreateResourceRequest.doMigration
   *
   * @generated from field: bool doMigration = 4;
   */
  doMigration = false;

  /**
   *
   * See the comments on CreateResourceRequest.forceMigration
   *
   * @generated from field: bool forceMigration = 5;
   */
  forceMigration = false;

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<DeleteResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.DeleteResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "doMigration", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "forceMigration", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteResourceRequest {
    return new DeleteResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteResourceRequest {
    return new DeleteResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteResourceRequest {
    return new DeleteResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteResourceRequest | PlainMessage<DeleteResourceRequest> | undefined, b: DeleteResourceRequest | PlainMessage<DeleteResourceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteResourceRequest, a, b);
  }
}

/**
 * @generated from message stub.DeleteResourceResponse
 */
export class DeleteResourceResponse extends Message<DeleteResourceResponse> {
  constructor(data?: PartialMessage<DeleteResourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.DeleteResourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteResourceResponse {
    return new DeleteResourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteResourceResponse {
    return new DeleteResourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteResourceResponse {
    return new DeleteResourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteResourceResponse | PlainMessage<DeleteResourceResponse> | undefined, b: DeleteResourceResponse | PlainMessage<DeleteResourceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteResourceResponse, a, b);
  }
}

/**
 * @generated from message stub.ListResourceRequest
 */
export class ListResourceRequest extends Message<ListResourceRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ListResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.ListResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResourceRequest {
    return new ListResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResourceRequest {
    return new ListResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResourceRequest {
    return new ListResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListResourceRequest | PlainMessage<ListResourceRequest> | undefined, b: ListResourceRequest | PlainMessage<ListResourceRequest> | undefined): boolean {
    return proto3.util.equals(ListResourceRequest, a, b);
  }
}

/**
 * @generated from message stub.ListResourceResponse
 */
export class ListResourceResponse extends Message<ListResourceResponse> {
  /**
   * @generated from field: repeated model.Resource resources = 1;
   */
  resources: Resource[] = [];

  constructor(data?: PartialMessage<ListResourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.ListResourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resources", kind: "message", T: Resource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResourceResponse {
    return new ListResourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResourceResponse {
    return new ListResourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResourceResponse {
    return new ListResourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResourceResponse | PlainMessage<ListResourceResponse> | undefined, b: ListResourceResponse | PlainMessage<ListResourceResponse> | undefined): boolean {
    return proto3.util.equals(ListResourceResponse, a, b);
  }
}

/**
 * @generated from message stub.GetResourceRequest
 */
export class GetResourceRequest extends Message<GetResourceRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<GetResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetResourceRequest | PlainMessage<GetResourceRequest> | undefined, b: GetResourceRequest | PlainMessage<GetResourceRequest> | undefined): boolean {
    return proto3.util.equals(GetResourceRequest, a, b);
  }
}

/**
 * @generated from message stub.GetResourceResponse
 */
export class GetResourceResponse extends Message<GetResourceResponse> {
  /**
   * @generated from field: model.Resource resource = 1;
   */
  resource?: Resource;

  constructor(data?: PartialMessage<GetResourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetResourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Resource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResourceResponse {
    return new GetResourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResourceResponse {
    return new GetResourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResourceResponse {
    return new GetResourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetResourceResponse | PlainMessage<GetResourceResponse> | undefined, b: GetResourceResponse | PlainMessage<GetResourceResponse> | undefined): boolean {
    return proto3.util.equals(GetResourceResponse, a, b);
  }
}

/**
 * @generated from message stub.GetResourceByNameRequest
 */
export class GetResourceByNameRequest extends Message<GetResourceByNameRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<GetResourceByNameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetResourceByNameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResourceByNameRequest {
    return new GetResourceByNameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResourceByNameRequest {
    return new GetResourceByNameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResourceByNameRequest {
    return new GetResourceByNameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetResourceByNameRequest | PlainMessage<GetResourceByNameRequest> | undefined, b: GetResourceByNameRequest | PlainMessage<GetResourceByNameRequest> | undefined): boolean {
    return proto3.util.equals(GetResourceByNameRequest, a, b);
  }
}

/**
 * @generated from message stub.GetResourceByNameResponse
 */
export class GetResourceByNameResponse extends Message<GetResourceByNameResponse> {
  /**
   * @generated from field: model.Resource resource = 1;
   */
  resource?: Resource;

  constructor(data?: PartialMessage<GetResourceByNameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetResourceByNameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Resource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResourceByNameResponse {
    return new GetResourceByNameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResourceByNameResponse {
    return new GetResourceByNameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResourceByNameResponse {
    return new GetResourceByNameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetResourceByNameResponse | PlainMessage<GetResourceByNameResponse> | undefined, b: GetResourceByNameResponse | PlainMessage<GetResourceByNameResponse> | undefined): boolean {
    return proto3.util.equals(GetResourceByNameResponse, a, b);
  }
}

/**
 * @generated from message stub.GetSystemResourceRequest
 */
export class GetSystemResourceRequest extends Message<GetSystemResourceRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<GetSystemResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetSystemResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemResourceRequest {
    return new GetSystemResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemResourceRequest {
    return new GetSystemResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemResourceRequest {
    return new GetSystemResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemResourceRequest | PlainMessage<GetSystemResourceRequest> | undefined, b: GetSystemResourceRequest | PlainMessage<GetSystemResourceRequest> | undefined): boolean {
    return proto3.util.equals(GetSystemResourceRequest, a, b);
  }
}

/**
 * @generated from message stub.GetSystemResourceResponse
 */
export class GetSystemResourceResponse extends Message<GetSystemResourceResponse> {
  /**
   * @generated from field: model.Resource resource = 1;
   */
  resource?: Resource;

  constructor(data?: PartialMessage<GetSystemResourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetSystemResourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Resource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemResourceResponse {
    return new GetSystemResourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemResourceResponse {
    return new GetSystemResourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemResourceResponse {
    return new GetSystemResourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemResourceResponse | PlainMessage<GetSystemResourceResponse> | undefined, b: GetSystemResourceResponse | PlainMessage<GetSystemResourceResponse> | undefined): boolean {
    return proto3.util.equals(GetSystemResourceResponse, a, b);
  }
}

