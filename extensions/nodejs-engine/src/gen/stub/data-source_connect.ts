// @generated by protoc-gen-connect-es v0.9.1 with parameter "target=ts,import_extension="
// @generated from file stub/data-source.proto (package stub, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateDataSourceRequest, CreateDataSourceResponse, DeleteDataSourceRequest, DeleteDataSourceResponse, GetDataSourceRequest, GetDataSourceResponse, ListDataSourceRequest, ListDataSourceResponse, ListEntitiesRequest, ListEntitiesResponse, PrepareResourceFromEntityRequest, PrepareResourceFromEntityResponse, StatusRequest, StatusResponse, UpdateDataSourceRequest, UpdateDataSourceResponse } from "./data-source_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * DataSource Service is for managing data sources
 *
 * @generated from service stub.DataSource
 */
export const DataSource = {
  typeName: "stub.DataSource",
  methods: {
    /**
     * @generated from rpc stub.DataSource.Create
     */
    create: {
      name: "Create",
      I: CreateDataSourceRequest,
      O: CreateDataSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc stub.DataSource.List
     */
    list: {
      name: "List",
      I: ListDataSourceRequest,
      O: ListDataSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc stub.DataSource.Update
     */
    update: {
      name: "Update",
      I: UpdateDataSourceRequest,
      O: UpdateDataSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc stub.DataSource.Delete
     */
    delete: {
      name: "Delete",
      I: DeleteDataSourceRequest,
      O: DeleteDataSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc stub.DataSource.Get
     */
    get: {
      name: "Get",
      I: GetDataSourceRequest,
      O: GetDataSourceResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * Status will return connection status of data source
     *
     * @generated from rpc stub.DataSource.Status
     */
    status: {
      name: "Status",
      I: StatusRequest,
      O: StatusResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * List entities will return all entities from data source
     *
     * @generated from rpc stub.DataSource.ListEntities
     */
    listEntities: {
      name: "ListEntities",
      I: ListEntitiesRequest,
      O: ListEntitiesResponse,
      kind: MethodKind.Unary,
    },
    /**
     *
     * PrepareResourceFromEntity will return resource from data source based on entity.
     * It is for database first approach. If you already have an entity/table on data source and your want to create resource based on it, you can call this endpoint to do it.
     *
     * @generated from rpc stub.DataSource.PrepareResourceFromEntity
     */
    prepareResourceFromEntity: {
      name: "PrepareResourceFromEntity",
      I: PrepareResourceFromEntityRequest,
      O: PrepareResourceFromEntityResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

