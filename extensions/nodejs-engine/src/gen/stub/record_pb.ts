// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file stub/record.proto (package stub, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Value } from "@bufbuild/protobuf";
import { Record } from "../model/record_pb";
import { BooleanExpression } from "../model/query_pb";

/**
 * @generated from message stub.ListRecordRequest
 */
export class ListRecordRequest extends Message<ListRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * @generated from field: map<string, string> filters = 4;
   */
  filters: { [key: string]: string } = {};

  /**
   * @generated from field: uint32 limit = 5;
   */
  limit = 0;

  /**
   * @generated from field: uint64 offset = 6;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: bool useHistory = 7;
   */
  useHistory = false;

  /**
   * @generated from field: repeated string resolveReferences = 8;
   */
  resolveReferences: string[] = [];

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ListRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.ListRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "filters", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 5, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "useHistory", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "resolveReferences", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRecordRequest {
    return new ListRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRecordRequest {
    return new ListRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRecordRequest {
    return new ListRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListRecordRequest | PlainMessage<ListRecordRequest> | undefined, b: ListRecordRequest | PlainMessage<ListRecordRequest> | undefined): boolean {
    return proto3.util.equals(ListRecordRequest, a, b);
  }
}

/**
 * @generated from message stub.ListRecordResponse
 */
export class ListRecordResponse extends Message<ListRecordResponse> {
  /**
   * @generated from field: uint32 total = 1;
   */
  total = 0;

  /**
   * @generated from field: repeated model.Record content = 2;
   */
  content: Record[] = [];

  constructor(data?: PartialMessage<ListRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.ListRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "content", kind: "message", T: Record, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListRecordResponse {
    return new ListRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListRecordResponse {
    return new ListRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListRecordResponse {
    return new ListRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListRecordResponse | PlainMessage<ListRecordResponse> | undefined, b: ListRecordResponse | PlainMessage<ListRecordResponse> | undefined): boolean {
    return proto3.util.equals(ListRecordResponse, a, b);
  }
}

/**
 * @generated from message stub.SearchRecordRequest
 */
export class SearchRecordRequest extends Message<SearchRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * @generated from field: model.BooleanExpression query = 4;
   */
  query?: BooleanExpression;

  /**
   * @generated from field: uint32 limit = 5;
   */
  limit = 0;

  /**
   * @generated from field: uint64 offset = 6;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: bool useHistory = 7;
   */
  useHistory = false;

  /**
   * @generated from field: repeated string resolveReferences = 8;
   */
  resolveReferences: string[] = [];

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<SearchRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.SearchRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "query", kind: "message", T: BooleanExpression },
    { no: 5, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "useHistory", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "resolveReferences", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchRecordRequest {
    return new SearchRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchRecordRequest {
    return new SearchRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchRecordRequest {
    return new SearchRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchRecordRequest | PlainMessage<SearchRecordRequest> | undefined, b: SearchRecordRequest | PlainMessage<SearchRecordRequest> | undefined): boolean {
    return proto3.util.equals(SearchRecordRequest, a, b);
  }
}

/**
 * @generated from message stub.ReadStreamRequest
 */
export class ReadStreamRequest extends Message<ReadStreamRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * @generated from field: model.BooleanExpression query = 4;
   */
  query?: BooleanExpression;

  /**
   * @generated from field: uint32 limit = 5;
   */
  limit = 0;

  /**
   * @generated from field: uint64 offset = 6;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: bool useHistory = 7;
   */
  useHistory = false;

  /**
   * @generated from field: repeated string resolveReferences = 8;
   */
  resolveReferences: string[] = [];

  /**
   * @generated from field: bool useTransaction = 9;
   */
  useTransaction = false;

  /**
   * @generated from field: bool packRecords = 10;
   */
  packRecords = false;

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ReadStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.ReadStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "query", kind: "message", T: BooleanExpression },
    { no: 5, name: "limit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "offset", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "useHistory", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "resolveReferences", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "useTransaction", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "packRecords", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadStreamRequest {
    return new ReadStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadStreamRequest {
    return new ReadStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadStreamRequest {
    return new ReadStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReadStreamRequest | PlainMessage<ReadStreamRequest> | undefined, b: ReadStreamRequest | PlainMessage<ReadStreamRequest> | undefined): boolean {
    return proto3.util.equals(ReadStreamRequest, a, b);
  }
}

/**
 * @generated from message stub.WriteStreamResponse
 */
export class WriteStreamResponse extends Message<WriteStreamResponse> {
  /**
   * @generated from field: repeated bool success = 1;
   */
  success: boolean[] = [];

  /**
   * @generated from field: repeated bool created = 2;
   */
  created: boolean[] = [];

  /**
   * @generated from field: repeated bool updated = 3;
   */
  updated: boolean[] = [];

  constructor(data?: PartialMessage<WriteStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.WriteStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
    { no: 2, name: "created", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
    { no: 3, name: "updated", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteStreamResponse {
    return new WriteStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteStreamResponse {
    return new WriteStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteStreamResponse {
    return new WriteStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WriteStreamResponse | PlainMessage<WriteStreamResponse> | undefined, b: WriteStreamResponse | PlainMessage<WriteStreamResponse> | undefined): boolean {
    return proto3.util.equals(WriteStreamResponse, a, b);
  }
}

/**
 * @generated from message stub.SearchRecordResponse
 */
export class SearchRecordResponse extends Message<SearchRecordResponse> {
  /**
   * @generated from field: uint32 total = 1;
   */
  total = 0;

  /**
   * @generated from field: repeated model.Record content = 2;
   */
  content: Record[] = [];

  constructor(data?: PartialMessage<SearchRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.SearchRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "content", kind: "message", T: Record, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchRecordResponse {
    return new SearchRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchRecordResponse {
    return new SearchRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchRecordResponse {
    return new SearchRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchRecordResponse | PlainMessage<SearchRecordResponse> | undefined, b: SearchRecordResponse | PlainMessage<SearchRecordResponse> | undefined): boolean {
    return proto3.util.equals(SearchRecordResponse, a, b);
  }
}

/**
 * @generated from message stub.CreateRecordRequest
 */
export class CreateRecordRequest extends Message<CreateRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * @generated from field: model.Record record = 4;
   */
  record?: Record;

  /**
   * @generated from field: repeated model.Record records = 5;
   */
  records: Record[] = [];

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CreateRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.CreateRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "record", kind: "message", T: Record },
    { no: 5, name: "records", kind: "message", T: Record, repeated: true },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRecordRequest {
    return new CreateRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRecordRequest {
    return new CreateRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRecordRequest {
    return new CreateRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRecordRequest | PlainMessage<CreateRecordRequest> | undefined, b: CreateRecordRequest | PlainMessage<CreateRecordRequest> | undefined): boolean {
    return proto3.util.equals(CreateRecordRequest, a, b);
  }
}

/**
 * @generated from message stub.CreateRecordResponse
 */
export class CreateRecordResponse extends Message<CreateRecordResponse> {
  /**
   * Rest Only
   *
   * @generated from field: model.Record record = 1;
   */
  record?: Record;

  /**
   * @generated from field: repeated model.Record records = 2;
   */
  records: Record[] = [];

  /**
   * @generated from field: repeated bool inserted = 4;
   */
  inserted: boolean[] = [];

  constructor(data?: PartialMessage<CreateRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.CreateRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "message", T: Record },
    { no: 2, name: "records", kind: "message", T: Record, repeated: true },
    { no: 4, name: "inserted", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRecordResponse {
    return new CreateRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRecordResponse {
    return new CreateRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRecordResponse {
    return new CreateRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRecordResponse | PlainMessage<CreateRecordResponse> | undefined, b: CreateRecordResponse | PlainMessage<CreateRecordResponse> | undefined): boolean {
    return proto3.util.equals(CreateRecordResponse, a, b);
  }
}

/**
 * @generated from message stub.UpdateRecordRequest
 */
export class UpdateRecordRequest extends Message<UpdateRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * Rest Only
   *
   * @generated from field: model.Record record = 4;
   */
  record?: Record;

  /**
   * @generated from field: repeated model.Record records = 5;
   */
  records: Record[] = [];

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<UpdateRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.UpdateRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "record", kind: "message", T: Record },
    { no: 5, name: "records", kind: "message", T: Record, repeated: true },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRecordRequest {
    return new UpdateRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRecordRequest {
    return new UpdateRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRecordRequest {
    return new UpdateRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRecordRequest | PlainMessage<UpdateRecordRequest> | undefined, b: UpdateRecordRequest | PlainMessage<UpdateRecordRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRecordRequest, a, b);
  }
}

/**
 * @generated from message stub.UpdateRecordResponse
 */
export class UpdateRecordResponse extends Message<UpdateRecordResponse> {
  /**
   * Rest Only
   *
   * @generated from field: model.Record record = 1;
   */
  record?: Record;

  /**
   * @generated from field: repeated model.Record records = 2;
   */
  records: Record[] = [];

  constructor(data?: PartialMessage<UpdateRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.UpdateRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "message", T: Record },
    { no: 2, name: "records", kind: "message", T: Record, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRecordResponse {
    return new UpdateRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRecordResponse {
    return new UpdateRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRecordResponse {
    return new UpdateRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRecordResponse | PlainMessage<UpdateRecordResponse> | undefined, b: UpdateRecordResponse | PlainMessage<UpdateRecordResponse> | undefined): boolean {
    return proto3.util.equals(UpdateRecordResponse, a, b);
  }
}

/**
 * @generated from message stub.ApplyRecordRequest
 */
export class ApplyRecordRequest extends Message<ApplyRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * Rest Only
   *
   * @generated from field: model.Record record = 4;
   */
  record?: Record;

  /**
   * @generated from field: repeated model.Record records = 5;
   */
  records: Record[] = [];

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ApplyRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.ApplyRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "record", kind: "message", T: Record },
    { no: 5, name: "records", kind: "message", T: Record, repeated: true },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplyRecordRequest {
    return new ApplyRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplyRecordRequest {
    return new ApplyRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplyRecordRequest {
    return new ApplyRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApplyRecordRequest | PlainMessage<ApplyRecordRequest> | undefined, b: ApplyRecordRequest | PlainMessage<ApplyRecordRequest> | undefined): boolean {
    return proto3.util.equals(ApplyRecordRequest, a, b);
  }
}

/**
 * @generated from message stub.ApplyRecordResponse
 */
export class ApplyRecordResponse extends Message<ApplyRecordResponse> {
  /**
   * Rest Only
   *
   * @generated from field: model.Record record = 1;
   */
  record?: Record;

  /**
   * @generated from field: repeated model.Record records = 2;
   */
  records: Record[] = [];

  constructor(data?: PartialMessage<ApplyRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.ApplyRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "message", T: Record },
    { no: 2, name: "records", kind: "message", T: Record, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplyRecordResponse {
    return new ApplyRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplyRecordResponse {
    return new ApplyRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplyRecordResponse {
    return new ApplyRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ApplyRecordResponse | PlainMessage<ApplyRecordResponse> | undefined, b: ApplyRecordResponse | PlainMessage<ApplyRecordResponse> | undefined): boolean {
    return proto3.util.equals(ApplyRecordResponse, a, b);
  }
}

/**
 * @generated from message stub.UpdateMultiRecordRequest
 */
export class UpdateMultiRecordRequest extends Message<UpdateMultiRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * @generated from field: model.BooleanExpression query = 4;
   */
  query?: BooleanExpression;

  /**
   * @generated from field: map<string, google.protobuf.Value> properties = 5;
   */
  properties: { [key: string]: Value } = {};

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<UpdateMultiRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.UpdateMultiRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "query", kind: "message", T: BooleanExpression },
    { no: 5, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMultiRecordRequest {
    return new UpdateMultiRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMultiRecordRequest {
    return new UpdateMultiRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMultiRecordRequest {
    return new UpdateMultiRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMultiRecordRequest | PlainMessage<UpdateMultiRecordRequest> | undefined, b: UpdateMultiRecordRequest | PlainMessage<UpdateMultiRecordRequest> | undefined): boolean {
    return proto3.util.equals(UpdateMultiRecordRequest, a, b);
  }
}

/**
 * @generated from message stub.UpdateMultiRecordResponse
 */
export class UpdateMultiRecordResponse extends Message<UpdateMultiRecordResponse> {
  /**
   * Rest Only
   *
   * @generated from field: model.Record record = 1;
   */
  record?: Record;

  /**
   * @generated from field: repeated model.Record records = 2;
   */
  records: Record[] = [];

  constructor(data?: PartialMessage<UpdateMultiRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.UpdateMultiRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "message", T: Record },
    { no: 2, name: "records", kind: "message", T: Record, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMultiRecordResponse {
    return new UpdateMultiRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMultiRecordResponse {
    return new UpdateMultiRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMultiRecordResponse {
    return new UpdateMultiRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMultiRecordResponse | PlainMessage<UpdateMultiRecordResponse> | undefined, b: UpdateMultiRecordResponse | PlainMessage<UpdateMultiRecordResponse> | undefined): boolean {
    return proto3.util.equals(UpdateMultiRecordResponse, a, b);
  }
}

/**
 * @generated from message stub.DeleteRecordRequest
 */
export class DeleteRecordRequest extends Message<DeleteRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * Rest Only
   *
   * @generated from field: string id = 4;
   */
  id = "";

  /**
   * @generated from field: repeated string ids = 5;
   */
  ids: string[] = [];

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<DeleteRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.DeleteRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRecordRequest {
    return new DeleteRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRecordRequest {
    return new DeleteRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRecordRequest {
    return new DeleteRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRecordRequest | PlainMessage<DeleteRecordRequest> | undefined, b: DeleteRecordRequest | PlainMessage<DeleteRecordRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRecordRequest, a, b);
  }
}

/**
 * @generated from message stub.DeleteRecordResponse
 */
export class DeleteRecordResponse extends Message<DeleteRecordResponse> {
  constructor(data?: PartialMessage<DeleteRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.DeleteRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRecordResponse {
    return new DeleteRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRecordResponse {
    return new DeleteRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRecordResponse {
    return new DeleteRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRecordResponse | PlainMessage<DeleteRecordResponse> | undefined, b: DeleteRecordResponse | PlainMessage<DeleteRecordResponse> | undefined): boolean {
    return proto3.util.equals(DeleteRecordResponse, a, b);
  }
}

/**
 * @generated from message stub.GetRecordRequest
 */
export class GetRecordRequest extends Message<GetRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * @generated from field: string id = 4;
   */
  id = "";

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<GetRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecordRequest {
    return new GetRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecordRequest {
    return new GetRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecordRequest {
    return new GetRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecordRequest | PlainMessage<GetRecordRequest> | undefined, b: GetRecordRequest | PlainMessage<GetRecordRequest> | undefined): boolean {
    return proto3.util.equals(GetRecordRequest, a, b);
  }
}

/**
 * @generated from message stub.GetRecordResponse
 */
export class GetRecordResponse extends Message<GetRecordResponse> {
  /**
   * @generated from field: model.Record record = 1;
   */
  record?: Record;

  constructor(data?: PartialMessage<GetRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "record", kind: "message", T: Record },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecordResponse {
    return new GetRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecordResponse {
    return new GetRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecordResponse {
    return new GetRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecordResponse | PlainMessage<GetRecordResponse> | undefined, b: GetRecordResponse | PlainMessage<GetRecordResponse> | undefined): boolean {
    return proto3.util.equals(GetRecordResponse, a, b);
  }
}

