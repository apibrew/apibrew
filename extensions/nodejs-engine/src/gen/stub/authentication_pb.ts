// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file stub/authentication.proto (package stub, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Token, TokenTerm } from "../model/token_pb";

/**
 *
 * AuthenticationRequest is the request for authentication
 *
 * @generated from message stub.AuthenticationRequest
 */
export class AuthenticationRequest extends Message<AuthenticationRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   *
   * Token Lifespan
   *
   * @generated from field: model.TokenTerm term = 3;
   */
  term = TokenTerm.SHORT;

  constructor(data?: PartialMessage<AuthenticationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.AuthenticationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "term", kind: "enum", T: proto3.getEnumType(TokenTerm) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticationRequest {
    return new AuthenticationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticationRequest {
    return new AuthenticationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticationRequest {
    return new AuthenticationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticationRequest | PlainMessage<AuthenticationRequest> | undefined, b: AuthenticationRequest | PlainMessage<AuthenticationRequest> | undefined): boolean {
    return proto3.util.equals(AuthenticationRequest, a, b);
  }
}

/**
 * @generated from message stub.AuthenticationResponse
 */
export class AuthenticationResponse extends Message<AuthenticationResponse> {
  /**
   * @generated from field: model.Token token = 1;
   */
  token?: Token;

  constructor(data?: PartialMessage<AuthenticationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.AuthenticationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: Token },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthenticationResponse {
    return new AuthenticationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthenticationResponse {
    return new AuthenticationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthenticationResponse {
    return new AuthenticationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthenticationResponse | PlainMessage<AuthenticationResponse> | undefined, b: AuthenticationResponse | PlainMessage<AuthenticationResponse> | undefined): boolean {
    return proto3.util.equals(AuthenticationResponse, a, b);
  }
}

/**
 * @generated from message stub.RenewTokenRequest
 */
export class RenewTokenRequest extends Message<RenewTokenRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: model.TokenTerm term = 2;
   */
  term = TokenTerm.SHORT;

  constructor(data?: PartialMessage<RenewTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.RenewTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "term", kind: "enum", T: proto3.getEnumType(TokenTerm) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenewTokenRequest {
    return new RenewTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenewTokenRequest {
    return new RenewTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenewTokenRequest {
    return new RenewTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenewTokenRequest | PlainMessage<RenewTokenRequest> | undefined, b: RenewTokenRequest | PlainMessage<RenewTokenRequest> | undefined): boolean {
    return proto3.util.equals(RenewTokenRequest, a, b);
  }
}

/**
 * @generated from message stub.RenewTokenResponse
 */
export class RenewTokenResponse extends Message<RenewTokenResponse> {
  /**
   * @generated from field: model.Token token = 1;
   */
  token?: Token;

  constructor(data?: PartialMessage<RenewTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.RenewTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: Token },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenewTokenResponse {
    return new RenewTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenewTokenResponse {
    return new RenewTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenewTokenResponse {
    return new RenewTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenewTokenResponse | PlainMessage<RenewTokenResponse> | undefined, b: RenewTokenResponse | PlainMessage<RenewTokenResponse> | undefined): boolean {
    return proto3.util.equals(RenewTokenResponse, a, b);
  }
}

