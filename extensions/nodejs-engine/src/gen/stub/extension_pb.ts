// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file stub/extension.proto (package stub, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Extension } from "../model/extension_pb";

/**
 * @generated from message stub.ListExtensionRequest
 */
export class ListExtensionRequest extends Message<ListExtensionRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<ListExtensionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.ListExtensionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExtensionRequest {
    return new ListExtensionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExtensionRequest {
    return new ListExtensionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExtensionRequest {
    return new ListExtensionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListExtensionRequest | PlainMessage<ListExtensionRequest> | undefined, b: ListExtensionRequest | PlainMessage<ListExtensionRequest> | undefined): boolean {
    return proto3.util.equals(ListExtensionRequest, a, b);
  }
}

/**
 * @generated from message stub.ListExtensionResponse
 */
export class ListExtensionResponse extends Message<ListExtensionResponse> {
  /**
   * @generated from field: repeated model.Extension content = 1;
   */
  content: Extension[] = [];

  constructor(data?: PartialMessage<ListExtensionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.ListExtensionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExtensionResponse {
    return new ListExtensionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExtensionResponse {
    return new ListExtensionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExtensionResponse {
    return new ListExtensionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListExtensionResponse | PlainMessage<ListExtensionResponse> | undefined, b: ListExtensionResponse | PlainMessage<ListExtensionResponse> | undefined): boolean {
    return proto3.util.equals(ListExtensionResponse, a, b);
  }
}

/**
 * @generated from message stub.GetExtensionRequest
 */
export class GetExtensionRequest extends Message<GetExtensionRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetExtensionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetExtensionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExtensionRequest {
    return new GetExtensionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExtensionRequest {
    return new GetExtensionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExtensionRequest {
    return new GetExtensionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetExtensionRequest | PlainMessage<GetExtensionRequest> | undefined, b: GetExtensionRequest | PlainMessage<GetExtensionRequest> | undefined): boolean {
    return proto3.util.equals(GetExtensionRequest, a, b);
  }
}

/**
 * @generated from message stub.GetExtensionResponse
 */
export class GetExtensionResponse extends Message<GetExtensionResponse> {
  /**
   * @generated from field: model.Extension extension = 1;
   */
  extension?: Extension;

  constructor(data?: PartialMessage<GetExtensionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetExtensionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "extension", kind: "message", T: Extension },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetExtensionResponse {
    return new GetExtensionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetExtensionResponse {
    return new GetExtensionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetExtensionResponse {
    return new GetExtensionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetExtensionResponse | PlainMessage<GetExtensionResponse> | undefined, b: GetExtensionResponse | PlainMessage<GetExtensionResponse> | undefined): boolean {
    return proto3.util.equals(GetExtensionResponse, a, b);
  }
}

/**
 * @generated from message stub.CreateExtensionRequest
 */
export class CreateExtensionRequest extends Message<CreateExtensionRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated model.Extension extensions = 2;
   */
  extensions: Extension[] = [];

  constructor(data?: PartialMessage<CreateExtensionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.CreateExtensionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "extensions", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateExtensionRequest {
    return new CreateExtensionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateExtensionRequest {
    return new CreateExtensionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateExtensionRequest {
    return new CreateExtensionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateExtensionRequest | PlainMessage<CreateExtensionRequest> | undefined, b: CreateExtensionRequest | PlainMessage<CreateExtensionRequest> | undefined): boolean {
    return proto3.util.equals(CreateExtensionRequest, a, b);
  }
}

/**
 * @generated from message stub.CreateExtensionResponse
 */
export class CreateExtensionResponse extends Message<CreateExtensionResponse> {
  /**
   * @generated from field: repeated model.Extension extensions = 1;
   */
  extensions: Extension[] = [];

  constructor(data?: PartialMessage<CreateExtensionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.CreateExtensionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "extensions", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateExtensionResponse {
    return new CreateExtensionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateExtensionResponse {
    return new CreateExtensionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateExtensionResponse {
    return new CreateExtensionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateExtensionResponse | PlainMessage<CreateExtensionResponse> | undefined, b: CreateExtensionResponse | PlainMessage<CreateExtensionResponse> | undefined): boolean {
    return proto3.util.equals(CreateExtensionResponse, a, b);
  }
}

/**
 * @generated from message stub.UpdateExtensionRequest
 */
export class UpdateExtensionRequest extends Message<UpdateExtensionRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated model.Extension extensions = 2;
   */
  extensions: Extension[] = [];

  constructor(data?: PartialMessage<UpdateExtensionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.UpdateExtensionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "extensions", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateExtensionRequest {
    return new UpdateExtensionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateExtensionRequest {
    return new UpdateExtensionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateExtensionRequest {
    return new UpdateExtensionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateExtensionRequest | PlainMessage<UpdateExtensionRequest> | undefined, b: UpdateExtensionRequest | PlainMessage<UpdateExtensionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateExtensionRequest, a, b);
  }
}

/**
 * @generated from message stub.UpdateExtensionResponse
 */
export class UpdateExtensionResponse extends Message<UpdateExtensionResponse> {
  /**
   * @generated from field: repeated model.Extension extensions = 1;
   */
  extensions: Extension[] = [];

  constructor(data?: PartialMessage<UpdateExtensionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.UpdateExtensionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "extensions", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateExtensionResponse {
    return new UpdateExtensionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateExtensionResponse {
    return new UpdateExtensionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateExtensionResponse {
    return new UpdateExtensionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateExtensionResponse | PlainMessage<UpdateExtensionResponse> | undefined, b: UpdateExtensionResponse | PlainMessage<UpdateExtensionResponse> | undefined): boolean {
    return proto3.util.equals(UpdateExtensionResponse, a, b);
  }
}

/**
 * @generated from message stub.DeleteExtensionRequest
 */
export class DeleteExtensionRequest extends Message<DeleteExtensionRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteExtensionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.DeleteExtensionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteExtensionRequest {
    return new DeleteExtensionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteExtensionRequest {
    return new DeleteExtensionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteExtensionRequest {
    return new DeleteExtensionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteExtensionRequest | PlainMessage<DeleteExtensionRequest> | undefined, b: DeleteExtensionRequest | PlainMessage<DeleteExtensionRequest> | undefined): boolean {
    return proto3.util.equals(DeleteExtensionRequest, a, b);
  }
}

/**
 * @generated from message stub.DeleteExtensionResponse
 */
export class DeleteExtensionResponse extends Message<DeleteExtensionResponse> {
  constructor(data?: PartialMessage<DeleteExtensionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.DeleteExtensionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteExtensionResponse {
    return new DeleteExtensionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteExtensionResponse {
    return new DeleteExtensionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteExtensionResponse {
    return new DeleteExtensionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteExtensionResponse | PlainMessage<DeleteExtensionResponse> | undefined, b: DeleteExtensionResponse | PlainMessage<DeleteExtensionResponse> | undefined): boolean {
    return proto3.util.equals(DeleteExtensionResponse, a, b);
  }
}

