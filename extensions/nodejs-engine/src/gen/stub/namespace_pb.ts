// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file stub/namespace.proto (package stub, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Namespace } from "../model/namespace_pb";

/**
 * @generated from message stub.ListNamespaceRequest
 */
export class ListNamespaceRequest extends Message<ListNamespaceRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<ListNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.ListNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNamespaceRequest {
    return new ListNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNamespaceRequest {
    return new ListNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNamespaceRequest {
    return new ListNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListNamespaceRequest | PlainMessage<ListNamespaceRequest> | undefined, b: ListNamespaceRequest | PlainMessage<ListNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(ListNamespaceRequest, a, b);
  }
}

/**
 * @generated from message stub.ListNamespaceResponse
 */
export class ListNamespaceResponse extends Message<ListNamespaceResponse> {
  /**
   * @generated from field: repeated model.Namespace content = 2;
   */
  content: Namespace[] = [];

  constructor(data?: PartialMessage<ListNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.ListNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "content", kind: "message", T: Namespace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListNamespaceResponse {
    return new ListNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListNamespaceResponse {
    return new ListNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListNamespaceResponse {
    return new ListNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListNamespaceResponse | PlainMessage<ListNamespaceResponse> | undefined, b: ListNamespaceResponse | PlainMessage<ListNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(ListNamespaceResponse, a, b);
  }
}

/**
 * @generated from message stub.CreateNamespaceRequest
 */
export class CreateNamespaceRequest extends Message<CreateNamespaceRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated model.Namespace Namespaces = 2;
   */
  Namespaces: Namespace[] = [];

  constructor(data?: PartialMessage<CreateNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.CreateNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Namespaces", kind: "message", T: Namespace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNamespaceRequest {
    return new CreateNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNamespaceRequest | PlainMessage<CreateNamespaceRequest> | undefined, b: CreateNamespaceRequest | PlainMessage<CreateNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(CreateNamespaceRequest, a, b);
  }
}

/**
 * @generated from message stub.CreateNamespaceResponse
 */
export class CreateNamespaceResponse extends Message<CreateNamespaceResponse> {
  /**
   * @generated from field: repeated model.Namespace Namespaces = 1;
   */
  Namespaces: Namespace[] = [];

  constructor(data?: PartialMessage<CreateNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.CreateNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Namespaces", kind: "message", T: Namespace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateNamespaceResponse {
    return new CreateNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateNamespaceResponse | PlainMessage<CreateNamespaceResponse> | undefined, b: CreateNamespaceResponse | PlainMessage<CreateNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(CreateNamespaceResponse, a, b);
  }
}

/**
 * @generated from message stub.UpdateNamespaceRequest
 */
export class UpdateNamespaceRequest extends Message<UpdateNamespaceRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated model.Namespace Namespaces = 2;
   */
  Namespaces: Namespace[] = [];

  constructor(data?: PartialMessage<UpdateNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.UpdateNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Namespaces", kind: "message", T: Namespace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateNamespaceRequest {
    return new UpdateNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateNamespaceRequest {
    return new UpdateNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateNamespaceRequest {
    return new UpdateNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateNamespaceRequest | PlainMessage<UpdateNamespaceRequest> | undefined, b: UpdateNamespaceRequest | PlainMessage<UpdateNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(UpdateNamespaceRequest, a, b);
  }
}

/**
 * @generated from message stub.UpdateNamespaceResponse
 */
export class UpdateNamespaceResponse extends Message<UpdateNamespaceResponse> {
  /**
   * @generated from field: repeated model.Namespace Namespaces = 1;
   */
  Namespaces: Namespace[] = [];

  constructor(data?: PartialMessage<UpdateNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.UpdateNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Namespaces", kind: "message", T: Namespace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateNamespaceResponse {
    return new UpdateNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateNamespaceResponse {
    return new UpdateNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateNamespaceResponse {
    return new UpdateNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateNamespaceResponse | PlainMessage<UpdateNamespaceResponse> | undefined, b: UpdateNamespaceResponse | PlainMessage<UpdateNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(UpdateNamespaceResponse, a, b);
  }
}

/**
 * @generated from message stub.DeleteNamespaceRequest
 */
export class DeleteNamespaceRequest extends Message<DeleteNamespaceRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated string ids = 2;
   */
  ids: string[] = [];

  constructor(data?: PartialMessage<DeleteNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.DeleteNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteNamespaceRequest {
    return new DeleteNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteNamespaceRequest {
    return new DeleteNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteNamespaceRequest {
    return new DeleteNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteNamespaceRequest | PlainMessage<DeleteNamespaceRequest> | undefined, b: DeleteNamespaceRequest | PlainMessage<DeleteNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteNamespaceRequest, a, b);
  }
}

/**
 * @generated from message stub.DeleteNamespaceResponse
 */
export class DeleteNamespaceResponse extends Message<DeleteNamespaceResponse> {
  /**
   * @generated from field: repeated model.Namespace Namespaces = 1;
   */
  Namespaces: Namespace[] = [];

  constructor(data?: PartialMessage<DeleteNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.DeleteNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Namespaces", kind: "message", T: Namespace, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteNamespaceResponse {
    return new DeleteNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteNamespaceResponse {
    return new DeleteNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteNamespaceResponse {
    return new DeleteNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteNamespaceResponse | PlainMessage<DeleteNamespaceResponse> | undefined, b: DeleteNamespaceResponse | PlainMessage<DeleteNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteNamespaceResponse, a, b);
  }
}

/**
 * @generated from message stub.GetNamespaceRequest
 */
export class GetNamespaceRequest extends Message<GetNamespaceRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  constructor(data?: PartialMessage<GetNamespaceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetNamespaceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamespaceRequest {
    return new GetNamespaceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamespaceRequest {
    return new GetNamespaceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamespaceRequest {
    return new GetNamespaceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamespaceRequest | PlainMessage<GetNamespaceRequest> | undefined, b: GetNamespaceRequest | PlainMessage<GetNamespaceRequest> | undefined): boolean {
    return proto3.util.equals(GetNamespaceRequest, a, b);
  }
}

/**
 * @generated from message stub.GetNamespaceResponse
 */
export class GetNamespaceResponse extends Message<GetNamespaceResponse> {
  /**
   * @generated from field: model.Namespace Namespace = 1;
   */
  Namespace?: Namespace;

  constructor(data?: PartialMessage<GetNamespaceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stub.GetNamespaceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Namespace", kind: "message", T: Namespace },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNamespaceResponse {
    return new GetNamespaceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNamespaceResponse {
    return new GetNamespaceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNamespaceResponse {
    return new GetNamespaceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNamespaceResponse | PlainMessage<GetNamespaceResponse> | undefined, b: GetNamespaceResponse | PlainMessage<GetNamespaceResponse> | undefined): boolean {
    return proto3.util.equals(GetNamespaceResponse, a, b);
  }
}

