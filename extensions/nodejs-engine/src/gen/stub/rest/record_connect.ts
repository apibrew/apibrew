// @generated by protoc-gen-connect-es v0.9.1 with parameter "target=ts,import_extension="
// @generated from file stub/rest/record.proto (package rest, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ApplyRecordRequest, ApplyRecordResponse, CreateRecordRequest, CreateRecordResponse, DeleteRecordRequest, DeleteRecordResponse, UpdateRecordRequest, UpdateRecordResponse } from "./record_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * Record service is an abstract service for records of all resources. You can do CRUD like operations with Record service
 *
 * @generated from service rest.Record
 */
export const Record = {
  typeName: "rest.Record",
  methods: {
    /**
     * @generated from rpc rest.Record.Create
     */
    create: {
      name: "Create",
      I: CreateRecordRequest,
      O: CreateRecordResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc rest.Record.Update
     */
    update: {
      name: "Update",
      I: UpdateRecordRequest,
      O: UpdateRecordResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc rest.Record.Apply
     */
    apply: {
      name: "Apply",
      I: ApplyRecordRequest,
      O: ApplyRecordResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc rest.Record.Delete
     */
    delete: {
      name: "Delete",
      I: DeleteRecordRequest,
      O: DeleteRecordResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

