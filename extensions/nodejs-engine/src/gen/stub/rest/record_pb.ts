// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file stub/rest/record.proto (package rest, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Value } from "@bufbuild/protobuf";

/**
 * @generated from message rest.CreateRecordRequest
 */
export class CreateRecordRequest extends Message<CreateRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * @generated from field: map<string, google.protobuf.Value> properties = 5;
   */
  properties: { [key: string]: Value } = {};

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CreateRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rest.CreateRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRecordRequest {
    return new CreateRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRecordRequest {
    return new CreateRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRecordRequest {
    return new CreateRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRecordRequest | PlainMessage<CreateRecordRequest> | undefined, b: CreateRecordRequest | PlainMessage<CreateRecordRequest> | undefined): boolean {
    return proto3.util.equals(CreateRecordRequest, a, b);
  }
}

/**
 * @generated from message rest.CreateRecordResponse
 */
export class CreateRecordResponse extends Message<CreateRecordResponse> {
  /**
   * id; read only
   *
   * @generated from field: string id = 4;
   */
  id = "";

  /**
   * @generated from field: map<string, google.protobuf.Value> properties = 5;
   */
  properties: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<CreateRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rest.CreateRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRecordResponse {
    return new CreateRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRecordResponse {
    return new CreateRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRecordResponse {
    return new CreateRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRecordResponse | PlainMessage<CreateRecordResponse> | undefined, b: CreateRecordResponse | PlainMessage<CreateRecordResponse> | undefined): boolean {
    return proto3.util.equals(CreateRecordResponse, a, b);
  }
}

/**
 * @generated from message rest.UpdateRecordRequest
 */
export class UpdateRecordRequest extends Message<UpdateRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * id; read only
   *
   * @generated from field: string id = 4;
   */
  id = "";

  /**
   * @generated from field: map<string, google.protobuf.Value> properties = 5;
   */
  properties: { [key: string]: Value } = {};

  /**
   * @generated from field: bool checkVersion = 6;
   */
  checkVersion = false;

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<UpdateRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rest.UpdateRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 6, name: "checkVersion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRecordRequest {
    return new UpdateRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRecordRequest {
    return new UpdateRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRecordRequest {
    return new UpdateRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRecordRequest | PlainMessage<UpdateRecordRequest> | undefined, b: UpdateRecordRequest | PlainMessage<UpdateRecordRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRecordRequest, a, b);
  }
}

/**
 * @generated from message rest.UpdateRecordResponse
 */
export class UpdateRecordResponse extends Message<UpdateRecordResponse> {
  /**
   * @generated from field: map<string, google.protobuf.Value> properties = 5;
   */
  properties: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<UpdateRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rest.UpdateRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRecordResponse {
    return new UpdateRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRecordResponse {
    return new UpdateRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRecordResponse {
    return new UpdateRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRecordResponse | PlainMessage<UpdateRecordResponse> | undefined, b: UpdateRecordResponse | PlainMessage<UpdateRecordResponse> | undefined): boolean {
    return proto3.util.equals(UpdateRecordResponse, a, b);
  }
}

/**
 * @generated from message rest.ApplyRecordRequest
 */
export class ApplyRecordRequest extends Message<ApplyRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * id; read only
   *
   * @generated from field: string id = 4;
   */
  id = "";

  /**
   * @generated from field: map<string, google.protobuf.Value> properties = 5;
   */
  properties: { [key: string]: Value } = {};

  /**
   * @generated from field: bool checkVersion = 6;
   */
  checkVersion = false;

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ApplyRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rest.ApplyRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
    { no: 6, name: "checkVersion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplyRecordRequest {
    return new ApplyRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplyRecordRequest {
    return new ApplyRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplyRecordRequest {
    return new ApplyRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApplyRecordRequest | PlainMessage<ApplyRecordRequest> | undefined, b: ApplyRecordRequest | PlainMessage<ApplyRecordRequest> | undefined): boolean {
    return proto3.util.equals(ApplyRecordRequest, a, b);
  }
}

/**
 * @generated from message rest.ApplyRecordResponse
 */
export class ApplyRecordResponse extends Message<ApplyRecordResponse> {
  /**
   * @generated from field: map<string, google.protobuf.Value> properties = 5;
   */
  properties: { [key: string]: Value } = {};

  constructor(data?: PartialMessage<ApplyRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rest.ApplyRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "properties", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Value} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplyRecordResponse {
    return new ApplyRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplyRecordResponse {
    return new ApplyRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplyRecordResponse {
    return new ApplyRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ApplyRecordResponse | PlainMessage<ApplyRecordResponse> | undefined, b: ApplyRecordResponse | PlainMessage<ApplyRecordResponse> | undefined): boolean {
    return proto3.util.equals(ApplyRecordResponse, a, b);
  }
}

/**
 * @generated from message rest.DeleteRecordRequest
 */
export class DeleteRecordRequest extends Message<DeleteRecordRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 3;
   */
  resource = "";

  /**
   * Rest Only
   *
   * @generated from field: string id = 4;
   */
  id = "";

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<DeleteRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rest.DeleteRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRecordRequest {
    return new DeleteRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRecordRequest {
    return new DeleteRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRecordRequest {
    return new DeleteRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRecordRequest | PlainMessage<DeleteRecordRequest> | undefined, b: DeleteRecordRequest | PlainMessage<DeleteRecordRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRecordRequest, a, b);
  }
}

/**
 * @generated from message rest.DeleteRecordResponse
 */
export class DeleteRecordResponse extends Message<DeleteRecordResponse> {
  constructor(data?: PartialMessage<DeleteRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rest.DeleteRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRecordResponse {
    return new DeleteRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRecordResponse {
    return new DeleteRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRecordResponse {
    return new DeleteRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRecordResponse | PlainMessage<DeleteRecordResponse> | undefined, b: DeleteRecordResponse | PlainMessage<DeleteRecordResponse> | undefined): boolean {
    return proto3.util.equals(DeleteRecordResponse, a, b);
  }
}

