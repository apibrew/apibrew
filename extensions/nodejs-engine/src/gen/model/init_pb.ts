// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file model/init.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { DataSource } from "./data-source_pb";
import { Namespace } from "./namespace_pb";
import { User } from "./user_pb";
import { Resource } from "./resource_pb";
import { Record } from "./record_pb";

/**
 * @generated from message model.AppConfig
 */
export class AppConfig extends Message<AppConfig> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: int32 port = 2;
   */
  port = 0;

  /**
   * @generated from field: string jwtPrivateKey = 3;
   */
  jwtPrivateKey = "";

  /**
   * @generated from field: string jwtPublicKey = 4;
   */
  jwtPublicKey = "";

  /**
   * @generated from field: bool disableAuthentication = 5;
   */
  disableAuthentication = false;

  /**
   * @generated from field: bool disableCache = 6;
   */
  disableCache = false;

  /**
   * @generated from field: string pluginsPath = 7;
   */
  pluginsPath = "";

  constructor(data?: PartialMessage<AppConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.AppConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "jwtPrivateKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "jwtPublicKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "disableAuthentication", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "disableCache", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "pluginsPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AppConfig {
    return new AppConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AppConfig {
    return new AppConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AppConfig {
    return new AppConfig().fromJsonString(jsonString, options);
  }

  static equals(a: AppConfig | PlainMessage<AppConfig> | undefined, b: AppConfig | PlainMessage<AppConfig> | undefined): boolean {
    return proto3.util.equals(AppConfig, a, b);
  }
}

/**
 * @generated from message model.InitData
 */
export class InitData extends Message<InitData> {
  /**
   * @generated from field: model.AppConfig config = 1;
   */
  config?: AppConfig;

  /**
   * @generated from field: model.DataSource systemDataSource = 2;
   */
  systemDataSource?: DataSource;

  /**
   * @generated from field: model.Namespace systemNamespace = 3;
   */
  systemNamespace?: Namespace;

  /**
   * @generated from field: repeated model.DataSource initDataSources = 4;
   */
  initDataSources: DataSource[] = [];

  /**
   * @generated from field: repeated model.Namespace initNamespaces = 5;
   */
  initNamespaces: Namespace[] = [];

  /**
   * @generated from field: repeated model.User initUsers = 6;
   */
  initUsers: User[] = [];

  /**
   * @generated from field: repeated model.Resource initResources = 7;
   */
  initResources: Resource[] = [];

  /**
   * @generated from field: repeated model.Record initRecords = 8;
   */
  initRecords: Record[] = [];

  constructor(data?: PartialMessage<InitData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.InitData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: AppConfig },
    { no: 2, name: "systemDataSource", kind: "message", T: DataSource },
    { no: 3, name: "systemNamespace", kind: "message", T: Namespace },
    { no: 4, name: "initDataSources", kind: "message", T: DataSource, repeated: true },
    { no: 5, name: "initNamespaces", kind: "message", T: Namespace, repeated: true },
    { no: 6, name: "initUsers", kind: "message", T: User, repeated: true },
    { no: 7, name: "initResources", kind: "message", T: Resource, repeated: true },
    { no: 8, name: "initRecords", kind: "message", T: Record, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitData {
    return new InitData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitData {
    return new InitData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitData {
    return new InitData().fromJsonString(jsonString, options);
  }

  static equals(a: InitData | PlainMessage<InitData> | undefined, b: InitData | PlainMessage<InitData> | undefined): boolean {
    return proto3.util.equals(InitData, a, b);
  }
}

