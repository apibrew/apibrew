// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file model/data-source.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { AuditData } from "./audit_pb";

/**
 * @generated from enum model.DataSourceBackendType
 */
export enum DataSourceBackendType {
  /**
   * @generated from enum value: POSTGRESQL = 0;
   */
  POSTGRESQL = 0,

  /**
   * @generated from enum value: VIRTUAL = 1;
   */
  VIRTUAL = 1,

  /**
   * @generated from enum value: MYSQL = 2;
   */
  MYSQL = 2,

  /**
   * @generated from enum value: ORACLE = 3;
   */
  ORACLE = 3,

  /**
   * @generated from enum value: MONGODB = 4;
   */
  MONGODB = 4,

  /**
   * @generated from enum value: REDIS = 5;
   */
  REDIS = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(DataSourceBackendType)
proto3.util.setEnumType(DataSourceBackendType, "model.DataSourceBackendType", [
  { no: 0, name: "POSTGRESQL" },
  { no: 1, name: "VIRTUAL" },
  { no: 2, name: "MYSQL" },
  { no: 3, name: "ORACLE" },
  { no: 4, name: "MONGODB" },
  { no: 5, name: "REDIS" },
]);

/**
 * @generated from message model.PostgresqlParams
 */
export class PostgresqlParams extends Message<PostgresqlParams> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: string host = 3;
   */
  host = "";

  /**
   * @generated from field: uint32 port = 4;
   */
  port = 0;

  /**
   * @generated from field: string dbName = 5;
   */
  dbName = "";

  /**
   * @generated from field: string defaultSchema = 6;
   */
  defaultSchema = "";

  constructor(data?: PartialMessage<PostgresqlParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.PostgresqlParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "dbName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "defaultSchema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostgresqlParams {
    return new PostgresqlParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostgresqlParams {
    return new PostgresqlParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostgresqlParams {
    return new PostgresqlParams().fromJsonString(jsonString, options);
  }

  static equals(a: PostgresqlParams | PlainMessage<PostgresqlParams> | undefined, b: PostgresqlParams | PlainMessage<PostgresqlParams> | undefined): boolean {
    return proto3.util.equals(PostgresqlParams, a, b);
  }
}

/**
 * @generated from message model.MysqlParams
 */
export class MysqlParams extends Message<MysqlParams> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: string host = 3;
   */
  host = "";

  /**
   * @generated from field: uint32 port = 4;
   */
  port = 0;

  /**
   * @generated from field: string dbName = 5;
   */
  dbName = "";

  /**
   * @generated from field: string defaultSchema = 6;
   */
  defaultSchema = "";

  constructor(data?: PartialMessage<MysqlParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.MysqlParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "port", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "dbName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "defaultSchema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MysqlParams {
    return new MysqlParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MysqlParams {
    return new MysqlParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MysqlParams {
    return new MysqlParams().fromJsonString(jsonString, options);
  }

  static equals(a: MysqlParams | PlainMessage<MysqlParams> | undefined, b: MysqlParams | PlainMessage<MysqlParams> | undefined): boolean {
    return proto3.util.equals(MysqlParams, a, b);
  }
}

/**
 * @generated from message model.RedisParams
 */
export class RedisParams extends Message<RedisParams> {
  /**
   * @generated from field: string addr = 1;
   */
  addr = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: int32 db = 3;
   */
  db = 0;

  constructor(data?: PartialMessage<RedisParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.RedisParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "db", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RedisParams {
    return new RedisParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RedisParams {
    return new RedisParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RedisParams {
    return new RedisParams().fromJsonString(jsonString, options);
  }

  static equals(a: RedisParams | PlainMessage<RedisParams> | undefined, b: RedisParams | PlainMessage<RedisParams> | undefined): boolean {
    return proto3.util.equals(RedisParams, a, b);
  }
}

/**
 * @generated from message model.MongoParams
 */
export class MongoParams extends Message<MongoParams> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = "";

  /**
   * @generated from field: string dbName = 2;
   */
  dbName = "";

  constructor(data?: PartialMessage<MongoParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.MongoParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dbName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MongoParams {
    return new MongoParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MongoParams {
    return new MongoParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MongoParams {
    return new MongoParams().fromJsonString(jsonString, options);
  }

  static equals(a: MongoParams | PlainMessage<MongoParams> | undefined, b: MongoParams | PlainMessage<MongoParams> | undefined): boolean {
    return proto3.util.equals(MongoParams, a, b);
  }
}

/**
 * @generated from message model.VirtualParams
 */
export class VirtualParams extends Message<VirtualParams> {
  /**
   * @generated from field: model.VirtualParams.Mode mode = 1;
   */
  mode = VirtualParams_Mode.DISCARD;

  constructor(data?: PartialMessage<VirtualParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.VirtualParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mode", kind: "enum", T: proto3.getEnumType(VirtualParams_Mode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VirtualParams {
    return new VirtualParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VirtualParams {
    return new VirtualParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VirtualParams {
    return new VirtualParams().fromJsonString(jsonString, options);
  }

  static equals(a: VirtualParams | PlainMessage<VirtualParams> | undefined, b: VirtualParams | PlainMessage<VirtualParams> | undefined): boolean {
    return proto3.util.equals(VirtualParams, a, b);
  }
}

/**
 * @generated from enum model.VirtualParams.Mode
 */
export enum VirtualParams_Mode {
  /**
   * @generated from enum value: DISCARD = 0;
   */
  DISCARD = 0,

  /**
   * @generated from enum value: ERROR = 1;
   */
  ERROR = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(VirtualParams_Mode)
proto3.util.setEnumType(VirtualParams_Mode, "model.VirtualParams.Mode", [
  { no: 0, name: "DISCARD" },
  { no: 1, name: "ERROR" },
]);

/**
 * @generated from message model.DataSource
 */
export class DataSource extends Message<DataSource> {
  /**
   * id; read only
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: model.DataSourceBackendType backend = 2;
   */
  backend = DataSourceBackendType.POSTGRESQL;

  /**
   * @generated from field: string name = 5;
   */
  name = "";

  /**
   * @generated from field: string description = 6;
   */
  description = "";

  /**
   * @generated from oneof model.DataSource.params
   */
  params: {
    /**
     * @generated from field: model.PostgresqlParams postgresqlParams = 7;
     */
    value: PostgresqlParams;
    case: "postgresqlParams";
  } | {
    /**
     * @generated from field: model.MysqlParams mysqlParams = 8;
     */
    value: MysqlParams;
    case: "mysqlParams";
  } | {
    /**
     * @generated from field: model.VirtualParams virtualParams = 9;
     */
    value: VirtualParams;
    case: "virtualParams";
  } | {
    /**
     * @generated from field: model.RedisParams redisParams = 10;
     */
    value: RedisParams;
    case: "redisParams";
  } | {
    /**
     * @generated from field: model.MongoParams mongoParams = 11;
     */
    value: MongoParams;
    case: "mongoParams";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * read only
   *
   * @generated from field: model.AuditData auditData = 101;
   */
  auditData?: AuditData;

  /**
   * read only
   *
   * @generated from field: uint32 version = 102;
   */
  version = 0;

  constructor(data?: PartialMessage<DataSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.DataSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "backend", kind: "enum", T: proto3.getEnumType(DataSourceBackendType) },
    { no: 5, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "postgresqlParams", kind: "message", T: PostgresqlParams, oneof: "params" },
    { no: 8, name: "mysqlParams", kind: "message", T: MysqlParams, oneof: "params" },
    { no: 9, name: "virtualParams", kind: "message", T: VirtualParams, oneof: "params" },
    { no: 10, name: "redisParams", kind: "message", T: RedisParams, oneof: "params" },
    { no: 11, name: "mongoParams", kind: "message", T: MongoParams, oneof: "params" },
    { no: 101, name: "auditData", kind: "message", T: AuditData },
    { no: 102, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataSource {
    return new DataSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataSource {
    return new DataSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataSource {
    return new DataSource().fromJsonString(jsonString, options);
  }

  static equals(a: DataSource | PlainMessage<DataSource> | undefined, b: DataSource | PlainMessage<DataSource> | undefined): boolean {
    return proto3.util.equals(DataSource, a, b);
  }
}

/**
 * @generated from message model.DataSourceEntity
 */
export class DataSourceEntity extends Message<DataSourceEntity> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bool readOnly = 2;
   */
  readOnly = false;

  constructor(data?: PartialMessage<DataSourceEntity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.DataSourceEntity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "readOnly", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataSourceEntity {
    return new DataSourceEntity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataSourceEntity {
    return new DataSourceEntity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataSourceEntity {
    return new DataSourceEntity().fromJsonString(jsonString, options);
  }

  static equals(a: DataSourceEntity | PlainMessage<DataSourceEntity> | undefined, b: DataSourceEntity | PlainMessage<DataSourceEntity> | undefined): boolean {
    return proto3.util.equals(DataSourceEntity, a, b);
  }
}

/**
 * @generated from message model.DataSourceCatalog
 */
export class DataSourceCatalog extends Message<DataSourceCatalog> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated model.DataSourceEntity entities = 2;
   */
  entities: DataSourceEntity[] = [];

  constructor(data?: PartialMessage<DataSourceCatalog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.DataSourceCatalog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entities", kind: "message", T: DataSourceEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataSourceCatalog {
    return new DataSourceCatalog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataSourceCatalog {
    return new DataSourceCatalog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataSourceCatalog {
    return new DataSourceCatalog().fromJsonString(jsonString, options);
  }

  static equals(a: DataSourceCatalog | PlainMessage<DataSourceCatalog> | undefined, b: DataSourceCatalog | PlainMessage<DataSourceCatalog> | undefined): boolean {
    return proto3.util.equals(DataSourceCatalog, a, b);
  }
}

