// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file model/audit.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message model.AuditData
 */
export class AuditData extends Message<AuditData> {
  /**
   * @generated from field: google.protobuf.Timestamp created_on = 1;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 2;
   */
  updatedOn?: Timestamp;

  /**
   * @generated from field: string created_by = 3;
   */
  createdBy = "";

  /**
   * @generated from field: string updated_by = 4;
   */
  updatedBy = "";

  constructor(data?: PartialMessage<AuditData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.AuditData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "created_on", kind: "message", T: Timestamp },
    { no: 2, name: "updated_on", kind: "message", T: Timestamp },
    { no: 3, name: "created_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "updated_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditData {
    return new AuditData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditData {
    return new AuditData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditData {
    return new AuditData().fromJsonString(jsonString, options);
  }

  static equals(a: AuditData | PlainMessage<AuditData> | undefined, b: AuditData | PlainMessage<AuditData> | undefined): boolean {
    return proto3.util.equals(AuditData, a, b);
  }
}

