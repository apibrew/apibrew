// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file model/extension.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { EventSelector } from "./event_pb";
import { ExternalCall } from "./external_pb";
import { AuditData } from "./audit_pb";

/**
 * @generated from message model.Extension
 */
export class Extension extends Message<Extension> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: model.EventSelector selector = 4;
   */
  selector?: EventSelector;

  /**
   * @generated from field: int32 order = 5;
   */
  order = 0;

  /**
   *
   * If true, this will be last event on operation list
   *
   * @generated from field: bool finalizes = 9;
   */
  finalizes = false;

  /**
   *
   * If true, backend will wait for processing this event before sending next one on operation list
   *
   * @generated from field: bool sync = 10;
   */
  sync = false;

  /**
   * @generated from field: bool responds = 11;
   */
  responds = false;

  /**
   * @generated from field: model.ExternalCall call = 7;
   */
  call?: ExternalCall;

  /**
   * @generated from field: model.AuditData auditData = 101;
   */
  auditData?: AuditData;

  /**
   * @generated from field: uint32 version = 102;
   */
  version = 0;

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Extension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Extension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "selector", kind: "message", T: EventSelector },
    { no: 5, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "finalizes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "sync", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "responds", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "call", kind: "message", T: ExternalCall },
    { no: 101, name: "auditData", kind: "message", T: AuditData },
    { no: 102, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Extension {
    return new Extension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Extension {
    return new Extension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Extension {
    return new Extension().fromJsonString(jsonString, options);
  }

  static equals(a: Extension | PlainMessage<Extension> | undefined, b: Extension | PlainMessage<Extension> | undefined): boolean {
    return proto3.util.equals(Extension, a, b);
  }
}

