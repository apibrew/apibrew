// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file model/security.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum model.OperationType
 */
export enum OperationType {
  /**
   * @generated from enum value: OPERATION_TYPE_READ = 0;
   */
  OPERATION_TYPE_READ = 0,

  /**
   * @generated from enum value: OPERATION_TYPE_CREATE = 1;
   */
  OPERATION_TYPE_CREATE = 1,

  /**
   * @generated from enum value: OPERATION_TYPE_UPDATE = 2;
   */
  OPERATION_TYPE_UPDATE = 2,

  /**
   * @generated from enum value: OPERATION_TYPE_DELETE = 3;
   */
  OPERATION_TYPE_DELETE = 3,

  /**
   * @generated from enum value: FULL = 4;
   */
  FULL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(OperationType)
proto3.util.setEnumType(OperationType, "model.OperationType", [
  { no: 0, name: "OPERATION_TYPE_READ" },
  { no: 1, name: "OPERATION_TYPE_CREATE" },
  { no: 2, name: "OPERATION_TYPE_UPDATE" },
  { no: 3, name: "OPERATION_TYPE_DELETE" },
  { no: 4, name: "FULL" },
]);

/**
 * @generated from enum model.PermitType
 */
export enum PermitType {
  /**
   * @generated from enum value: PERMIT_TYPE_ALLOW = 0;
   */
  ALLOW = 0,

  /**
   * @generated from enum value: PERMIT_TYPE_REJECT = 1;
   */
  REJECT = 1,

  /**
   * @generated from enum value: PERMIT_TYPE_UNKNOWN = 2;
   */
  UNKNOWN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PermitType)
proto3.util.setEnumType(PermitType, "model.PermitType", [
  { no: 0, name: "PERMIT_TYPE_ALLOW" },
  { no: 1, name: "PERMIT_TYPE_REJECT" },
  { no: 2, name: "PERMIT_TYPE_UNKNOWN" },
]);

/**
 *
 * SecurityConstraint is a rule
 *
 * @generated from message model.SecurityConstraint
 */
export class SecurityConstraint extends Message<SecurityConstraint> {
  /**
   *  namespace name where it will be applied
   *
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * resource name where it will be applied
   *
   * @generated from field: string resource = 2;
   */
  resource = "";

  /**
   * property name where it will be applied
   *
   * @generated from field: string property = 3;
   */
  property = "";

  /**
   * before it is valid
   *
   * @generated from field: google.protobuf.Timestamp before = 5;
   */
  before?: Timestamp;

  /**
   * after it is valid
   *
   * @generated from field: google.protobuf.Timestamp after = 6;
   */
  after?: Timestamp;

  /**
   * username which it is applied to
   *
   * @generated from field: string principal = 7;
   */
  principal = "";

  /**
   * list of record ids which it is applied to
   *
   * @generated from field: repeated string recordIds = 8;
   */
  recordIds: string[] = [];

  /**
   * operation name which it is applied to
   *
   * @generated from field: model.OperationType operation = 13;
   */
  operation = OperationType.OPERATION_TYPE_READ;

  /**
   * permission
   *
   * @generated from field: model.PermitType permit = 14;
   */
  permit = PermitType.ALLOW;

  constructor(data?: PartialMessage<SecurityConstraint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.SecurityConstraint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "property", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "before", kind: "message", T: Timestamp },
    { no: 6, name: "after", kind: "message", T: Timestamp },
    { no: 7, name: "principal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "recordIds", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 13, name: "operation", kind: "enum", T: proto3.getEnumType(OperationType) },
    { no: 14, name: "permit", kind: "enum", T: proto3.getEnumType(PermitType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecurityConstraint {
    return new SecurityConstraint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecurityConstraint {
    return new SecurityConstraint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecurityConstraint {
    return new SecurityConstraint().fromJsonString(jsonString, options);
  }

  static equals(a: SecurityConstraint | PlainMessage<SecurityConstraint> | undefined, b: SecurityConstraint | PlainMessage<SecurityConstraint> | undefined): boolean {
    return proto3.util.equals(SecurityConstraint, a, b);
  }
}

/**
 * @generated from message model.SecurityContext
 */
export class SecurityContext extends Message<SecurityContext> {
  /**
   * @generated from field: repeated model.SecurityConstraint constraints = 1;
   */
  constraints: SecurityConstraint[] = [];

  constructor(data?: PartialMessage<SecurityContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.SecurityContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "constraints", kind: "message", T: SecurityConstraint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SecurityContext {
    return new SecurityContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SecurityContext {
    return new SecurityContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SecurityContext {
    return new SecurityContext().fromJsonString(jsonString, options);
  }

  static equals(a: SecurityContext | PlainMessage<SecurityContext> | undefined, b: SecurityContext | PlainMessage<SecurityContext> | undefined): boolean {
    return proto3.util.equals(SecurityContext, a, b);
  }
}

