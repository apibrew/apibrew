// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file model/external.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message model.FunctionCall
 */
export class FunctionCall extends Message<FunctionCall> {
  /**
   * @generated from field: string host = 1;
   */
  host = "";

  /**
   * @generated from field: string functionName = 2;
   */
  functionName = "";

  constructor(data?: PartialMessage<FunctionCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.FunctionCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "functionName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FunctionCall {
    return new FunctionCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FunctionCall {
    return new FunctionCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FunctionCall {
    return new FunctionCall().fromJsonString(jsonString, options);
  }

  static equals(a: FunctionCall | PlainMessage<FunctionCall> | undefined, b: FunctionCall | PlainMessage<FunctionCall> | undefined): boolean {
    return proto3.util.equals(FunctionCall, a, b);
  }
}

/**
 * @generated from message model.HttpCall
 */
export class HttpCall extends Message<HttpCall> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = "";

  /**
   * @generated from field: string method = 2;
   */
  method = "";

  constructor(data?: PartialMessage<HttpCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.HttpCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HttpCall {
    return new HttpCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HttpCall {
    return new HttpCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HttpCall {
    return new HttpCall().fromJsonString(jsonString, options);
  }

  static equals(a: HttpCall | PlainMessage<HttpCall> | undefined, b: HttpCall | PlainMessage<HttpCall> | undefined): boolean {
    return proto3.util.equals(HttpCall, a, b);
  }
}

/**
 * @generated from message model.ExternalCall
 */
export class ExternalCall extends Message<ExternalCall> {
  /**
   * @generated from field: model.FunctionCall functionCall = 1;
   */
  functionCall?: FunctionCall;

  /**
   * @generated from field: model.HttpCall httpCall = 2;
   */
  httpCall?: HttpCall;

  constructor(data?: PartialMessage<ExternalCall>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.ExternalCall";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "functionCall", kind: "message", T: FunctionCall },
    { no: 2, name: "httpCall", kind: "message", T: HttpCall },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExternalCall {
    return new ExternalCall().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExternalCall {
    return new ExternalCall().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExternalCall {
    return new ExternalCall().fromJsonString(jsonString, options);
  }

  static equals(a: ExternalCall | PlainMessage<ExternalCall> | undefined, b: ExternalCall | PlainMessage<ExternalCall> | undefined): boolean {
    return proto3.util.equals(ExternalCall, a, b);
  }
}

