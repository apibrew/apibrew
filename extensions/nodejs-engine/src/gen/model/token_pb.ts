// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file model/token.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum model.TokenTerm
 */
export enum TokenTerm {
  /**
   * 1 minute
   *
   * @generated from enum value: SHORT = 0;
   */
  SHORT = 0,

  /**
   * 2 hours
   *
   * @generated from enum value: MIDDLE = 1;
   */
  MIDDLE = 1,

  /**
   * 2 days
   *
   * @generated from enum value: LONG = 2;
   */
  LONG = 2,

  /**
   * 2 years
   *
   * @generated from enum value: VERY_LONG = 3;
   */
  VERY_LONG = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(TokenTerm)
proto3.util.setEnumType(TokenTerm, "model.TokenTerm", [
  { no: 0, name: "SHORT" },
  { no: 1, name: "MIDDLE" },
  { no: 2, name: "LONG" },
  { no: 3, name: "VERY_LONG" },
]);

/**
 * @generated from message model.Token
 */
export class Token extends Message<Token> {
  /**
   * issue term
   *
   * @generated from field: model.TokenTerm term = 1;
   */
  term = TokenTerm.SHORT;

  /**
   * jwt token
   *
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * expiration time
   *
   * @generated from field: google.protobuf.Timestamp expiration = 3;
   */
  expiration?: Timestamp;

  constructor(data?: PartialMessage<Token>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Token";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "term", kind: "enum", T: proto3.getEnumType(TokenTerm) },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expiration", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Token {
    return new Token().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Token {
    return new Token().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Token {
    return new Token().fromJsonString(jsonString, options);
  }

  static equals(a: Token | PlainMessage<Token> | undefined, b: Token | PlainMessage<Token> | undefined): boolean {
    return proto3.util.equals(Token, a, b);
  }
}

