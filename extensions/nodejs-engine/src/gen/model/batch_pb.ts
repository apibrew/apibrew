// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file model/batch.proto (package model, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Value } from "@bufbuild/protobuf";
import { Resource } from "./resource_pb";

/**
 * @generated from message model.BatchHeader
 */
export class BatchHeader extends Message<BatchHeader> {
  /**
   * @generated from field: model.BatchHeader.BatchMode mode = 1;
   */
  mode = BatchHeader_BatchMode.CREATE;

  /**
   * @generated from field: map<string, string> annotations = 103;
   */
  annotations: { [key: string]: string } = {};

  constructor(data?: PartialMessage<BatchHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.BatchHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mode", kind: "enum", T: proto3.getEnumType(BatchHeader_BatchMode) },
    { no: 103, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchHeader {
    return new BatchHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchHeader {
    return new BatchHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchHeader {
    return new BatchHeader().fromJsonString(jsonString, options);
  }

  static equals(a: BatchHeader | PlainMessage<BatchHeader> | undefined, b: BatchHeader | PlainMessage<BatchHeader> | undefined): boolean {
    return proto3.util.equals(BatchHeader, a, b);
  }
}

/**
 * @generated from enum model.BatchHeader.BatchMode
 */
export enum BatchHeader_BatchMode {
  /**
   * @generated from enum value: CREATE = 0;
   */
  CREATE = 0,

  /**
   * @generated from enum value: UPDATE = 1;
   */
  UPDATE = 1,

  /**
   * @generated from enum value: DELETE = 2;
   */
  DELETE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BatchHeader_BatchMode)
proto3.util.setEnumType(BatchHeader_BatchMode, "model.BatchHeader.BatchMode", [
  { no: 0, name: "CREATE" },
  { no: 1, name: "UPDATE" },
  { no: 2, name: "DELETE" },
]);

/**
 * @generated from message model.BatchRecordsPart
 */
export class BatchRecordsPart extends Message<BatchRecordsPart> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string resource = 2;
   */
  resource = "";

  /**
   * @generated from field: repeated google.protobuf.Value values = 3;
   */
  values: Value[] = [];

  constructor(data?: PartialMessage<BatchRecordsPart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.BatchRecordsPart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "resource", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "values", kind: "message", T: Value, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchRecordsPart {
    return new BatchRecordsPart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchRecordsPart {
    return new BatchRecordsPart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchRecordsPart {
    return new BatchRecordsPart().fromJsonString(jsonString, options);
  }

  static equals(a: BatchRecordsPart | PlainMessage<BatchRecordsPart> | undefined, b: BatchRecordsPart | PlainMessage<BatchRecordsPart> | undefined): boolean {
    return proto3.util.equals(BatchRecordsPart, a, b);
  }
}

/**
 * @generated from message model.Batch
 */
export class Batch extends Message<Batch> {
  /**
   * @generated from field: model.BatchHeader header = 1;
   */
  header?: BatchHeader;

  /**
   * @generated from field: repeated model.Resource resources = 2;
   */
  resources: Resource[] = [];

  /**
   * @generated from field: repeated model.BatchRecordsPart batchRecords = 3;
   */
  batchRecords: BatchRecordsPart[] = [];

  constructor(data?: PartialMessage<Batch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "model.Batch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "header", kind: "message", T: BatchHeader },
    { no: 2, name: "resources", kind: "message", T: Resource, repeated: true },
    { no: 3, name: "batchRecords", kind: "message", T: BatchRecordsPart, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Batch {
    return new Batch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Batch {
    return new Batch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Batch {
    return new Batch().fromJsonString(jsonString, options);
  }

  static equals(a: Batch | PlainMessage<Batch> | undefined, b: Batch | PlainMessage<Batch> | undefined): boolean {
    return proto3.util.equals(Batch, a, b);
  }
}

