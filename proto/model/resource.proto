syntax = "proto3";

package model;

option go_package = "github.com/tislib/data-handler/pkg/model";

import 'model/audit.proto';
import 'model/query.proto';
import 'model/common.proto';
import 'model/security.proto';
import 'google/protobuf/struct.proto';

enum AutoGenerationType {
  NONE = 0;
  IDENTITY = 1;
  RANDOMIZED_UUID = 2;
}

enum ResourcePropertyType {
  TYPE_BOOL = 0;
  TYPE_STRING = 1;
  TYPE_FLOAT32 = 2;
  TYPE_FLOAT64 = 3;
  TYPE_INT32 = 4;
  TYPE_INT64 = 5;
  TYPE_BYTES = 6;
  TYPE_UUID = 8;
  TYPE_DATE = 9;
  TYPE_TIME = 10;
  TYPE_TIMESTAMP = 11;
  TYPE_OBJECT = 12;
  TYPE_MAP = 13;
  TYPE_LIST = 14;
  TYPE_REFERENCE = 15;
  TYPE_ENUM = 16;
}

message ResourceProperty {
  string id = 1;
  string name = 2;
  ResourcePropertyType type = 3;
  string mapping = 4;
  bool required = 5;
  bool primary = 6;
  uint32 length = 7;
  bool unique = 8;
  SecurityContext securityContext = 9;
  google.protobuf.Value defaultValue = 10;
  google.protobuf.Value enumValues = 11; // if type is enum
  Reference reference = 12; // if type is reference
  ResourcePropertyType subType = 13; // if type is map or list
  bool immutable = 14; // if true, update will not be allowed on this columns

  map<string, string> annotations = 103;
}

message Reference {
  string referencedResource = 2;
  bool cascade = 3;
}

message ResourceSourceConfig {
  string dataSource = 1;
  string catalog = 2;
  string entity = 3;
}

enum Order {
  ORDER_UNKNOWN = 0;
  ORDER_ASC = 1;
  ORDER_DESC = 2;
}

message ResourceIndexProperty {
  string name = 1;
  Order order = 2;
}

enum ResourceIndexType {
  BTREE = 0;
  HASH = 1;
}

message ResourceIndex {
  repeated ResourceIndexProperty properties = 1;
  ResourceIndexType indexType = 2;
  bool unique = 3;

  map<string, string> annotations = 103;
}

message Resource {
  string id = 1; // id; read only
  string name = 2; // uniq(per namespace) // name
  string namespace = 3; // create only?
  DataType dataType = 4; // read only
  ResourceSourceConfig sourceConfig = 5;
  repeated ResourceProperty properties = 6;
  repeated ResourceIndex indexes = 7;
  SecurityContext securityContext = 10;
  bool virtual = 11;
  bool immutable = 12; // if true, delete and update will not be allowed on this resource

  AuditData auditData = 101;
  uint32 version = 102;
  map<string, string> annotations = 103;
}

message ResourceMigrationCreateResource {

}

message ResourceMigrationDeleteResource {

}

message ResourceMigrationUpdateResource {
  repeated string changedFields = 1;
}

message ResourceMigrationCreateProperty {
  string property = 1;
}

message ResourceMigrationDeleteProperty {
  string existingProperty = 1;
}

message ResourceMigrationUpdateProperty {
  string existingProperty = 1;
  string property = 2;
  repeated string changedFields = 3;
}

message ResourceMigrationCreateIndex {
  uint32 index = 1;
}

message ResourceMigrationDeleteIndex {
  uint32 existingIndex = 1;
}

message ResourceMigrationStep {
  oneof kind {
    ResourceMigrationCreateResource createResource = 1;
    ResourceMigrationDeleteResource deleteResource = 2;
    ResourceMigrationUpdateResource updateResource = 3;
    ResourceMigrationCreateProperty createProperty = 4;
    ResourceMigrationDeleteProperty deleteProperty = 5;
    ResourceMigrationUpdateProperty updateProperty = 6;
    ResourceMigrationCreateIndex createIndex = 7;
    ResourceMigrationDeleteIndex deleteIndex = 8;
  }
}

message ResourceMigrationPlan {
  model.Resource existingResource = 1;
  model.Resource currentResource = 2;
  repeated ResourceMigrationStep steps = 3;
}
