syntax = "proto3";

package stub;

option go_package = "github.com/tislib/data-handler/pkg/stub";

import 'model/data-source.proto';
import 'model/error.proto';
import 'model/resource.proto';

service DataSourceService {
  rpc Create(CreateDataSourceRequest) returns (CreateDataSourceResponse) {}
  rpc List(ListDataSourceRequest) returns (ListDataSourceResponse) {}
  rpc Update(UpdateDataSourceRequest) returns (UpdateDataSourceResponse) {}
  rpc Delete(DeleteDataSourceRequest) returns (DeleteDataSourceResponse) {}
  rpc Get(GetDataSourceRequest) returns (GetDataSourceResponse) {}
  rpc Status(StatusRequest) returns (StatusResponse) {}
  rpc ListEntities(ListEntitiesRequest) returns (ListEntitiesResponse) {}
  rpc PrepareResourceFromEntity(PrepareResourceFromEntityRequest) returns (PrepareResourceFromEntityResponse) {}
}

message PrepareResourceFromEntityRequest {
  string token = 1;
  string id = 2;
  string catalog = 3;
  string entity = 4;
}

message PrepareResourceFromEntityResponse {
  model.Resource resource = 1;
}

message StatusRequest {
  string token = 1;
  string id = 2;
}

message StatusResponse {
  bool connectionAlreadyInitiated = 1;
  bool testConnection = 2;
}

message ListEntitiesRequest {
  string token = 1;
  string id = 2;
}

message ListEntitiesResponse {
  repeated model.DataSourceCatalog catalogs = 1;
}

message ListDataSourceRequest {
  string token = 1;
}

message ListDataSourceResponse {
  int32 total = 1;
  repeated model.DataSource content = 2;
}

message CreateDataSourceRequest {
  string token = 1;
  repeated model.DataSource dataSources = 2;
}

message CreateDataSourceResponse {
  repeated model.DataSource dataSources = 1;
}

message UpdateDataSourceRequest {
  string token = 1;
  repeated model.DataSource dataSources = 2;
}

message UpdateDataSourceResponse {
  repeated model.DataSource dataSources = 1;
}

message DeleteDataSourceRequest {
  string token = 1;
  repeated string ids = 2;
}

message DeleteDataSourceResponse {
}

message GetDataSourceRequest {
  string token = 1;
  string id = 2;
}

message GetDataSourceResponse {
  model.DataSource dataSource = 1;
}
