syntax = "proto3";

package stub;

option go_package = "github.com/tislib/data-handler/pkg/stub";

import 'model/error.proto';
import 'model/resource.proto';
import 'model/resource-migration.proto';
import "google/api/annotations.proto";
import "gnostic/openapi/v3/annotations.proto";

// Resource service is for managing resources
service Resource {
  rpc Create(CreateResourceRequest) returns(CreateResourceResponse) {
    option (google.api.http) = {
      post: "/system/resources",
      body: "*"
    };
  }
  rpc Update(UpdateResourceRequest) returns(UpdateResourceResponse) {
    option (google.api.http) = {
      put: "/system/resources",
      body: "*"
    };
  }
  rpc Delete(DeleteResourceRequest) returns(DeleteResourceResponse) {
    option (google.api.http) = {
      delete: "/system/resources",
      body: "*"
    };
  }
  rpc List(ListResourceRequest) returns(ListResourceResponse) {
    option (google.api.http) = {
      get: "/system/resources",
    };
  }
  rpc PrepareResourceMigrationPlan(PrepareResourceMigrationPlanRequest) returns(PrepareResourceMigrationPlanResponse) {
    option (google.api.http) = {
      post: "/system/resources/_migrate",
      body: "*"
    };
  }
  rpc Get(GetResourceRequest) returns(GetResourceResponse) {
    option (google.api.http) = {
      get: "/system/resources/{id}",
    };
  }
  rpc GetByName(GetResourceByNameRequest) returns(GetResourceByNameResponse) {
    option (google.api.http) = {
      get: "/system/resources/{namespace}/{name}",
    };
  }
  rpc GetSystemResource(GetSystemResourceRequest) returns(GetSystemResourceResponse) {}
}

message PrepareResourceMigrationPlanRequest {
  string token = 1;
  bool prepareFromDataSource = 2;
  repeated model.Resource resources = 3;

  map<string, string> annotations = 103;
}

message PrepareResourceMigrationPlanResponse {
  repeated model.ResourceMigrationPlan plans = 1;
}

message CreateResourceRequest {
  string token = 1;
  repeated model.Resource resources = 2;

  bool doMigration = 3;
  bool forceMigration = 4;

  map<string, string> annotations = 103;
}

message CreateResourceResponse {
  repeated model.Resource resources = 1;
}

// taleh123
message UpdateResourceRequest {
  string token = 1;
  repeated model.Resource resources = 2;

  bool doMigration = 3;
  bool forceMigration = 4;

  map<string, string> annotations = 103;
}

message UpdateResourceResponse {
  repeated model.Resource resources = 1;
}


message DeleteResourceRequest {
  string token = 1;
  repeated string ids = 3;

  bool doMigration = 4;
  bool forceMigration = 5;

  map<string, string> annotations = 103;
}

message DeleteResourceResponse {
}

message ListResourceRequest {
  string token = 1;

  map<string, string> annotations = 103;
}

message ListResourceResponse {
  repeated model.Resource resources = 1;
}

message GetResourceRequest {
  string token = 1;
  string id = 3;

  map<string, string> annotations = 103;
}

message GetResourceResponse {
  model.Resource resource = 1;
}

message GetResourceByNameRequest {
  string token = 1;
  string namespace = 2;
  string name = 3;

  map<string, string> annotations = 103;
}

message GetResourceByNameResponse {
  model.Resource resource = 1;
}

message GetSystemResourceRequest {
  string token = 1;
  string name = 2;

  map<string, string> annotations = 103;
}

message GetSystemResourceResponse {
  model.Resource resource = 1;
}
