/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: model/record.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/struct";
import * as dependency_2 from "./audit";
import * as dependency_3 from "./common";
import * as pb_1 from "google-protobuf";
export class Record extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        properties?: Map<string, dependency_1.Value>;
        propertiesPacked?: dependency_1.Value[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("properties" in data && data.properties != undefined) {
                this.properties = data.properties;
            }
            if ("propertiesPacked" in data && data.propertiesPacked != undefined) {
                this.propertiesPacked = data.propertiesPacked;
            }
        }
        if (!this.properties)
            this.properties = new Map();
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get properties() {
        return pb_1.Message.getField(this, 4) as any as Map<string, dependency_1.Value>;
    }
    set properties(value: Map<string, dependency_1.Value>) {
        pb_1.Message.setField(this, 4, value as any);
    }
    get propertiesPacked() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Value, 5) as dependency_1.Value[];
    }
    set propertiesPacked(value: dependency_1.Value[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    static fromObject(data: {
        id?: string;
        properties?: {
            [key: string]: ReturnType<typeof dependency_1.Value.prototype.toObject>;
        };
        propertiesPacked?: ReturnType<typeof dependency_1.Value.prototype.toObject>[];
    }): Record {
        const message = new Record({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (typeof data.properties == "object") {
            message.properties = new Map(Object.entries(data.properties).map(([key, value]) => [key, dependency_1.Value.fromObject(value)]));
        }
        if (data.propertiesPacked != null) {
            message.propertiesPacked = data.propertiesPacked.map(item => dependency_1.Value.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            properties?: {
                [key: string]: ReturnType<typeof dependency_1.Value.prototype.toObject>;
            };
            propertiesPacked?: ReturnType<typeof dependency_1.Value.prototype.toObject>[];
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.properties != null) {
            data.properties = (Object.fromEntries)((Array.from)(this.properties).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.propertiesPacked != null) {
            data.propertiesPacked = this.propertiesPacked.map((item: dependency_1.Value) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        for (const [key, value] of this.properties) {
            writer.writeMessage(4, this.properties, () => {
                writer.writeString(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.propertiesPacked.length)
            writer.writeRepeatedMessage(5, this.propertiesPacked, (item: dependency_1.Value) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Record {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Record();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.properties as any, reader, reader.readString, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_1.Value.deserialize(reader));
                        return value;
                    }));
                    break;
                case 5:
                    reader.readMessage(message.propertiesPacked, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.Value.deserialize(reader), dependency_1.Value));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Record {
        return Record.deserialize(bytes);
    }
}
