/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: model/extension.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./audit";
import * as dependency_2 from "./common";
import * as dependency_3 from "./external";
import * as dependency_4 from "./annotations";
import * as pb_1 from "google-protobuf";
export class Extension extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        description?: string;
        namespace?: string;
        resource?: string;
        before?: ExtensionBefore;
        instead?: ExtensionInstead;
        after?: ExtensionAfter;
        auditData?: dependency_1.AuditData;
        version?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("namespace" in data && data.namespace != undefined) {
                this.namespace = data.namespace;
            }
            if ("resource" in data && data.resource != undefined) {
                this.resource = data.resource;
            }
            if ("before" in data && data.before != undefined) {
                this.before = data.before;
            }
            if ("instead" in data && data.instead != undefined) {
                this.instead = data.instead;
            }
            if ("after" in data && data.after != undefined) {
                this.after = data.after;
            }
            if ("auditData" in data && data.auditData != undefined) {
                this.auditData = data.auditData;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get namespace() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set namespace(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get resource() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set resource(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get before() {
        return pb_1.Message.getWrapperField(this, ExtensionBefore, 7) as ExtensionBefore;
    }
    set before(value: ExtensionBefore) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasBefore() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get instead() {
        return pb_1.Message.getWrapperField(this, ExtensionInstead, 8) as ExtensionInstead;
    }
    set instead(value: ExtensionInstead) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get hasInstead() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get after() {
        return pb_1.Message.getWrapperField(this, ExtensionAfter, 9) as ExtensionAfter;
    }
    set after(value: ExtensionAfter) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get hasAfter() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get auditData() {
        return pb_1.Message.getWrapperField(this, dependency_1.AuditData, 101) as dependency_1.AuditData;
    }
    set auditData(value: dependency_1.AuditData) {
        pb_1.Message.setWrapperField(this, 101, value);
    }
    get hasAuditData() {
        return pb_1.Message.getField(this, 101) != null;
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 102, 0) as number;
    }
    set version(value: number) {
        pb_1.Message.setField(this, 102, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        description?: string;
        namespace?: string;
        resource?: string;
        before?: ReturnType<typeof ExtensionBefore.prototype.toObject>;
        instead?: ReturnType<typeof ExtensionInstead.prototype.toObject>;
        after?: ReturnType<typeof ExtensionAfter.prototype.toObject>;
        auditData?: ReturnType<typeof dependency_1.AuditData.prototype.toObject>;
        version?: number;
    }): Extension {
        const message = new Extension({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.namespace != null) {
            message.namespace = data.namespace;
        }
        if (data.resource != null) {
            message.resource = data.resource;
        }
        if (data.before != null) {
            message.before = ExtensionBefore.fromObject(data.before);
        }
        if (data.instead != null) {
            message.instead = ExtensionInstead.fromObject(data.instead);
        }
        if (data.after != null) {
            message.after = ExtensionAfter.fromObject(data.after);
        }
        if (data.auditData != null) {
            message.auditData = dependency_1.AuditData.fromObject(data.auditData);
        }
        if (data.version != null) {
            message.version = data.version;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            description?: string;
            namespace?: string;
            resource?: string;
            before?: ReturnType<typeof ExtensionBefore.prototype.toObject>;
            instead?: ReturnType<typeof ExtensionInstead.prototype.toObject>;
            after?: ReturnType<typeof ExtensionAfter.prototype.toObject>;
            auditData?: ReturnType<typeof dependency_1.AuditData.prototype.toObject>;
            version?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.namespace != null) {
            data.namespace = this.namespace;
        }
        if (this.resource != null) {
            data.resource = this.resource;
        }
        if (this.before != null) {
            data.before = this.before.toObject();
        }
        if (this.instead != null) {
            data.instead = this.instead.toObject();
        }
        if (this.after != null) {
            data.after = this.after.toObject();
        }
        if (this.auditData != null) {
            data.auditData = this.auditData.toObject();
        }
        if (this.version != null) {
            data.version = this.version;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (this.namespace.length)
            writer.writeString(5, this.namespace);
        if (this.resource.length)
            writer.writeString(6, this.resource);
        if (this.hasBefore)
            writer.writeMessage(7, this.before, () => this.before.serialize(writer));
        if (this.hasInstead)
            writer.writeMessage(8, this.instead, () => this.instead.serialize(writer));
        if (this.hasAfter)
            writer.writeMessage(9, this.after, () => this.after.serialize(writer));
        if (this.hasAuditData)
            writer.writeMessage(101, this.auditData, () => this.auditData.serialize(writer));
        if (this.version != 0)
            writer.writeUint32(102, this.version);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Extension {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Extension();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                case 5:
                    message.namespace = reader.readString();
                    break;
                case 6:
                    message.resource = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.before, () => message.before = ExtensionBefore.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.instead, () => message.instead = ExtensionInstead.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.after, () => message.after = ExtensionAfter.deserialize(reader));
                    break;
                case 101:
                    reader.readMessage(message.auditData, () => message.auditData = dependency_1.AuditData.deserialize(reader));
                    break;
                case 102:
                    message.version = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Extension {
        return Extension.deserialize(bytes);
    }
}
export class ExtensionAfter extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        all?: dependency_3.ExternalCall;
        create?: dependency_3.ExternalCall;
        update?: dependency_3.ExternalCall;
        delete?: dependency_3.ExternalCall;
        get?: dependency_3.ExternalCall;
        list?: dependency_3.ExternalCall;
        sync?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("all" in data && data.all != undefined) {
                this.all = data.all;
            }
            if ("create" in data && data.create != undefined) {
                this.create = data.create;
            }
            if ("update" in data && data.update != undefined) {
                this.update = data.update;
            }
            if ("delete" in data && data.delete != undefined) {
                this.delete = data.delete;
            }
            if ("get" in data && data.get != undefined) {
                this.get = data.get;
            }
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
            if ("sync" in data && data.sync != undefined) {
                this.sync = data.sync;
            }
        }
    }
    get all() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 1) as dependency_3.ExternalCall;
    }
    set all(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasAll() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get create() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 2) as dependency_3.ExternalCall;
    }
    set create(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreate() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get update() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 3) as dependency_3.ExternalCall;
    }
    set update(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdate() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get delete() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 4) as dependency_3.ExternalCall;
    }
    set delete(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasDelete() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get get() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 5) as dependency_3.ExternalCall;
    }
    set get(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasGet() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get list() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 6) as dependency_3.ExternalCall;
    }
    set list(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasList() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get sync() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set sync(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        all?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        create?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        update?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        delete?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        get?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        list?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        sync?: boolean;
    }): ExtensionAfter {
        const message = new ExtensionAfter({});
        if (data.all != null) {
            message.all = dependency_3.ExternalCall.fromObject(data.all);
        }
        if (data.create != null) {
            message.create = dependency_3.ExternalCall.fromObject(data.create);
        }
        if (data.update != null) {
            message.update = dependency_3.ExternalCall.fromObject(data.update);
        }
        if (data.delete != null) {
            message.delete = dependency_3.ExternalCall.fromObject(data.delete);
        }
        if (data.get != null) {
            message.get = dependency_3.ExternalCall.fromObject(data.get);
        }
        if (data.list != null) {
            message.list = dependency_3.ExternalCall.fromObject(data.list);
        }
        if (data.sync != null) {
            message.sync = data.sync;
        }
        return message;
    }
    toObject() {
        const data: {
            all?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            create?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            update?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            delete?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            get?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            list?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            sync?: boolean;
        } = {};
        if (this.all != null) {
            data.all = this.all.toObject();
        }
        if (this.create != null) {
            data.create = this.create.toObject();
        }
        if (this.update != null) {
            data.update = this.update.toObject();
        }
        if (this.delete != null) {
            data.delete = this.delete.toObject();
        }
        if (this.get != null) {
            data.get = this.get.toObject();
        }
        if (this.list != null) {
            data.list = this.list.toObject();
        }
        if (this.sync != null) {
            data.sync = this.sync;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasAll)
            writer.writeMessage(1, this.all, () => this.all.serialize(writer));
        if (this.hasCreate)
            writer.writeMessage(2, this.create, () => this.create.serialize(writer));
        if (this.hasUpdate)
            writer.writeMessage(3, this.update, () => this.update.serialize(writer));
        if (this.hasDelete)
            writer.writeMessage(4, this.delete, () => this.delete.serialize(writer));
        if (this.hasGet)
            writer.writeMessage(5, this.get, () => this.get.serialize(writer));
        if (this.hasList)
            writer.writeMessage(6, this.list, () => this.list.serialize(writer));
        if (this.sync != false)
            writer.writeBool(7, this.sync);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtensionAfter {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtensionAfter();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.all, () => message.all = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.create, () => message.create = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.update, () => message.update = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.delete, () => message.delete = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.get, () => message.get = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.list, () => message.list = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 7:
                    message.sync = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ExtensionAfter {
        return ExtensionAfter.deserialize(bytes);
    }
}
export class ExtensionBefore extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        all?: dependency_3.ExternalCall;
        create?: dependency_3.ExternalCall;
        update?: dependency_3.ExternalCall;
        delete?: dependency_3.ExternalCall;
        get?: dependency_3.ExternalCall;
        list?: dependency_3.ExternalCall;
        sync?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("all" in data && data.all != undefined) {
                this.all = data.all;
            }
            if ("create" in data && data.create != undefined) {
                this.create = data.create;
            }
            if ("update" in data && data.update != undefined) {
                this.update = data.update;
            }
            if ("delete" in data && data.delete != undefined) {
                this.delete = data.delete;
            }
            if ("get" in data && data.get != undefined) {
                this.get = data.get;
            }
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
            if ("sync" in data && data.sync != undefined) {
                this.sync = data.sync;
            }
        }
    }
    get all() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 1) as dependency_3.ExternalCall;
    }
    set all(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasAll() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get create() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 2) as dependency_3.ExternalCall;
    }
    set create(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreate() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get update() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 3) as dependency_3.ExternalCall;
    }
    set update(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdate() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get delete() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 4) as dependency_3.ExternalCall;
    }
    set delete(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasDelete() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get get() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 5) as dependency_3.ExternalCall;
    }
    set get(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasGet() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get list() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 6) as dependency_3.ExternalCall;
    }
    set list(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasList() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get sync() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set sync(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        all?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        create?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        update?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        delete?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        get?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        list?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        sync?: boolean;
    }): ExtensionBefore {
        const message = new ExtensionBefore({});
        if (data.all != null) {
            message.all = dependency_3.ExternalCall.fromObject(data.all);
        }
        if (data.create != null) {
            message.create = dependency_3.ExternalCall.fromObject(data.create);
        }
        if (data.update != null) {
            message.update = dependency_3.ExternalCall.fromObject(data.update);
        }
        if (data.delete != null) {
            message.delete = dependency_3.ExternalCall.fromObject(data.delete);
        }
        if (data.get != null) {
            message.get = dependency_3.ExternalCall.fromObject(data.get);
        }
        if (data.list != null) {
            message.list = dependency_3.ExternalCall.fromObject(data.list);
        }
        if (data.sync != null) {
            message.sync = data.sync;
        }
        return message;
    }
    toObject() {
        const data: {
            all?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            create?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            update?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            delete?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            get?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            list?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            sync?: boolean;
        } = {};
        if (this.all != null) {
            data.all = this.all.toObject();
        }
        if (this.create != null) {
            data.create = this.create.toObject();
        }
        if (this.update != null) {
            data.update = this.update.toObject();
        }
        if (this.delete != null) {
            data.delete = this.delete.toObject();
        }
        if (this.get != null) {
            data.get = this.get.toObject();
        }
        if (this.list != null) {
            data.list = this.list.toObject();
        }
        if (this.sync != null) {
            data.sync = this.sync;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasAll)
            writer.writeMessage(1, this.all, () => this.all.serialize(writer));
        if (this.hasCreate)
            writer.writeMessage(2, this.create, () => this.create.serialize(writer));
        if (this.hasUpdate)
            writer.writeMessage(3, this.update, () => this.update.serialize(writer));
        if (this.hasDelete)
            writer.writeMessage(4, this.delete, () => this.delete.serialize(writer));
        if (this.hasGet)
            writer.writeMessage(5, this.get, () => this.get.serialize(writer));
        if (this.hasList)
            writer.writeMessage(6, this.list, () => this.list.serialize(writer));
        if (this.sync != false)
            writer.writeBool(7, this.sync);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtensionBefore {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtensionBefore();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.all, () => message.all = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.create, () => message.create = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.update, () => message.update = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.delete, () => message.delete = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.get, () => message.get = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.list, () => message.list = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 7:
                    message.sync = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ExtensionBefore {
        return ExtensionBefore.deserialize(bytes);
    }
}
export class ExtensionInstead extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        all?: dependency_3.ExternalCall;
        create?: dependency_3.ExternalCall;
        update?: dependency_3.ExternalCall;
        delete?: dependency_3.ExternalCall;
        get?: dependency_3.ExternalCall;
        list?: dependency_3.ExternalCall;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("all" in data && data.all != undefined) {
                this.all = data.all;
            }
            if ("create" in data && data.create != undefined) {
                this.create = data.create;
            }
            if ("update" in data && data.update != undefined) {
                this.update = data.update;
            }
            if ("delete" in data && data.delete != undefined) {
                this.delete = data.delete;
            }
            if ("get" in data && data.get != undefined) {
                this.get = data.get;
            }
            if ("list" in data && data.list != undefined) {
                this.list = data.list;
            }
        }
    }
    get all() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 1) as dependency_3.ExternalCall;
    }
    set all(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasAll() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get create() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 2) as dependency_3.ExternalCall;
    }
    set create(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasCreate() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get update() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 3) as dependency_3.ExternalCall;
    }
    set update(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasUpdate() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get delete() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 4) as dependency_3.ExternalCall;
    }
    set delete(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasDelete() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get get() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 5) as dependency_3.ExternalCall;
    }
    set get(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get hasGet() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get list() {
        return pb_1.Message.getWrapperField(this, dependency_3.ExternalCall, 6) as dependency_3.ExternalCall;
    }
    set list(value: dependency_3.ExternalCall) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get hasList() {
        return pb_1.Message.getField(this, 6) != null;
    }
    static fromObject(data: {
        all?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        create?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        update?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        delete?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        get?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        list?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
    }): ExtensionInstead {
        const message = new ExtensionInstead({});
        if (data.all != null) {
            message.all = dependency_3.ExternalCall.fromObject(data.all);
        }
        if (data.create != null) {
            message.create = dependency_3.ExternalCall.fromObject(data.create);
        }
        if (data.update != null) {
            message.update = dependency_3.ExternalCall.fromObject(data.update);
        }
        if (data.delete != null) {
            message.delete = dependency_3.ExternalCall.fromObject(data.delete);
        }
        if (data.get != null) {
            message.get = dependency_3.ExternalCall.fromObject(data.get);
        }
        if (data.list != null) {
            message.list = dependency_3.ExternalCall.fromObject(data.list);
        }
        return message;
    }
    toObject() {
        const data: {
            all?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            create?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            update?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            delete?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            get?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
            list?: ReturnType<typeof dependency_3.ExternalCall.prototype.toObject>;
        } = {};
        if (this.all != null) {
            data.all = this.all.toObject();
        }
        if (this.create != null) {
            data.create = this.create.toObject();
        }
        if (this.update != null) {
            data.update = this.update.toObject();
        }
        if (this.delete != null) {
            data.delete = this.delete.toObject();
        }
        if (this.get != null) {
            data.get = this.get.toObject();
        }
        if (this.list != null) {
            data.list = this.list.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasAll)
            writer.writeMessage(1, this.all, () => this.all.serialize(writer));
        if (this.hasCreate)
            writer.writeMessage(2, this.create, () => this.create.serialize(writer));
        if (this.hasUpdate)
            writer.writeMessage(3, this.update, () => this.update.serialize(writer));
        if (this.hasDelete)
            writer.writeMessage(4, this.delete, () => this.delete.serialize(writer));
        if (this.hasGet)
            writer.writeMessage(5, this.get, () => this.get.serialize(writer));
        if (this.hasList)
            writer.writeMessage(6, this.list, () => this.list.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ExtensionInstead {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtensionInstead();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.all, () => message.all = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.create, () => message.create = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.update, () => message.update = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.delete, () => message.delete = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.get, () => message.get = dependency_3.ExternalCall.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.list, () => message.list = dependency_3.ExternalCall.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ExtensionInstead {
        return ExtensionInstead.deserialize(bytes);
    }
}
