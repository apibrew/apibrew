/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: model/data-source.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./audit";
import * as dependency_2 from "./common";
import * as dependency_3 from "./annotations";
import * as pb_1 from "google-protobuf";
export enum DataSourceBackendType {
    POSTGRESQL = 0,
    VIRTUAL = 1,
    MYSQL = 2,
    ORACLE = 3,
    MONGODB = 4,
    REDIS = 5
}
export class PostgresqlParams extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        password?: string;
        host?: string;
        port?: number;
        dbName?: string;
        defaultSchema?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("host" in data && data.host != undefined) {
                this.host = data.host;
            }
            if ("port" in data && data.port != undefined) {
                this.port = data.port;
            }
            if ("dbName" in data && data.dbName != undefined) {
                this.dbName = data.dbName;
            }
            if ("defaultSchema" in data && data.defaultSchema != undefined) {
                this.defaultSchema = data.defaultSchema;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get host() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set host(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get port() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set port(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get dbName() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set dbName(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get defaultSchema() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set defaultSchema(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        username?: string;
        password?: string;
        host?: string;
        port?: number;
        dbName?: string;
        defaultSchema?: string;
    }): PostgresqlParams {
        const message = new PostgresqlParams({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.host != null) {
            message.host = data.host;
        }
        if (data.port != null) {
            message.port = data.port;
        }
        if (data.dbName != null) {
            message.dbName = data.dbName;
        }
        if (data.defaultSchema != null) {
            message.defaultSchema = data.defaultSchema;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            password?: string;
            host?: string;
            port?: number;
            dbName?: string;
            defaultSchema?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.host != null) {
            data.host = this.host;
        }
        if (this.port != null) {
            data.port = this.port;
        }
        if (this.dbName != null) {
            data.dbName = this.dbName;
        }
        if (this.defaultSchema != null) {
            data.defaultSchema = this.defaultSchema;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (this.host.length)
            writer.writeString(3, this.host);
        if (this.port != 0)
            writer.writeUint32(4, this.port);
        if (this.dbName.length)
            writer.writeString(5, this.dbName);
        if (this.defaultSchema.length)
            writer.writeString(6, this.defaultSchema);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PostgresqlParams {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PostgresqlParams();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                case 3:
                    message.host = reader.readString();
                    break;
                case 4:
                    message.port = reader.readUint32();
                    break;
                case 5:
                    message.dbName = reader.readString();
                    break;
                case 6:
                    message.defaultSchema = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PostgresqlParams {
        return PostgresqlParams.deserialize(bytes);
    }
}
export class MysqlParams extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        password?: string;
        host?: string;
        port?: number;
        dbName?: string;
        defaultSchema?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("host" in data && data.host != undefined) {
                this.host = data.host;
            }
            if ("port" in data && data.port != undefined) {
                this.port = data.port;
            }
            if ("dbName" in data && data.dbName != undefined) {
                this.dbName = data.dbName;
            }
            if ("defaultSchema" in data && data.defaultSchema != undefined) {
                this.defaultSchema = data.defaultSchema;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get host() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set host(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get port() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set port(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get dbName() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set dbName(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get defaultSchema() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set defaultSchema(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        username?: string;
        password?: string;
        host?: string;
        port?: number;
        dbName?: string;
        defaultSchema?: string;
    }): MysqlParams {
        const message = new MysqlParams({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.host != null) {
            message.host = data.host;
        }
        if (data.port != null) {
            message.port = data.port;
        }
        if (data.dbName != null) {
            message.dbName = data.dbName;
        }
        if (data.defaultSchema != null) {
            message.defaultSchema = data.defaultSchema;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            password?: string;
            host?: string;
            port?: number;
            dbName?: string;
            defaultSchema?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.host != null) {
            data.host = this.host;
        }
        if (this.port != null) {
            data.port = this.port;
        }
        if (this.dbName != null) {
            data.dbName = this.dbName;
        }
        if (this.defaultSchema != null) {
            data.defaultSchema = this.defaultSchema;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (this.host.length)
            writer.writeString(3, this.host);
        if (this.port != 0)
            writer.writeUint32(4, this.port);
        if (this.dbName.length)
            writer.writeString(5, this.dbName);
        if (this.defaultSchema.length)
            writer.writeString(6, this.defaultSchema);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MysqlParams {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MysqlParams();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                case 3:
                    message.host = reader.readString();
                    break;
                case 4:
                    message.port = reader.readUint32();
                    break;
                case 5:
                    message.dbName = reader.readString();
                    break;
                case 6:
                    message.defaultSchema = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MysqlParams {
        return MysqlParams.deserialize(bytes);
    }
}
export class RedisParams extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        addr?: string;
        password?: string;
        db?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("addr" in data && data.addr != undefined) {
                this.addr = data.addr;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("db" in data && data.db != undefined) {
                this.db = data.db;
            }
        }
    }
    get addr() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set addr(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get db() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set db(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        addr?: string;
        password?: string;
        db?: number;
    }): RedisParams {
        const message = new RedisParams({});
        if (data.addr != null) {
            message.addr = data.addr;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.db != null) {
            message.db = data.db;
        }
        return message;
    }
    toObject() {
        const data: {
            addr?: string;
            password?: string;
            db?: number;
        } = {};
        if (this.addr != null) {
            data.addr = this.addr;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.db != null) {
            data.db = this.db;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.addr.length)
            writer.writeString(1, this.addr);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (this.db != 0)
            writer.writeInt32(3, this.db);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RedisParams {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RedisParams();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.addr = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                case 3:
                    message.db = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RedisParams {
        return RedisParams.deserialize(bytes);
    }
}
export class MongoParams extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        uri?: string;
        dbName?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("uri" in data && data.uri != undefined) {
                this.uri = data.uri;
            }
            if ("dbName" in data && data.dbName != undefined) {
                this.dbName = data.dbName;
            }
        }
    }
    get uri() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set uri(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get dbName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set dbName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        uri?: string;
        dbName?: string;
    }): MongoParams {
        const message = new MongoParams({});
        if (data.uri != null) {
            message.uri = data.uri;
        }
        if (data.dbName != null) {
            message.dbName = data.dbName;
        }
        return message;
    }
    toObject() {
        const data: {
            uri?: string;
            dbName?: string;
        } = {};
        if (this.uri != null) {
            data.uri = this.uri;
        }
        if (this.dbName != null) {
            data.dbName = this.dbName;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.uri.length)
            writer.writeString(1, this.uri);
        if (this.dbName.length)
            writer.writeString(2, this.dbName);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MongoParams {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MongoParams();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.uri = reader.readString();
                    break;
                case 2:
                    message.dbName = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MongoParams {
        return MongoParams.deserialize(bytes);
    }
}
export class VirtualParams extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        mode?: VirtualParamsMode;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("mode" in data && data.mode != undefined) {
                this.mode = data.mode;
            }
        }
    }
    get mode() {
        return pb_1.Message.getFieldWithDefault(this, 1, VirtualParamsMode.DISCARD) as VirtualParamsMode;
    }
    set mode(value: VirtualParamsMode) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        mode?: VirtualParamsMode;
    }): VirtualParams {
        const message = new VirtualParams({});
        if (data.mode != null) {
            message.mode = data.mode;
        }
        return message;
    }
    toObject() {
        const data: {
            mode?: VirtualParamsMode;
        } = {};
        if (this.mode != null) {
            data.mode = this.mode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.mode != VirtualParamsMode.DISCARD)
            writer.writeEnum(1, this.mode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VirtualParams {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VirtualParams();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.mode = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): VirtualParams {
        return VirtualParams.deserialize(bytes);
    }
}
export enum VirtualParamsMode {
    DISCARD = 0,
    ERROR = 1
}
export class DataSource extends pb_1.Message {
    #one_of_decls: number[][] = [[7, 8, 9, 10, 11]];
    constructor(data?: any[] | ({
        id?: string;
        backend?: DataSourceBackendType;
        name?: string;
        description?: string;
        auditData?: dependency_1.AuditData;
        version?: number;
    } & (({
        postgresqlParams?: PostgresqlParams;
        mysqlParams?: never;
        virtualParams?: never;
        redisParams?: never;
        mongoParams?: never;
    } | {
        postgresqlParams?: never;
        mysqlParams?: MysqlParams;
        virtualParams?: never;
        redisParams?: never;
        mongoParams?: never;
    } | {
        postgresqlParams?: never;
        mysqlParams?: never;
        virtualParams?: VirtualParams;
        redisParams?: never;
        mongoParams?: never;
    } | {
        postgresqlParams?: never;
        mysqlParams?: never;
        virtualParams?: never;
        redisParams?: RedisParams;
        mongoParams?: never;
    } | {
        postgresqlParams?: never;
        mysqlParams?: never;
        virtualParams?: never;
        redisParams?: never;
        mongoParams?: MongoParams;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("backend" in data && data.backend != undefined) {
                this.backend = data.backend;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("postgresqlParams" in data && data.postgresqlParams != undefined) {
                this.postgresqlParams = data.postgresqlParams;
            }
            if ("mysqlParams" in data && data.mysqlParams != undefined) {
                this.mysqlParams = data.mysqlParams;
            }
            if ("virtualParams" in data && data.virtualParams != undefined) {
                this.virtualParams = data.virtualParams;
            }
            if ("redisParams" in data && data.redisParams != undefined) {
                this.redisParams = data.redisParams;
            }
            if ("mongoParams" in data && data.mongoParams != undefined) {
                this.mongoParams = data.mongoParams;
            }
            if ("auditData" in data && data.auditData != undefined) {
                this.auditData = data.auditData;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get backend() {
        return pb_1.Message.getFieldWithDefault(this, 2, DataSourceBackendType.POSTGRESQL) as DataSourceBackendType;
    }
    set backend(value: DataSourceBackendType) {
        pb_1.Message.setField(this, 2, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get postgresqlParams() {
        return pb_1.Message.getWrapperField(this, PostgresqlParams, 7) as PostgresqlParams;
    }
    set postgresqlParams(value: PostgresqlParams) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get hasPostgresqlParams() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get mysqlParams() {
        return pb_1.Message.getWrapperField(this, MysqlParams, 8) as MysqlParams;
    }
    set mysqlParams(value: MysqlParams) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
    }
    get hasMysqlParams() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get virtualParams() {
        return pb_1.Message.getWrapperField(this, VirtualParams, 9) as VirtualParams;
    }
    set virtualParams(value: VirtualParams) {
        pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
    }
    get hasVirtualParams() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get redisParams() {
        return pb_1.Message.getWrapperField(this, RedisParams, 10) as RedisParams;
    }
    set redisParams(value: RedisParams) {
        pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
    }
    get hasRedisParams() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get mongoParams() {
        return pb_1.Message.getWrapperField(this, MongoParams, 11) as MongoParams;
    }
    set mongoParams(value: MongoParams) {
        pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
    }
    get hasMongoParams() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get auditData() {
        return pb_1.Message.getWrapperField(this, dependency_1.AuditData, 101) as dependency_1.AuditData;
    }
    set auditData(value: dependency_1.AuditData) {
        pb_1.Message.setWrapperField(this, 101, value);
    }
    get hasAuditData() {
        return pb_1.Message.getField(this, 101) != null;
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 102, 0) as number;
    }
    set version(value: number) {
        pb_1.Message.setField(this, 102, value);
    }
    get params() {
        const cases: {
            [index: number]: "none" | "postgresqlParams" | "mysqlParams" | "virtualParams" | "redisParams" | "mongoParams";
        } = {
            0: "none",
            7: "postgresqlParams",
            8: "mysqlParams",
            9: "virtualParams",
            10: "redisParams",
            11: "mongoParams"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7, 8, 9, 10, 11])];
    }
    static fromObject(data: {
        id?: string;
        backend?: DataSourceBackendType;
        name?: string;
        description?: string;
        postgresqlParams?: ReturnType<typeof PostgresqlParams.prototype.toObject>;
        mysqlParams?: ReturnType<typeof MysqlParams.prototype.toObject>;
        virtualParams?: ReturnType<typeof VirtualParams.prototype.toObject>;
        redisParams?: ReturnType<typeof RedisParams.prototype.toObject>;
        mongoParams?: ReturnType<typeof MongoParams.prototype.toObject>;
        auditData?: ReturnType<typeof dependency_1.AuditData.prototype.toObject>;
        version?: number;
    }): DataSource {
        const message = new DataSource({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.backend != null) {
            message.backend = data.backend;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.postgresqlParams != null) {
            message.postgresqlParams = PostgresqlParams.fromObject(data.postgresqlParams);
        }
        if (data.mysqlParams != null) {
            message.mysqlParams = MysqlParams.fromObject(data.mysqlParams);
        }
        if (data.virtualParams != null) {
            message.virtualParams = VirtualParams.fromObject(data.virtualParams);
        }
        if (data.redisParams != null) {
            message.redisParams = RedisParams.fromObject(data.redisParams);
        }
        if (data.mongoParams != null) {
            message.mongoParams = MongoParams.fromObject(data.mongoParams);
        }
        if (data.auditData != null) {
            message.auditData = dependency_1.AuditData.fromObject(data.auditData);
        }
        if (data.version != null) {
            message.version = data.version;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            backend?: DataSourceBackendType;
            name?: string;
            description?: string;
            postgresqlParams?: ReturnType<typeof PostgresqlParams.prototype.toObject>;
            mysqlParams?: ReturnType<typeof MysqlParams.prototype.toObject>;
            virtualParams?: ReturnType<typeof VirtualParams.prototype.toObject>;
            redisParams?: ReturnType<typeof RedisParams.prototype.toObject>;
            mongoParams?: ReturnType<typeof MongoParams.prototype.toObject>;
            auditData?: ReturnType<typeof dependency_1.AuditData.prototype.toObject>;
            version?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.backend != null) {
            data.backend = this.backend;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.postgresqlParams != null) {
            data.postgresqlParams = this.postgresqlParams.toObject();
        }
        if (this.mysqlParams != null) {
            data.mysqlParams = this.mysqlParams.toObject();
        }
        if (this.virtualParams != null) {
            data.virtualParams = this.virtualParams.toObject();
        }
        if (this.redisParams != null) {
            data.redisParams = this.redisParams.toObject();
        }
        if (this.mongoParams != null) {
            data.mongoParams = this.mongoParams.toObject();
        }
        if (this.auditData != null) {
            data.auditData = this.auditData.toObject();
        }
        if (this.version != null) {
            data.version = this.version;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.backend != DataSourceBackendType.POSTGRESQL)
            writer.writeEnum(2, this.backend);
        if (this.name.length)
            writer.writeString(5, this.name);
        if (this.description.length)
            writer.writeString(6, this.description);
        if (this.hasPostgresqlParams)
            writer.writeMessage(7, this.postgresqlParams, () => this.postgresqlParams.serialize(writer));
        if (this.hasMysqlParams)
            writer.writeMessage(8, this.mysqlParams, () => this.mysqlParams.serialize(writer));
        if (this.hasVirtualParams)
            writer.writeMessage(9, this.virtualParams, () => this.virtualParams.serialize(writer));
        if (this.hasRedisParams)
            writer.writeMessage(10, this.redisParams, () => this.redisParams.serialize(writer));
        if (this.hasMongoParams)
            writer.writeMessage(11, this.mongoParams, () => this.mongoParams.serialize(writer));
        if (this.hasAuditData)
            writer.writeMessage(101, this.auditData, () => this.auditData.serialize(writer));
        if (this.version != 0)
            writer.writeUint32(102, this.version);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataSource {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataSource();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.backend = reader.readEnum();
                    break;
                case 5:
                    message.name = reader.readString();
                    break;
                case 6:
                    message.description = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.postgresqlParams, () => message.postgresqlParams = PostgresqlParams.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.mysqlParams, () => message.mysqlParams = MysqlParams.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.virtualParams, () => message.virtualParams = VirtualParams.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.redisParams, () => message.redisParams = RedisParams.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.mongoParams, () => message.mongoParams = MongoParams.deserialize(reader));
                    break;
                case 101:
                    reader.readMessage(message.auditData, () => message.auditData = dependency_1.AuditData.deserialize(reader));
                    break;
                case 102:
                    message.version = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DataSource {
        return DataSource.deserialize(bytes);
    }
}
export class DataSourceEntity extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        readOnly?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("readOnly" in data && data.readOnly != undefined) {
                this.readOnly = data.readOnly;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get readOnly() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set readOnly(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        name?: string;
        readOnly?: boolean;
    }): DataSourceEntity {
        const message = new DataSourceEntity({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.readOnly != null) {
            message.readOnly = data.readOnly;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            readOnly?: boolean;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.readOnly != null) {
            data.readOnly = this.readOnly;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.readOnly != false)
            writer.writeBool(2, this.readOnly);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataSourceEntity {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataSourceEntity();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.readOnly = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DataSourceEntity {
        return DataSourceEntity.deserialize(bytes);
    }
}
export class DataSourceCatalog extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        entities?: DataSourceEntity[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("entities" in data && data.entities != undefined) {
                this.entities = data.entities;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get entities() {
        return pb_1.Message.getRepeatedWrapperField(this, DataSourceEntity, 2) as DataSourceEntity[];
    }
    set entities(value: DataSourceEntity[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        name?: string;
        entities?: ReturnType<typeof DataSourceEntity.prototype.toObject>[];
    }): DataSourceCatalog {
        const message = new DataSourceCatalog({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.entities != null) {
            message.entities = data.entities.map(item => DataSourceEntity.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            entities?: ReturnType<typeof DataSourceEntity.prototype.toObject>[];
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.entities != null) {
            data.entities = this.entities.map((item: DataSourceEntity) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.entities.length)
            writer.writeRepeatedMessage(2, this.entities, (item: DataSourceEntity) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataSourceCatalog {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataSourceCatalog();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.entities, () => pb_1.Message.addToRepeatedWrapperField(message, 2, DataSourceEntity.deserialize(reader), DataSourceEntity));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DataSourceCatalog {
        return DataSourceCatalog.deserialize(bytes);
    }
}
