/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: model/error.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/struct";
import * as pb_1 from "google-protobuf";
export enum ErrorCode {
    UNKNOWN_ERROR = 0,
    RECORD_NOT_FOUND = 1,
    UNABLE_TO_LOCATE_PRIMARY_KEY = 2,
    INTERNAL_ERROR = 3,
    PROPERTY_NOT_FOUND = 4,
    RECORD_VALIDATION_ERROR = 5,
    RESOURCE_VALIDATION_ERROR = 13,
    AUTHENTICATION_FAILED = 6,
    ALREADY_EXISTS = 7,
    ACCESS_DENIED = 8,
    BACKEND_ERROR = 9,
    UNIQUE_VIOLATION = 10,
    REFERENCE_VIOLATION = 11,
    RESOURCE_NOT_FOUND = 12,
    UNSUPPORTED_OPERATION = 14,
    EXTERNAL_BACKEND_COMMUNICATION_ERROR = 15,
    EXTERNAL_BACKEND_ERROR = 16
}
export class ErrorField extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        recordId?: string;
        property?: string;
        message?: string;
        value?: dependency_1.Value;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("recordId" in data && data.recordId != undefined) {
                this.recordId = data.recordId;
            }
            if ("property" in data && data.property != undefined) {
                this.property = data.property;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get recordId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set recordId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get property() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set property(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get value() {
        return pb_1.Message.getWrapperField(this, dependency_1.Value, 4) as dependency_1.Value;
    }
    set value(value: dependency_1.Value) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasValue() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        recordId?: string;
        property?: string;
        message?: string;
        value?: ReturnType<typeof dependency_1.Value.prototype.toObject>;
    }): ErrorField {
        const message = new ErrorField({});
        if (data.recordId != null) {
            message.recordId = data.recordId;
        }
        if (data.property != null) {
            message.property = data.property;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.value != null) {
            message.value = dependency_1.Value.fromObject(data.value);
        }
        return message;
    }
    toObject() {
        const data: {
            recordId?: string;
            property?: string;
            message?: string;
            value?: ReturnType<typeof dependency_1.Value.prototype.toObject>;
        } = {};
        if (this.recordId != null) {
            data.recordId = this.recordId;
        }
        if (this.property != null) {
            data.property = this.property;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.value != null) {
            data.value = this.value.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.recordId.length)
            writer.writeString(1, this.recordId);
        if (this.property.length)
            writer.writeString(2, this.property);
        if (this.message.length)
            writer.writeString(3, this.message);
        if (this.hasValue)
            writer.writeMessage(4, this.value, () => this.value.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorField {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorField();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.recordId = reader.readString();
                    break;
                case 2:
                    message.property = reader.readString();
                    break;
                case 3:
                    message.message = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.value, () => message.value = dependency_1.Value.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ErrorField {
        return ErrorField.deserialize(bytes);
    }
}
export class Error extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        code?: ErrorCode;
        message?: string;
        fields?: ErrorField[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("code" in data && data.code != undefined) {
                this.code = data.code;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("fields" in data && data.fields != undefined) {
                this.fields = data.fields;
            }
        }
    }
    get code() {
        return pb_1.Message.getFieldWithDefault(this, 1, ErrorCode.UNKNOWN_ERROR) as ErrorCode;
    }
    set code(value: ErrorCode) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get fields() {
        return pb_1.Message.getRepeatedWrapperField(this, ErrorField, 3) as ErrorField[];
    }
    set fields(value: ErrorField[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        code?: ErrorCode;
        message?: string;
        fields?: ReturnType<typeof ErrorField.prototype.toObject>[];
    }): Error {
        const message = new Error({});
        if (data.code != null) {
            message.code = data.code;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.fields != null) {
            message.fields = data.fields.map(item => ErrorField.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            code?: ErrorCode;
            message?: string;
            fields?: ReturnType<typeof ErrorField.prototype.toObject>[];
        } = {};
        if (this.code != null) {
            data.code = this.code;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.fields != null) {
            data.fields = this.fields.map((item: ErrorField) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.code != ErrorCode.UNKNOWN_ERROR)
            writer.writeEnum(1, this.code);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (this.fields.length)
            writer.writeRepeatedMessage(3, this.fields, (item: ErrorField) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Error {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Error();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.code = reader.readEnum();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ErrorField.deserialize(reader), ErrorField));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Error {
        return Error.deserialize(bytes);
    }
}
