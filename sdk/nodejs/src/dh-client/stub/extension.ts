/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: stub/extension.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/api/annotations";
import * as dependency_2 from "./../model/query";
import * as dependency_3 from "./../model/extension";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class ListExtensionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        token?: string;
    }): ListExtensionRequest {
        const message = new ListExtensionRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListExtensionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListExtensionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListExtensionRequest {
        return ListExtensionRequest.deserialize(bytes);
    }
}
export class ListExtensionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        content?: dependency_3.Extension[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
        }
    }
    get content() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Extension, 1) as dependency_3.Extension[];
    }
    set content(value: dependency_3.Extension[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        content?: ReturnType<typeof dependency_3.Extension.prototype.toObject>[];
    }): ListExtensionResponse {
        const message = new ListExtensionResponse({});
        if (data.content != null) {
            message.content = data.content.map(item => dependency_3.Extension.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            content?: ReturnType<typeof dependency_3.Extension.prototype.toObject>[];
        } = {};
        if (this.content != null) {
            data.content = this.content.map((item: dependency_3.Extension) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.content.length)
            writer.writeRepeatedMessage(1, this.content, (item: dependency_3.Extension) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListExtensionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListExtensionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.content, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.Extension.deserialize(reader), dependency_3.Extension));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListExtensionResponse {
        return ListExtensionResponse.deserialize(bytes);
    }
}
export class GetExtensionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        token?: string;
        id?: string;
    }): GetExtensionRequest {
        const message = new GetExtensionRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            id?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.id.length)
            writer.writeString(2, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetExtensionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetExtensionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    message.id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetExtensionRequest {
        return GetExtensionRequest.deserialize(bytes);
    }
}
export class GetExtensionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        extension?: dependency_3.Extension;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("extension" in data && data.extension != undefined) {
                this.extension = data.extension;
            }
        }
    }
    get extension() {
        return pb_1.Message.getWrapperField(this, dependency_3.Extension, 1) as dependency_3.Extension;
    }
    set extension(value: dependency_3.Extension) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasExtension() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        extension?: ReturnType<typeof dependency_3.Extension.prototype.toObject>;
    }): GetExtensionResponse {
        const message = new GetExtensionResponse({});
        if (data.extension != null) {
            message.extension = dependency_3.Extension.fromObject(data.extension);
        }
        return message;
    }
    toObject() {
        const data: {
            extension?: ReturnType<typeof dependency_3.Extension.prototype.toObject>;
        } = {};
        if (this.extension != null) {
            data.extension = this.extension.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasExtension)
            writer.writeMessage(1, this.extension, () => this.extension.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetExtensionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetExtensionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.extension, () => message.extension = dependency_3.Extension.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetExtensionResponse {
        return GetExtensionResponse.deserialize(bytes);
    }
}
export class CreateExtensionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        extensions?: dependency_3.Extension[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("extensions" in data && data.extensions != undefined) {
                this.extensions = data.extensions;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get extensions() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Extension, 2) as dependency_3.Extension[];
    }
    set extensions(value: dependency_3.Extension[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        token?: string;
        extensions?: ReturnType<typeof dependency_3.Extension.prototype.toObject>[];
    }): CreateExtensionRequest {
        const message = new CreateExtensionRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.extensions != null) {
            message.extensions = data.extensions.map(item => dependency_3.Extension.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            extensions?: ReturnType<typeof dependency_3.Extension.prototype.toObject>[];
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.extensions != null) {
            data.extensions = this.extensions.map((item: dependency_3.Extension) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.extensions.length)
            writer.writeRepeatedMessage(2, this.extensions, (item: dependency_3.Extension) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateExtensionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateExtensionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.extensions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.Extension.deserialize(reader), dependency_3.Extension));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateExtensionRequest {
        return CreateExtensionRequest.deserialize(bytes);
    }
}
export class CreateExtensionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        extensions?: dependency_3.Extension[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("extensions" in data && data.extensions != undefined) {
                this.extensions = data.extensions;
            }
        }
    }
    get extensions() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Extension, 1) as dependency_3.Extension[];
    }
    set extensions(value: dependency_3.Extension[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        extensions?: ReturnType<typeof dependency_3.Extension.prototype.toObject>[];
    }): CreateExtensionResponse {
        const message = new CreateExtensionResponse({});
        if (data.extensions != null) {
            message.extensions = data.extensions.map(item => dependency_3.Extension.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            extensions?: ReturnType<typeof dependency_3.Extension.prototype.toObject>[];
        } = {};
        if (this.extensions != null) {
            data.extensions = this.extensions.map((item: dependency_3.Extension) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.extensions.length)
            writer.writeRepeatedMessage(1, this.extensions, (item: dependency_3.Extension) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateExtensionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateExtensionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.extensions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.Extension.deserialize(reader), dependency_3.Extension));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateExtensionResponse {
        return CreateExtensionResponse.deserialize(bytes);
    }
}
export class UpdateExtensionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        extensions?: dependency_3.Extension[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("extensions" in data && data.extensions != undefined) {
                this.extensions = data.extensions;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get extensions() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Extension, 2) as dependency_3.Extension[];
    }
    set extensions(value: dependency_3.Extension[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        token?: string;
        extensions?: ReturnType<typeof dependency_3.Extension.prototype.toObject>[];
    }): UpdateExtensionRequest {
        const message = new UpdateExtensionRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.extensions != null) {
            message.extensions = data.extensions.map(item => dependency_3.Extension.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            extensions?: ReturnType<typeof dependency_3.Extension.prototype.toObject>[];
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.extensions != null) {
            data.extensions = this.extensions.map((item: dependency_3.Extension) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.extensions.length)
            writer.writeRepeatedMessage(2, this.extensions, (item: dependency_3.Extension) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateExtensionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateExtensionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.extensions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.Extension.deserialize(reader), dependency_3.Extension));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateExtensionRequest {
        return UpdateExtensionRequest.deserialize(bytes);
    }
}
export class UpdateExtensionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        extensions?: dependency_3.Extension[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("extensions" in data && data.extensions != undefined) {
                this.extensions = data.extensions;
            }
        }
    }
    get extensions() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.Extension, 1) as dependency_3.Extension[];
    }
    set extensions(value: dependency_3.Extension[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        extensions?: ReturnType<typeof dependency_3.Extension.prototype.toObject>[];
    }): UpdateExtensionResponse {
        const message = new UpdateExtensionResponse({});
        if (data.extensions != null) {
            message.extensions = data.extensions.map(item => dependency_3.Extension.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            extensions?: ReturnType<typeof dependency_3.Extension.prototype.toObject>[];
        } = {};
        if (this.extensions != null) {
            data.extensions = this.extensions.map((item: dependency_3.Extension) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.extensions.length)
            writer.writeRepeatedMessage(1, this.extensions, (item: dependency_3.Extension) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateExtensionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateExtensionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.extensions, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.Extension.deserialize(reader), dependency_3.Extension));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateExtensionResponse {
        return UpdateExtensionResponse.deserialize(bytes);
    }
}
export class DeleteExtensionRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
        ids?: string[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("ids" in data && data.ids != undefined) {
                this.ids = data.ids;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get ids() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
    }
    set ids(value: string[]) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        token?: string;
        ids?: string[];
    }): DeleteExtensionRequest {
        const message = new DeleteExtensionRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.ids != null) {
            message.ids = data.ids;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
            ids?: string[];
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.ids != null) {
            data.ids = this.ids;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (this.ids.length)
            writer.writeRepeatedString(2, this.ids);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteExtensionRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteExtensionRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteExtensionRequest {
        return DeleteExtensionRequest.deserialize(bytes);
    }
}
export class DeleteExtensionResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): DeleteExtensionResponse {
        const message = new DeleteExtensionResponse({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteExtensionResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteExtensionResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteExtensionResponse {
        return DeleteExtensionResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedExtensionService {
    static definition = {
        List: {
            path: "/stub.Extension/List",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ListExtensionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ListExtensionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ListExtensionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ListExtensionResponse.deserialize(new Uint8Array(bytes))
        },
        Get: {
            path: "/stub.Extension/Get",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetExtensionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetExtensionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetExtensionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetExtensionResponse.deserialize(new Uint8Array(bytes))
        },
        Create: {
            path: "/stub.Extension/Create",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateExtensionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateExtensionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateExtensionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateExtensionResponse.deserialize(new Uint8Array(bytes))
        },
        Update: {
            path: "/stub.Extension/Update",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UpdateExtensionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UpdateExtensionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UpdateExtensionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UpdateExtensionResponse.deserialize(new Uint8Array(bytes))
        },
        Delete: {
            path: "/stub.Extension/Delete",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DeleteExtensionRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DeleteExtensionRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DeleteExtensionResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DeleteExtensionResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract List(call: grpc_1.ServerUnaryCall<ListExtensionRequest, ListExtensionResponse>, callback: grpc_1.sendUnaryData<ListExtensionResponse>): void;
    abstract Get(call: grpc_1.ServerUnaryCall<GetExtensionRequest, GetExtensionResponse>, callback: grpc_1.sendUnaryData<GetExtensionResponse>): void;
    abstract Create(call: grpc_1.ServerUnaryCall<CreateExtensionRequest, CreateExtensionResponse>, callback: grpc_1.sendUnaryData<CreateExtensionResponse>): void;
    abstract Update(call: grpc_1.ServerUnaryCall<UpdateExtensionRequest, UpdateExtensionResponse>, callback: grpc_1.sendUnaryData<UpdateExtensionResponse>): void;
    abstract Delete(call: grpc_1.ServerUnaryCall<DeleteExtensionRequest, DeleteExtensionResponse>, callback: grpc_1.sendUnaryData<DeleteExtensionResponse>): void;
}
export class ExtensionClient extends grpc_1.makeGenericClientConstructor(UnimplementedExtensionService.definition, "Extension", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    List: GrpcUnaryServiceInterface<ListExtensionRequest, ListExtensionResponse> = (message: ListExtensionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListExtensionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListExtensionResponse>, callback?: grpc_1.requestCallback<ListExtensionResponse>): grpc_1.ClientUnaryCall => {
        return super.List(message, metadata, options, callback);
    };
    Get: GrpcUnaryServiceInterface<GetExtensionRequest, GetExtensionResponse> = (message: GetExtensionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetExtensionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetExtensionResponse>, callback?: grpc_1.requestCallback<GetExtensionResponse>): grpc_1.ClientUnaryCall => {
        return super.Get(message, metadata, options, callback);
    };
    Create: GrpcUnaryServiceInterface<CreateExtensionRequest, CreateExtensionResponse> = (message: CreateExtensionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateExtensionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateExtensionResponse>, callback?: grpc_1.requestCallback<CreateExtensionResponse>): grpc_1.ClientUnaryCall => {
        return super.Create(message, metadata, options, callback);
    };
    Update: GrpcUnaryServiceInterface<UpdateExtensionRequest, UpdateExtensionResponse> = (message: UpdateExtensionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UpdateExtensionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UpdateExtensionResponse>, callback?: grpc_1.requestCallback<UpdateExtensionResponse>): grpc_1.ClientUnaryCall => {
        return super.Update(message, metadata, options, callback);
    };
    Delete: GrpcUnaryServiceInterface<DeleteExtensionRequest, DeleteExtensionResponse> = (message: DeleteExtensionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteExtensionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteExtensionResponse>, callback?: grpc_1.requestCallback<DeleteExtensionResponse>): grpc_1.ClientUnaryCall => {
        return super.Delete(message, metadata, options, callback);
    };
}
